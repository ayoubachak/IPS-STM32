
TEST-PRJ-IPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f36c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  0800f510  0800f510  0001f510  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fa04  0800fa04  00020648  2**0
                  CONTENTS
  4 .ARM          00000008  0800fa04  0800fa04  0001fa04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fa0c  0800fa0c  00020648  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fa0c  0800fa0c  0001fa0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fa10  0800fa10  0001fa10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000648  20000000  0800fa14  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000714  20000648  0801005c  00020648  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000d5c  0801005c  00020d5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020648  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d21b  00000000  00000000  00020678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003102  00000000  00000000  0003d893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001710  00000000  00000000  00040998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001600  00000000  00000000  000420a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a871  00000000  00000000  000436a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a655  00000000  00000000  0005df19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4e1e  00000000  00000000  0007856e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011d38c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075cc  00000000  00000000  0011d3dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000648 	.word	0x20000648
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f4f4 	.word	0x0800f4f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000064c 	.word	0x2000064c
 80001dc:	0800f4f4 	.word	0x0800f4f4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	0000      	movs	r0, r0
	...

08000fa0 <get_current>:
int position_actuel_masse;
float prev_error= 0.0;
int apply_correction = 0;


double get_current(	uint32_t readValue){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af02      	add	r7, sp, #8
 8000fa6:	6078      	str	r0, [r7, #4]

	double current;

	current = (float)readValue*(3.3/4095.0);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	ee07 3a90 	vmov	s15, r3
 8000fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fb2:	ee17 0a90 	vmov	r0, s15
 8000fb6:	f7ff facf 	bl	8000558 <__aeabi_f2d>
 8000fba:	a31a      	add	r3, pc, #104	; (adr r3, 8001024 <get_current+0x84>)
 8000fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc0:	f7ff fb22 	bl	8000608 <__aeabi_dmul>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	current/=(23 * 0.05);
 8000fcc:	a317      	add	r3, pc, #92	; (adr r3, 800102c <get_current+0x8c>)
 8000fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fd6:	f7ff fc41 	bl	800085c <__aeabi_ddiv>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	e9c7 2302 	strd	r2, r3, [r7, #8]
	sprintf(str,"Courant : valeur releve : %ld - valeur courant : %.5f\r\n",readValue,current);
 8000fe2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000fe6:	e9cd 2300 	strd	r2, r3, [sp]
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	490a      	ldr	r1, [pc, #40]	; (8001018 <get_current+0x78>)
 8000fee:	480b      	ldr	r0, [pc, #44]	; (800101c <get_current+0x7c>)
 8000ff0:	f00c f80c 	bl	800d00c <siprintf>
//	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 100);

	Current_value = current;
 8000ff4:	490a      	ldr	r1, [pc, #40]	; (8001020 <get_current+0x80>)
 8000ff6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000ffa:	e9c1 2300 	strd	r2, r3, [r1]
	return current;
 8000ffe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001002:	ec43 2b17 	vmov	d7, r2, r3
}
 8001006:	eeb0 0a47 	vmov.f32	s0, s14
 800100a:	eef0 0a67 	vmov.f32	s1, s15
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	f3af 8000 	nop.w
 8001018:	0800f510 	.word	0x0800f510
 800101c:	20000878 	.word	0x20000878
 8001020:	20000848 	.word	0x20000848
 8001024:	e734d9b4 	.word	0xe734d9b4
 8001028:	3f4a680c 	.word	0x3f4a680c
 800102c:	66666667 	.word	0x66666667
 8001030:	3ff26666 	.word	0x3ff26666
 8001034:	00000000 	.word	0x00000000

08001038 <Recevoir_tension_SHUNT>:

float Recevoir_tension_SHUNT(ADC_HandleTypeDef* hadc, UART_HandleTypeDef* huart) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b092      	sub	sp, #72	; 0x48
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
	 // ADC CONVERTER
	 float voltage;

	 HAL_ADC_Start(hadc);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f006 fba8 	bl	8007798 <HAL_ADC_Start>
	 /* Attendre la fin de la conversion ADC */
	 HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8001048:	f04f 31ff 	mov.w	r1, #4294967295
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f006 fc57 	bl	8007900 <HAL_ADC_PollForConversion>

	 /* Lisez la valeur brute */
	 uint16_t raw_value = HAL_ADC_GetValue(hadc);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f006 fdef 	bl	8007c36 <HAL_ADC_GetValue>
 8001058:	4603      	mov	r3, r0
 800105a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

	 /* Convertissez la valeur brute en tension (supposant une résolution de 12 bits et une tension de référence de 3.3 V) */
	 voltage = (raw_value / 4095.0) * 4.6;
 800105e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fa66 	bl	8000534 <__aeabi_i2d>
 8001068:	a31c      	add	r3, pc, #112	; (adr r3, 80010dc <Recevoir_tension_SHUNT+0xa4>)
 800106a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106e:	f7ff fbf5 	bl	800085c <__aeabi_ddiv>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	4610      	mov	r0, r2
 8001078:	4619      	mov	r1, r3
 800107a:	a31a      	add	r3, pc, #104	; (adr r3, 80010e4 <Recevoir_tension_SHUNT+0xac>)
 800107c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001080:	f7ff fac2 	bl	8000608 <__aeabi_dmul>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	4610      	mov	r0, r2
 800108a:	4619      	mov	r1, r3
 800108c:	f7ff fdb4 	bl	8000bf8 <__aeabi_d2f>
 8001090:	4603      	mov	r3, r0
 8001092:	643b      	str	r3, [r7, #64]	; 0x40

	 /* Envoyez la tension via USART2 */
	 char buffer[50];
	 sprintf(buffer, "voltage=%.2f\r\n", voltage);
 8001094:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001096:	f7ff fa5f 	bl	8000558 <__aeabi_f2d>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	f107 000c 	add.w	r0, r7, #12
 80010a2:	490d      	ldr	r1, [pc, #52]	; (80010d8 <Recevoir_tension_SHUNT+0xa0>)
 80010a4:	f00b ffb2 	bl	800d00c <siprintf>
	 HAL_UART_Transmit(huart, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff f897 	bl	80001e0 <strlen>
 80010b2:	4603      	mov	r3, r0
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	f107 010c 	add.w	r1, r7, #12
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295
 80010be:	6838      	ldr	r0, [r7, #0]
 80010c0:	f00a facf 	bl	800b662 <HAL_UART_Transmit>
	 return voltage;
 80010c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010c6:	ee07 3a90 	vmov	s15, r3
}
 80010ca:	eeb0 0a67 	vmov.f32	s0, s15
 80010ce:	3748      	adds	r7, #72	; 0x48
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	f3af 8000 	nop.w
 80010d8:	0800f548 	.word	0x0800f548
 80010dc:	00000000 	.word	0x00000000
 80010e0:	40affe00 	.word	0x40affe00
 80010e4:	66666666 	.word	0x66666666
 80010e8:	40126666 	.word	0x40126666
 80010ec:	00000000 	.word	0x00000000

080010f0 <get_voltage>:

double get_voltage(uint32_t readValue){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af02      	add	r7, sp, #8
 80010f6:	6078      	str	r0, [r7, #4]

	double voltage;
	voltage = (float)readValue*(3.3/4095.0);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	ee07 3a90 	vmov	s15, r3
 80010fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001102:	ee17 0a90 	vmov	r0, s15
 8001106:	f7ff fa27 	bl	8000558 <__aeabi_f2d>
 800110a:	a314      	add	r3, pc, #80	; (adr r3, 800115c <get_voltage+0x6c>)
 800110c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001110:	f7ff fa7a 	bl	8000608 <__aeabi_dmul>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	e9c7 2302 	strd	r2, r3, [r7, #8]
	sprintf(str,"Tension : valeur releve : %ld - valeur voltage : %.5f\r\n",readValue,voltage);
 800111c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001120:	e9cd 2300 	strd	r2, r3, [sp]
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	490a      	ldr	r1, [pc, #40]	; (8001150 <get_voltage+0x60>)
 8001128:	480a      	ldr	r0, [pc, #40]	; (8001154 <get_voltage+0x64>)
 800112a:	f00b ff6f 	bl	800d00c <siprintf>
//	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 100);

	Voltage_value = voltage;
 800112e:	490a      	ldr	r1, [pc, #40]	; (8001158 <get_voltage+0x68>)
 8001130:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001134:	e9c1 2300 	strd	r2, r3, [r1]
	return voltage;
 8001138:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800113c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001140:	eeb0 0a47 	vmov.f32	s0, s14
 8001144:	eef0 0a67 	vmov.f32	s1, s15
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	0800f558 	.word	0x0800f558
 8001154:	20000878 	.word	0x20000878
 8001158:	20000840 	.word	0x20000840
 800115c:	e734d9b4 	.word	0xe734d9b4
 8001160:	3f4a680c 	.word	0x3f4a680c

08001164 <Correcteur>:


void Correcteur(UART_HandleTypeDef* huart){
 8001164:	b5b0      	push	{r4, r5, r7, lr}
 8001166:	b090      	sub	sp, #64	; 0x40
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 // Variable pour stocker l'erreur précédente
 Mesure_sortie = position_actuel_masse;
 800116c:	4b66      	ldr	r3, [pc, #408]	; (8001308 <Correcteur+0x1a4>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f9df 	bl	8000534 <__aeabi_i2d>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	4964      	ldr	r1, [pc, #400]	; (800130c <Correcteur+0x1a8>)
 800117c:	e9c1 2300 	strd	r2, r3, [r1]
 error = Consigne - Mesure_sortie;
 8001180:	4b63      	ldr	r3, [pc, #396]	; (8001310 <Correcteur+0x1ac>)
 8001182:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001186:	4b61      	ldr	r3, [pc, #388]	; (800130c <Correcteur+0x1a8>)
 8001188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118c:	f7ff f884 	bl	8000298 <__aeabi_dsub>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	495f      	ldr	r1, [pc, #380]	; (8001314 <Correcteur+0x1b0>)
 8001196:	e9c1 2300 	strd	r2, r3, [r1]
 up = Kp * error;
 800119a:	4b5f      	ldr	r3, [pc, #380]	; (8001318 <Correcteur+0x1b4>)
 800119c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011a0:	4b5c      	ldr	r3, [pc, #368]	; (8001314 <Correcteur+0x1b0>)
 80011a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a6:	f7ff fa2f 	bl	8000608 <__aeabi_dmul>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	495b      	ldr	r1, [pc, #364]	; (800131c <Correcteur+0x1b8>)
 80011b0:	e9c1 2300 	strd	r2, r3, [r1]

 ui = ui + up * Ki;
 80011b4:	4b59      	ldr	r3, [pc, #356]	; (800131c <Correcteur+0x1b8>)
 80011b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011ba:	4b59      	ldr	r3, [pc, #356]	; (8001320 <Correcteur+0x1bc>)
 80011bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c0:	f7ff fa22 	bl	8000608 <__aeabi_dmul>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	4b55      	ldr	r3, [pc, #340]	; (8001324 <Correcteur+0x1c0>)
 80011ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d2:	f7ff f863 	bl	800029c <__adddf3>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4952      	ldr	r1, [pc, #328]	; (8001324 <Correcteur+0x1c0>)
 80011dc:	e9c1 2300 	strd	r2, r3, [r1]

 // Ajout du terme de dérivée (D)
 float derivative = Kd * (error - prev_error);
 80011e0:	4b4c      	ldr	r3, [pc, #304]	; (8001314 <Correcteur+0x1b0>)
 80011e2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80011e6:	4b50      	ldr	r3, [pc, #320]	; (8001328 <Correcteur+0x1c4>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff f9b4 	bl	8000558 <__aeabi_f2d>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4620      	mov	r0, r4
 80011f6:	4629      	mov	r1, r5
 80011f8:	f7ff f84e 	bl	8000298 <__aeabi_dsub>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4610      	mov	r0, r2
 8001202:	4619      	mov	r1, r3
 8001204:	4b49      	ldr	r3, [pc, #292]	; (800132c <Correcteur+0x1c8>)
 8001206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120a:	f7ff f9fd 	bl	8000608 <__aeabi_dmul>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4610      	mov	r0, r2
 8001214:	4619      	mov	r1, r3
 8001216:	f7ff fcef 	bl	8000bf8 <__aeabi_d2f>
 800121a:	4603      	mov	r3, r0
 800121c:	63fb      	str	r3, [r7, #60]	; 0x3c
 prev_error = error;
 800121e:	4b3d      	ldr	r3, [pc, #244]	; (8001314 <Correcteur+0x1b0>)
 8001220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	f7ff fce6 	bl	8000bf8 <__aeabi_d2f>
 800122c:	4603      	mov	r3, r0
 800122e:	4a3e      	ldr	r2, [pc, #248]	; (8001328 <Correcteur+0x1c4>)
 8001230:	6013      	str	r3, [r2, #0]

 //commande = up + ui + derivative; //ne pas enlver please !!!
 commande = up + ui + derivative;
 8001232:	4b3a      	ldr	r3, [pc, #232]	; (800131c <Correcteur+0x1b8>)
 8001234:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001238:	4b3a      	ldr	r3, [pc, #232]	; (8001324 <Correcteur+0x1c0>)
 800123a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123e:	f7ff f82d 	bl	800029c <__adddf3>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4614      	mov	r4, r2
 8001248:	461d      	mov	r5, r3
 800124a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800124c:	f7ff f984 	bl	8000558 <__aeabi_f2d>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4620      	mov	r0, r4
 8001256:	4629      	mov	r1, r5
 8001258:	f7ff f820 	bl	800029c <__adddf3>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4933      	ldr	r1, [pc, #204]	; (8001330 <Correcteur+0x1cc>)
 8001262:	e9c1 2300 	strd	r2, r3, [r1]
 commande =commande >25 ? 25 : commande;
 8001266:	4b32      	ldr	r3, [pc, #200]	; (8001330 <Correcteur+0x1cc>)
 8001268:	e9d3 0100 	ldrd	r0, r1, [r3]
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	4b30      	ldr	r3, [pc, #192]	; (8001334 <Correcteur+0x1d0>)
 8001272:	f7ff fc59 	bl	8000b28 <__aeabi_dcmpgt>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <Correcteur+0x120>
 800127c:	f04f 0200 	mov.w	r2, #0
 8001280:	4b2c      	ldr	r3, [pc, #176]	; (8001334 <Correcteur+0x1d0>)
 8001282:	e002      	b.n	800128a <Correcteur+0x126>
 8001284:	4b2a      	ldr	r3, [pc, #168]	; (8001330 <Correcteur+0x1cc>)
 8001286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128a:	4929      	ldr	r1, [pc, #164]	; (8001330 <Correcteur+0x1cc>)
 800128c:	e9c1 2300 	strd	r2, r3, [r1]
 commande =commande <0 ? 0 : commande;
 8001290:	4b27      	ldr	r3, [pc, #156]	; (8001330 <Correcteur+0x1cc>)
 8001292:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	f04f 0300 	mov.w	r3, #0
 800129e:	f7ff fc25 	bl	8000aec <__aeabi_dcmplt>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d004      	beq.n	80012b2 <Correcteur+0x14e>
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	f04f 0300 	mov.w	r3, #0
 80012b0:	e002      	b.n	80012b8 <Correcteur+0x154>
 80012b2:	4b1f      	ldr	r3, [pc, #124]	; (8001330 <Correcteur+0x1cc>)
 80012b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b8:	491d      	ldr	r1, [pc, #116]	; (8001330 <Correcteur+0x1cc>)
 80012ba:	e9c1 2300 	strd	r2, r3, [r1]
 char buffer[50];
 sprintf(buffer, "Commande=%.2f\r\n", commande);
 80012be:	4b1c      	ldr	r3, [pc, #112]	; (8001330 <Correcteur+0x1cc>)
 80012c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c4:	f107 0008 	add.w	r0, r7, #8
 80012c8:	491b      	ldr	r1, [pc, #108]	; (8001338 <Correcteur+0x1d4>)
 80012ca:	f00b fe9f 	bl	800d00c <siprintf>
 HAL_UART_Transmit(huart, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80012ce:	f107 0308 	add.w	r3, r7, #8
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7fe ff84 	bl	80001e0 <strlen>
 80012d8:	4603      	mov	r3, r0
 80012da:	b29a      	uxth	r2, r3
 80012dc:	f107 0108 	add.w	r1, r7, #8
 80012e0:	f04f 33ff 	mov.w	r3, #4294967295
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f00a f9bc 	bl	800b662 <HAL_UART_Transmit>

 TIM1->CCR1 = commande; //Valeurs de 0 à 40 Max
 80012ea:	4b11      	ldr	r3, [pc, #68]	; (8001330 <Correcteur+0x1cc>)
 80012ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f0:	4c12      	ldr	r4, [pc, #72]	; (800133c <Correcteur+0x1d8>)
 80012f2:	4610      	mov	r0, r2
 80012f4:	4619      	mov	r1, r3
 80012f6:	f7ff fc5f 	bl	8000bb8 <__aeabi_d2uiz>
 80012fa:	4603      	mov	r3, r0
 80012fc:	6363      	str	r3, [r4, #52]	; 0x34
}
 80012fe:	bf00      	nop
 8001300:	3740      	adds	r7, #64	; 0x40
 8001302:	46bd      	mov	sp, r7
 8001304:	bdb0      	pop	{r4, r5, r7, pc}
 8001306:	bf00      	nop
 8001308:	20000c80 	.word	0x20000c80
 800130c:	20000860 	.word	0x20000860
 8001310:	20000000 	.word	0x20000000
 8001314:	20000858 	.word	0x20000858
 8001318:	20000008 	.word	0x20000008
 800131c:	20000868 	.word	0x20000868
 8001320:	20000010 	.word	0x20000010
 8001324:	20000870 	.word	0x20000870
 8001328:	20000c84 	.word	0x20000c84
 800132c:	20000018 	.word	0x20000018
 8001330:	20000850 	.word	0x20000850
 8001334:	40390000 	.word	0x40390000
 8001338:	0800f590 	.word	0x0800f590
 800133c:	40010000 	.word	0x40010000

08001340 <get_position>:


int get_position(UART_HandleTypeDef* huart){
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]

 uint16_t position;

 /* only one sensor */
 /* Call All-In-One blocking API function */
 status = VL53L0X_PerformSingleRangingMeasurement(&VL53L0XDevs[0],&RangingMeasurementData);
 8001348:	490f      	ldr	r1, [pc, #60]	; (8001388 <get_position+0x48>)
 800134a:	4810      	ldr	r0, [pc, #64]	; (800138c <get_position+0x4c>)
 800134c:	f002 f9de 	bl	800370c <VL53L0X_PerformSingleRangingMeasurement>
 8001350:	4603      	mov	r3, r0
 8001352:	461a      	mov	r2, r3
 8001354:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <get_position+0x50>)
 8001356:	601a      	str	r2, [r3, #0]
 position=RangingMeasurementData.RangeMilliMeter;
 8001358:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <get_position+0x48>)
 800135a:	891b      	ldrh	r3, [r3, #8]
 800135c:	81fb      	strh	r3, [r7, #14]
 if( status ==0 ){
 trace_printf("\r\n%d", position_courante);
 // Sensor_SetNewRange(&VL53L0XDevs[0],&RangingMeasurementData);
 }
 sprintf(str,"position_masse_en_mm=%d\r\n",position);
 800135e:	89fb      	ldrh	r3, [r7, #14]
 8001360:	461a      	mov	r2, r3
 8001362:	490c      	ldr	r1, [pc, #48]	; (8001394 <get_position+0x54>)
 8001364:	480c      	ldr	r0, [pc, #48]	; (8001398 <get_position+0x58>)
 8001366:	f00b fe51 	bl	800d00c <siprintf>
 HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), 100);
 800136a:	480b      	ldr	r0, [pc, #44]	; (8001398 <get_position+0x58>)
 800136c:	f7fe ff38 	bl	80001e0 <strlen>
 8001370:	4603      	mov	r3, r0
 8001372:	b29a      	uxth	r2, r3
 8001374:	2364      	movs	r3, #100	; 0x64
 8001376:	4908      	ldr	r1, [pc, #32]	; (8001398 <get_position+0x58>)
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f00a f972 	bl	800b662 <HAL_UART_Transmit>

 return position;
 800137e:	89fb      	ldrh	r3, [r7, #14]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000d28 	.word	0x20000d28
 800138c:	200002e0 	.word	0x200002e0
 8001390:	20000834 	.word	0x20000834
 8001394:	0800f5a0 	.word	0x0800f5a0
 8001398:	20000878 	.word	0x20000878

0800139c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
   RangingConfig_e RangingConfig = LONG_RANGE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a6:	f006 f91d 	bl	80075e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013aa:	f000 f84b 	bl	8001444 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ae:	f000 fa79 	bl	80018a4 <MX_GPIO_Init>
  MX_DMA_Init();
 80013b2:	f000 fa57 	bl	8001864 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80013b6:	f000 fa2b 	bl	8001810 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80013ba:	f000 f9db 	bl	8001774 <MX_TIM2_Init>
  MX_ADC1_Init();
 80013be:	f000 f8ab 	bl	8001518 <MX_ADC1_Init>
  MX_TIM1_Init();
 80013c2:	f000 f937 	bl	8001634 <MX_TIM1_Init>
  MX_I2C1_Init();
 80013c6:	f000 f907 	bl	80015d8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start_IT(&htim2);
  TIM1->CCR1=0;
 80013ca:	4b16      	ldr	r3, [pc, #88]	; (8001424 <main+0x88>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	635a      	str	r2, [r3, #52]	; 0x34
  // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  HAL_UART_Receive_IT(&huart2, Rx_data, 5);
 80013d0:	2205      	movs	r2, #5
 80013d2:	4915      	ldr	r1, [pc, #84]	; (8001428 <main+0x8c>)
 80013d4:	4815      	ldr	r0, [pc, #84]	; (800142c <main+0x90>)
 80013d6:	f00a f9d6 	bl	800b786 <HAL_UART_Receive_IT>


  XNUCLEO53L0A1_hi2c = hi2c1;
 80013da:	4a15      	ldr	r2, [pc, #84]	; (8001430 <main+0x94>)
 80013dc:	4b15      	ldr	r3, [pc, #84]	; (8001434 <main+0x98>)
 80013de:	4610      	mov	r0, r2
 80013e0:	4619      	mov	r1, r3
 80013e2:	2354      	movs	r3, #84	; 0x54
 80013e4:	461a      	mov	r2, r3
 80013e6:	f00b f991 	bl	800c70c <memcpy>
  ResetAndDetectSensor(0); // UNCOMMENT THIS
 80013ea:	2000      	movs	r0, #0
 80013ec:	f006 f8dc 	bl	80075a8 <ResetAndDetectSensor>
  /* Reset and Detect all sensors */
  ResetAndDetectSensor(0); // UNCOMMENT THIS
 80013f0:	2000      	movs	r0, #0
 80013f2:	f006 f8d9 	bl	80075a8 <ResetAndDetectSensor>
  SetupSingleShot(RangingConfig);
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f005 ffb9 	bl	8007370 <SetupSingleShot>
  {


	//HAL_ADC_Start_DMA(&hadc1, adc_buffer, 2);
	  // Recevoir_tension_SHUNT(&hadc1,&huart2);
	  if (apply_correction){
 80013fe:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <main+0x9c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0fb      	beq.n	80013fe <main+0x62>
		  position_actuel_masse = get_position(&huart2);
 8001406:	4809      	ldr	r0, [pc, #36]	; (800142c <main+0x90>)
 8001408:	f7ff ff9a 	bl	8001340 <get_position>
 800140c:	4603      	mov	r3, r0
 800140e:	4a0b      	ldr	r2, [pc, #44]	; (800143c <main+0xa0>)
 8001410:	6013      	str	r3, [r2, #0]
		  Correcteur(&huart2);
 8001412:	4806      	ldr	r0, [pc, #24]	; (800142c <main+0x90>)
 8001414:	f7ff fea6 	bl	8001164 <Correcteur>
		  Recevoir_tension_SHUNT(&hadc1,&huart2);
 8001418:	4904      	ldr	r1, [pc, #16]	; (800142c <main+0x90>)
 800141a:	4809      	ldr	r0, [pc, #36]	; (8001440 <main+0xa4>)
 800141c:	f7ff fe0c 	bl	8001038 <Recevoir_tension_SHUNT>
	  if (apply_correction){
 8001420:	e7ed      	b.n	80013fe <main+0x62>
 8001422:	bf00      	nop
 8001424:	40010000 	.word	0x40010000
 8001428:	20000838 	.word	0x20000838
 800142c:	200007f0 	.word	0x200007f0
 8001430:	20000cd4 	.word	0x20000cd4
 8001434:	2000070c 	.word	0x2000070c
 8001438:	20000c88 	.word	0x20000c88
 800143c:	20000c80 	.word	0x20000c80
 8001440:	20000664 	.word	0x20000664

08001444 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b094      	sub	sp, #80	; 0x50
 8001448:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800144a:	f107 0320 	add.w	r3, r7, #32
 800144e:	2230      	movs	r2, #48	; 0x30
 8001450:	2100      	movs	r1, #0
 8001452:	4618      	mov	r0, r3
 8001454:	f00b f968 	bl	800c728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001458:	f107 030c 	add.w	r3, r7, #12
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001468:	2300      	movs	r3, #0
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	4b28      	ldr	r3, [pc, #160]	; (8001510 <SystemClock_Config+0xcc>)
 800146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001470:	4a27      	ldr	r2, [pc, #156]	; (8001510 <SystemClock_Config+0xcc>)
 8001472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001476:	6413      	str	r3, [r2, #64]	; 0x40
 8001478:	4b25      	ldr	r3, [pc, #148]	; (8001510 <SystemClock_Config+0xcc>)
 800147a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001484:	2300      	movs	r3, #0
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	4b22      	ldr	r3, [pc, #136]	; (8001514 <SystemClock_Config+0xd0>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a21      	ldr	r2, [pc, #132]	; (8001514 <SystemClock_Config+0xd0>)
 800148e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	4b1f      	ldr	r3, [pc, #124]	; (8001514 <SystemClock_Config+0xd0>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800149c:	607b      	str	r3, [r7, #4]
 800149e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014a0:	2302      	movs	r3, #2
 80014a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014a4:	2301      	movs	r3, #1
 80014a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014a8:	2310      	movs	r3, #16
 80014aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ac:	2302      	movs	r3, #2
 80014ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014b0:	2300      	movs	r3, #0
 80014b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014b4:	2310      	movs	r3, #16
 80014b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80014bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014be:	2304      	movs	r3, #4
 80014c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014c2:	2304      	movs	r3, #4
 80014c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c6:	f107 0320 	add.w	r3, r7, #32
 80014ca:	4618      	mov	r0, r3
 80014cc:	f008 fbce 	bl	8009c6c <HAL_RCC_OscConfig>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80014d6:	f000 fb45 	bl	8001b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014da:	230f      	movs	r3, #15
 80014dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014de:	2302      	movs	r3, #2
 80014e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014f0:	f107 030c 	add.w	r3, r7, #12
 80014f4:	2102      	movs	r1, #2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f008 fe30 	bl	800a15c <HAL_RCC_ClockConfig>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001502:	f000 fb2f 	bl	8001b64 <Error_Handler>
  }
}
 8001506:	bf00      	nop
 8001508:	3750      	adds	r7, #80	; 0x50
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800
 8001514:	40007000 	.word	0x40007000

08001518 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800151e:	463b      	mov	r3, r7
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800152a:	4b28      	ldr	r3, [pc, #160]	; (80015cc <MX_ADC1_Init+0xb4>)
 800152c:	4a28      	ldr	r2, [pc, #160]	; (80015d0 <MX_ADC1_Init+0xb8>)
 800152e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001530:	4b26      	ldr	r3, [pc, #152]	; (80015cc <MX_ADC1_Init+0xb4>)
 8001532:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001536:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001538:	4b24      	ldr	r3, [pc, #144]	; (80015cc <MX_ADC1_Init+0xb4>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800153e:	4b23      	ldr	r3, [pc, #140]	; (80015cc <MX_ADC1_Init+0xb4>)
 8001540:	2201      	movs	r2, #1
 8001542:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001544:	4b21      	ldr	r3, [pc, #132]	; (80015cc <MX_ADC1_Init+0xb4>)
 8001546:	2201      	movs	r2, #1
 8001548:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800154a:	4b20      	ldr	r3, [pc, #128]	; (80015cc <MX_ADC1_Init+0xb4>)
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001552:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <MX_ADC1_Init+0xb4>)
 8001554:	2200      	movs	r2, #0
 8001556:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001558:	4b1c      	ldr	r3, [pc, #112]	; (80015cc <MX_ADC1_Init+0xb4>)
 800155a:	4a1e      	ldr	r2, [pc, #120]	; (80015d4 <MX_ADC1_Init+0xbc>)
 800155c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800155e:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <MX_ADC1_Init+0xb4>)
 8001560:	2200      	movs	r2, #0
 8001562:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001564:	4b19      	ldr	r3, [pc, #100]	; (80015cc <MX_ADC1_Init+0xb4>)
 8001566:	2202      	movs	r2, #2
 8001568:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800156a:	4b18      	ldr	r3, [pc, #96]	; (80015cc <MX_ADC1_Init+0xb4>)
 800156c:	2200      	movs	r2, #0
 800156e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001572:	4b16      	ldr	r3, [pc, #88]	; (80015cc <MX_ADC1_Init+0xb4>)
 8001574:	2201      	movs	r2, #1
 8001576:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001578:	4814      	ldr	r0, [pc, #80]	; (80015cc <MX_ADC1_Init+0xb4>)
 800157a:	f006 f8c9 	bl	8007710 <HAL_ADC_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001584:	f000 faee 	bl	8001b64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001588:	2300      	movs	r3, #0
 800158a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800158c:	2301      	movs	r3, #1
 800158e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001590:	2300      	movs	r3, #0
 8001592:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001594:	463b      	mov	r3, r7
 8001596:	4619      	mov	r1, r3
 8001598:	480c      	ldr	r0, [pc, #48]	; (80015cc <MX_ADC1_Init+0xb4>)
 800159a:	f006 fb6d 	bl	8007c78 <HAL_ADC_ConfigChannel>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80015a4:	f000 fade 	bl	8001b64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015a8:	2301      	movs	r3, #1
 80015aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80015ac:	2302      	movs	r3, #2
 80015ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015b0:	463b      	mov	r3, r7
 80015b2:	4619      	mov	r1, r3
 80015b4:	4805      	ldr	r0, [pc, #20]	; (80015cc <MX_ADC1_Init+0xb4>)
 80015b6:	f006 fb5f 	bl	8007c78 <HAL_ADC_ConfigChannel>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80015c0:	f000 fad0 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015c4:	bf00      	nop
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000664 	.word	0x20000664
 80015d0:	40012000 	.word	0x40012000
 80015d4:	0f000001 	.word	0x0f000001

080015d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <MX_I2C1_Init+0x50>)
 80015de:	4a13      	ldr	r2, [pc, #76]	; (800162c <MX_I2C1_Init+0x54>)
 80015e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015e2:	4b11      	ldr	r3, [pc, #68]	; (8001628 <MX_I2C1_Init+0x50>)
 80015e4:	4a12      	ldr	r2, [pc, #72]	; (8001630 <MX_I2C1_Init+0x58>)
 80015e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015e8:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <MX_I2C1_Init+0x50>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <MX_I2C1_Init+0x50>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <MX_I2C1_Init+0x50>)
 80015f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015fc:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <MX_I2C1_Init+0x50>)
 80015fe:	2200      	movs	r2, #0
 8001600:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <MX_I2C1_Init+0x50>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001608:	4b07      	ldr	r3, [pc, #28]	; (8001628 <MX_I2C1_Init+0x50>)
 800160a:	2200      	movs	r2, #0
 800160c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <MX_I2C1_Init+0x50>)
 8001610:	2200      	movs	r2, #0
 8001612:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001614:	4804      	ldr	r0, [pc, #16]	; (8001628 <MX_I2C1_Init+0x50>)
 8001616:	f007 fb93 	bl	8008d40 <HAL_I2C_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001620:	f000 faa0 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}
 8001628:	2000070c 	.word	0x2000070c
 800162c:	40005400 	.word	0x40005400
 8001630:	000186a0 	.word	0x000186a0

08001634 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b096      	sub	sp, #88	; 0x58
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800163a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001648:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001652:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
 8001660:	611a      	str	r2, [r3, #16]
 8001662:	615a      	str	r2, [r3, #20]
 8001664:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	2220      	movs	r2, #32
 800166a:	2100      	movs	r1, #0
 800166c:	4618      	mov	r0, r3
 800166e:	f00b f85b 	bl	800c728 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001672:	4b3e      	ldr	r3, [pc, #248]	; (800176c <MX_TIM1_Init+0x138>)
 8001674:	4a3e      	ldr	r2, [pc, #248]	; (8001770 <MX_TIM1_Init+0x13c>)
 8001676:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 830;
 8001678:	4b3c      	ldr	r3, [pc, #240]	; (800176c <MX_TIM1_Init+0x138>)
 800167a:	f240 323e 	movw	r2, #830	; 0x33e
 800167e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001680:	4b3a      	ldr	r3, [pc, #232]	; (800176c <MX_TIM1_Init+0x138>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8001686:	4b39      	ldr	r3, [pc, #228]	; (800176c <MX_TIM1_Init+0x138>)
 8001688:	2264      	movs	r2, #100	; 0x64
 800168a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800168c:	4b37      	ldr	r3, [pc, #220]	; (800176c <MX_TIM1_Init+0x138>)
 800168e:	2200      	movs	r2, #0
 8001690:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001692:	4b36      	ldr	r3, [pc, #216]	; (800176c <MX_TIM1_Init+0x138>)
 8001694:	2200      	movs	r2, #0
 8001696:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001698:	4b34      	ldr	r3, [pc, #208]	; (800176c <MX_TIM1_Init+0x138>)
 800169a:	2200      	movs	r2, #0
 800169c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800169e:	4833      	ldr	r0, [pc, #204]	; (800176c <MX_TIM1_Init+0x138>)
 80016a0:	f008 ff7c 	bl	800a59c <HAL_TIM_Base_Init>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80016aa:	f000 fa5b 	bl	8001b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016b8:	4619      	mov	r1, r3
 80016ba:	482c      	ldr	r0, [pc, #176]	; (800176c <MX_TIM1_Init+0x138>)
 80016bc:	f009 faf4 	bl	800aca8 <HAL_TIM_ConfigClockSource>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80016c6:	f000 fa4d 	bl	8001b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016ca:	4828      	ldr	r0, [pc, #160]	; (800176c <MX_TIM1_Init+0x138>)
 80016cc:	f008 ffb5 	bl	800a63a <HAL_TIM_PWM_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80016d6:	f000 fa45 	bl	8001b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016da:	2300      	movs	r3, #0
 80016dc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016de:	2300      	movs	r3, #0
 80016e0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016e6:	4619      	mov	r1, r3
 80016e8:	4820      	ldr	r0, [pc, #128]	; (800176c <MX_TIM1_Init+0x138>)
 80016ea:	f009 fe99 	bl	800b420 <HAL_TIMEx_MasterConfigSynchronization>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80016f4:	f000 fa36 	bl	8001b64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016f8:	2360      	movs	r3, #96	; 0x60
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001700:	2300      	movs	r3, #0
 8001702:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001704:	2300      	movs	r3, #0
 8001706:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001708:	2300      	movs	r3, #0
 800170a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800170c:	2300      	movs	r3, #0
 800170e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001710:	2300      	movs	r3, #0
 8001712:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001718:	2200      	movs	r2, #0
 800171a:	4619      	mov	r1, r3
 800171c:	4813      	ldr	r0, [pc, #76]	; (800176c <MX_TIM1_Init+0x138>)
 800171e:	f009 fa01 	bl	800ab24 <HAL_TIM_PWM_ConfigChannel>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001728:	f000 fa1c 	bl	8001b64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800172c:	2300      	movs	r3, #0
 800172e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001734:	2300      	movs	r3, #0
 8001736:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001740:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001744:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001746:	2300      	movs	r3, #0
 8001748:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800174a:	1d3b      	adds	r3, r7, #4
 800174c:	4619      	mov	r1, r3
 800174e:	4807      	ldr	r0, [pc, #28]	; (800176c <MX_TIM1_Init+0x138>)
 8001750:	f009 fed4 	bl	800b4fc <HAL_TIMEx_ConfigBreakDeadTime>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800175a:	f000 fa03 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800175e:	4803      	ldr	r0, [pc, #12]	; (800176c <MX_TIM1_Init+0x138>)
 8001760:	f000 fb32 	bl	8001dc8 <HAL_TIM_MspPostInit>

}
 8001764:	bf00      	nop
 8001766:	3758      	adds	r7, #88	; 0x58
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000760 	.word	0x20000760
 8001770:	40010000 	.word	0x40010000

08001774 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800177a:	f107 0308 	add.w	r3, r7, #8
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001788:	463b      	mov	r3, r7
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001790:	4b1e      	ldr	r3, [pc, #120]	; (800180c <MX_TIM2_Init+0x98>)
 8001792:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001796:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2100-1;
 8001798:	4b1c      	ldr	r3, [pc, #112]	; (800180c <MX_TIM2_Init+0x98>)
 800179a:	f640 0233 	movw	r2, #2099	; 0x833
 800179e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a0:	4b1a      	ldr	r3, [pc, #104]	; (800180c <MX_TIM2_Init+0x98>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10001-1;
 80017a6:	4b19      	ldr	r3, [pc, #100]	; (800180c <MX_TIM2_Init+0x98>)
 80017a8:	f242 7210 	movw	r2, #10000	; 0x2710
 80017ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ae:	4b17      	ldr	r3, [pc, #92]	; (800180c <MX_TIM2_Init+0x98>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b4:	4b15      	ldr	r3, [pc, #84]	; (800180c <MX_TIM2_Init+0x98>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017ba:	4814      	ldr	r0, [pc, #80]	; (800180c <MX_TIM2_Init+0x98>)
 80017bc:	f008 feee 	bl	800a59c <HAL_TIM_Base_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80017c6:	f000 f9cd 	bl	8001b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017d0:	f107 0308 	add.w	r3, r7, #8
 80017d4:	4619      	mov	r1, r3
 80017d6:	480d      	ldr	r0, [pc, #52]	; (800180c <MX_TIM2_Init+0x98>)
 80017d8:	f009 fa66 	bl	800aca8 <HAL_TIM_ConfigClockSource>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80017e2:	f000 f9bf 	bl	8001b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e6:	2300      	movs	r3, #0
 80017e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017ee:	463b      	mov	r3, r7
 80017f0:	4619      	mov	r1, r3
 80017f2:	4806      	ldr	r0, [pc, #24]	; (800180c <MX_TIM2_Init+0x98>)
 80017f4:	f009 fe14 	bl	800b420 <HAL_TIMEx_MasterConfigSynchronization>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80017fe:	f000 f9b1 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001802:	bf00      	nop
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200007a8 	.word	0x200007a8

08001810 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <MX_USART2_UART_Init+0x4c>)
 8001816:	4a12      	ldr	r2, [pc, #72]	; (8001860 <MX_USART2_UART_Init+0x50>)
 8001818:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800181a:	4b10      	ldr	r3, [pc, #64]	; (800185c <MX_USART2_UART_Init+0x4c>)
 800181c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001820:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001822:	4b0e      	ldr	r3, [pc, #56]	; (800185c <MX_USART2_UART_Init+0x4c>)
 8001824:	2200      	movs	r2, #0
 8001826:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <MX_USART2_UART_Init+0x4c>)
 800182a:	2200      	movs	r2, #0
 800182c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800182e:	4b0b      	ldr	r3, [pc, #44]	; (800185c <MX_USART2_UART_Init+0x4c>)
 8001830:	2200      	movs	r2, #0
 8001832:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001834:	4b09      	ldr	r3, [pc, #36]	; (800185c <MX_USART2_UART_Init+0x4c>)
 8001836:	220c      	movs	r2, #12
 8001838:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800183a:	4b08      	ldr	r3, [pc, #32]	; (800185c <MX_USART2_UART_Init+0x4c>)
 800183c:	2200      	movs	r2, #0
 800183e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <MX_USART2_UART_Init+0x4c>)
 8001842:	2200      	movs	r2, #0
 8001844:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001846:	4805      	ldr	r0, [pc, #20]	; (800185c <MX_USART2_UART_Init+0x4c>)
 8001848:	f009 febe 	bl	800b5c8 <HAL_UART_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001852:	f000 f987 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	200007f0 	.word	0x200007f0
 8001860:	40004400 	.word	0x40004400

08001864 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <MX_DMA_Init+0x3c>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4a0b      	ldr	r2, [pc, #44]	; (80018a0 <MX_DMA_Init+0x3c>)
 8001874:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <MX_DMA_Init+0x3c>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2100      	movs	r1, #0
 800188a:	2038      	movs	r0, #56	; 0x38
 800188c:	f006 fd07 	bl	800829e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001890:	2038      	movs	r0, #56	; 0x38
 8001892:	f006 fd20 	bl	80082d6 <HAL_NVIC_EnableIRQ>

}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40023800 	.word	0x40023800

080018a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08a      	sub	sp, #40	; 0x28
 80018a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018aa:	f107 0314 	add.w	r3, r7, #20
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]
 80018b4:	609a      	str	r2, [r3, #8]
 80018b6:	60da      	str	r2, [r3, #12]
 80018b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	4b2e      	ldr	r3, [pc, #184]	; (8001978 <MX_GPIO_Init+0xd4>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a2d      	ldr	r2, [pc, #180]	; (8001978 <MX_GPIO_Init+0xd4>)
 80018c4:	f043 0304 	orr.w	r3, r3, #4
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b2b      	ldr	r3, [pc, #172]	; (8001978 <MX_GPIO_Init+0xd4>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0304 	and.w	r3, r3, #4
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	4b27      	ldr	r3, [pc, #156]	; (8001978 <MX_GPIO_Init+0xd4>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a26      	ldr	r2, [pc, #152]	; (8001978 <MX_GPIO_Init+0xd4>)
 80018e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b24      	ldr	r3, [pc, #144]	; (8001978 <MX_GPIO_Init+0xd4>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	4b20      	ldr	r3, [pc, #128]	; (8001978 <MX_GPIO_Init+0xd4>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	4a1f      	ldr	r2, [pc, #124]	; (8001978 <MX_GPIO_Init+0xd4>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	6313      	str	r3, [r2, #48]	; 0x30
 8001902:	4b1d      	ldr	r3, [pc, #116]	; (8001978 <MX_GPIO_Init+0xd4>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	60bb      	str	r3, [r7, #8]
 800190c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	607b      	str	r3, [r7, #4]
 8001912:	4b19      	ldr	r3, [pc, #100]	; (8001978 <MX_GPIO_Init+0xd4>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	4a18      	ldr	r2, [pc, #96]	; (8001978 <MX_GPIO_Init+0xd4>)
 8001918:	f043 0302 	orr.w	r3, r3, #2
 800191c:	6313      	str	r3, [r2, #48]	; 0x30
 800191e:	4b16      	ldr	r3, [pc, #88]	; (8001978 <MX_GPIO_Init+0xd4>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	607b      	str	r3, [r7, #4]
 8001928:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|RESET_VL53_Pin, GPIO_PIN_RESET);
 800192a:	2200      	movs	r2, #0
 800192c:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001930:	4812      	ldr	r0, [pc, #72]	; (800197c <MX_GPIO_Init+0xd8>)
 8001932:	f007 f9eb 	bl	8008d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001936:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800193a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800193c:	2300      	movs	r3, #0
 800193e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	4619      	mov	r1, r3
 800194a:	480d      	ldr	r0, [pc, #52]	; (8001980 <MX_GPIO_Init+0xdc>)
 800194c:	f007 f85a 	bl	8008a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 RESET_VL53_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|RESET_VL53_Pin;
 8001950:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001956:	2301      	movs	r3, #1
 8001958:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195e:	2300      	movs	r3, #0
 8001960:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001962:	f107 0314 	add.w	r3, r7, #20
 8001966:	4619      	mov	r1, r3
 8001968:	4804      	ldr	r0, [pc, #16]	; (800197c <MX_GPIO_Init+0xd8>)
 800196a:	f007 f84b 	bl	8008a04 <HAL_GPIO_Init>

}
 800196e:	bf00      	nop
 8001970:	3728      	adds	r7, #40	; 0x28
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40023800 	.word	0x40023800
 800197c:	40020000 	.word	0x40020000
 8001980:	40020800 	.word	0x40020800

08001984 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  if (htim == &htim2 )
  {
    //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
     // Recevoir_tension_SHUNT(&hadc1,&huart2);
  }
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
    // Conversion Complete & DMA Transfer Complete As Well
    // So The AD_RES Is Now Updated & Let's Move IT To The PWM CCR1
    // Update The PWM Duty Cycle With Latest ADC Conversion Result
	if(hadc == &hadc1){
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a08      	ldr	r2, [pc, #32]	; (80019c4 <HAL_ADC_ConvCpltCallback+0x2c>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d109      	bne.n	80019bc <HAL_ADC_ConvCpltCallback+0x24>
		get_current(adc_buffer[0]);
 80019a8:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <HAL_ADC_ConvCpltCallback+0x30>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff faf7 	bl	8000fa0 <get_current>
		get_voltage(adc_buffer[1]);
 80019b2:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <HAL_ADC_ConvCpltCallback+0x30>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fb9a 	bl	80010f0 <get_voltage>
	}

}
 80019bc:	bf00      	nop
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000664 	.word	0x20000664
 80019c8:	20000c78 	.word	0x20000c78

080019cc <get_value_from_digits>:


double get_value_from_digits()
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
	int numDigits = Rx_data[1];
 80019d2:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <get_value_from_digits+0x58>)
 80019d4:	785b      	ldrb	r3, [r3, #1]
 80019d6:	607b      	str	r3, [r7, #4]
	// Assuming Rx_data[2], Rx_data[3], Rx_data[4], ..., Rx_data[numDigits + 1] contain the digits
	int receivedValue = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < numDigits; ++i) {
 80019dc:	2300      	movs	r3, #0
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	e00e      	b.n	8001a00 <get_value_from_digits+0x34>
		receivedValue = receivedValue * 10 + Rx_data[2 + i];
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	4613      	mov	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	4619      	mov	r1, r3
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	3302      	adds	r3, #2
 80019f2:	4a0c      	ldr	r2, [pc, #48]	; (8001a24 <get_value_from_digits+0x58>)
 80019f4:	5cd3      	ldrb	r3, [r2, r3]
 80019f6:	440b      	add	r3, r1
 80019f8:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < numDigits; ++i) {
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	3301      	adds	r3, #1
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	68ba      	ldr	r2, [r7, #8]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	dbec      	blt.n	80019e2 <get_value_from_digits+0x16>
	}
	return receivedValue;
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f7fe fd93 	bl	8000534 <__aeabi_i2d>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a16:	eeb0 0a47 	vmov.f32	s0, s14
 8001a1a:	eef0 0a67 	vmov.f32	s1, s15
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000838 	.word	0x20000838

08001a28 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
	if(huart == &huart2){
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a43      	ldr	r2, [pc, #268]	; (8001b40 <HAL_UART_RxCpltCallback+0x118>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d17f      	bne.n	8001b38 <HAL_UART_RxCpltCallback+0x110>
		 // Re-arm the UART receive interrupt for the next data reception
		 HAL_UART_Receive_IT(&huart2, Rx_data, 5);
 8001a38:	2205      	movs	r2, #5
 8001a3a:	4942      	ldr	r1, [pc, #264]	; (8001b44 <HAL_UART_RxCpltCallback+0x11c>)
 8001a3c:	4840      	ldr	r0, [pc, #256]	; (8001b40 <HAL_UART_RxCpltCallback+0x118>)
 8001a3e:	f009 fea2 	bl	800b786 <HAL_UART_Receive_IT>
		 // HAL_UART_Receive_IT(&huart2, Rx_data, 5);
		 // HAL_UART_Transmit(&huart2, Rx_data, strlen(Rx_data), 100);
		 for(int i=0; i<5; i++){ //Passage des valeurs en entier en enlevant l'offset ascii
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	e00d      	b.n	8001a64 <HAL_UART_RxCpltCallback+0x3c>
			 Rx_data[i]-=48;
 8001a48:	4a3e      	ldr	r2, [pc, #248]	; (8001b44 <HAL_UART_RxCpltCallback+0x11c>)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	3b30      	subs	r3, #48	; 0x30
 8001a52:	b2d9      	uxtb	r1, r3
 8001a54:	4a3b      	ldr	r2, [pc, #236]	; (8001b44 <HAL_UART_RxCpltCallback+0x11c>)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	4413      	add	r3, r2
 8001a5a:	460a      	mov	r2, r1
 8001a5c:	701a      	strb	r2, [r3, #0]
		 for(int i=0; i<5; i++){ //Passage des valeurs en entier en enlevant l'offset ascii
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	3301      	adds	r3, #1
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	ddee      	ble.n	8001a48 <HAL_UART_RxCpltCallback+0x20>
		 }
		 if(Rx_data[0]==0x1){ //Recevoir Kp sur 4 chiffres entiers ( jusqu'à 9999 )
 8001a6a:	4b36      	ldr	r3, [pc, #216]	; (8001b44 <HAL_UART_RxCpltCallback+0x11c>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d109      	bne.n	8001a86 <HAL_UART_RxCpltCallback+0x5e>
			 Kp= get_value_from_digits();
 8001a72:	f7ff ffab 	bl	80019cc <get_value_from_digits>
 8001a76:	eeb0 7a40 	vmov.f32	s14, s0
 8001a7a:	eef0 7a60 	vmov.f32	s15, s1
 8001a7e:	4b32      	ldr	r3, [pc, #200]	; (8001b48 <HAL_UART_RxCpltCallback+0x120>)
 8001a80:	ed83 7b00 	vstr	d7, [r3]
 8001a84:	e058      	b.n	8001b38 <HAL_UART_RxCpltCallback+0x110>
		 } else if(Rx_data[0]==0x2){ //Recevoir Ki sur 4 chiffres entiers ( jusqu'à 9999 )
 8001a86:	4b2f      	ldr	r3, [pc, #188]	; (8001b44 <HAL_UART_RxCpltCallback+0x11c>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d109      	bne.n	8001aa2 <HAL_UART_RxCpltCallback+0x7a>
			 Ki=get_value_from_digits();
 8001a8e:	f7ff ff9d 	bl	80019cc <get_value_from_digits>
 8001a92:	eeb0 7a40 	vmov.f32	s14, s0
 8001a96:	eef0 7a60 	vmov.f32	s15, s1
 8001a9a:	4b2c      	ldr	r3, [pc, #176]	; (8001b4c <HAL_UART_RxCpltCallback+0x124>)
 8001a9c:	ed83 7b00 	vstr	d7, [r3]
 8001aa0:	e04a      	b.n	8001b38 <HAL_UART_RxCpltCallback+0x110>
		 } else if(Rx_data[0]==0x3){ //Recevoir Kd sur 4 chiffres entiers ( jusqu'à 9999 )
 8001aa2:	4b28      	ldr	r3, [pc, #160]	; (8001b44 <HAL_UART_RxCpltCallback+0x11c>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b03      	cmp	r3, #3
 8001aa8:	d109      	bne.n	8001abe <HAL_UART_RxCpltCallback+0x96>
			 Kd=get_value_from_digits();
 8001aaa:	f7ff ff8f 	bl	80019cc <get_value_from_digits>
 8001aae:	eeb0 7a40 	vmov.f32	s14, s0
 8001ab2:	eef0 7a60 	vmov.f32	s15, s1
 8001ab6:	4b26      	ldr	r3, [pc, #152]	; (8001b50 <HAL_UART_RxCpltCallback+0x128>)
 8001ab8:	ed83 7b00 	vstr	d7, [r3]
 8001abc:	e03c      	b.n	8001b38 <HAL_UART_RxCpltCallback+0x110>
		 } else if(Rx_data[0]==0x4){ //Recevoir distance sur 3 chiffres entiers ( jusqu'à 999 mm mais bloqué par IHM à 200 mm)
 8001abe:	4b21      	ldr	r3, [pc, #132]	; (8001b44 <HAL_UART_RxCpltCallback+0x11c>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	d109      	bne.n	8001ada <HAL_UART_RxCpltCallback+0xb2>
			 Consigne=get_value_from_digits();
 8001ac6:	f7ff ff81 	bl	80019cc <get_value_from_digits>
 8001aca:	eeb0 7a40 	vmov.f32	s14, s0
 8001ace:	eef0 7a60 	vmov.f32	s15, s1
 8001ad2:	4b20      	ldr	r3, [pc, #128]	; (8001b54 <HAL_UART_RxCpltCallback+0x12c>)
 8001ad4:	ed83 7b00 	vstr	d7, [r3]
 8001ad8:	e02e      	b.n	8001b38 <HAL_UART_RxCpltCallback+0x110>
		 } else if (Rx_data[0]==0x5){
 8001ada:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <HAL_UART_RxCpltCallback+0x11c>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b05      	cmp	r3, #5
 8001ae0:	d104      	bne.n	8001aec <HAL_UART_RxCpltCallback+0xc4>
			 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	481c      	ldr	r0, [pc, #112]	; (8001b58 <HAL_UART_RxCpltCallback+0x130>)
 8001ae6:	f008 fe01 	bl	800a6ec <HAL_TIM_PWM_Start>
 8001aea:	e025      	b.n	8001b38 <HAL_UART_RxCpltCallback+0x110>
		 } else if (Rx_data[0]==0x6){
 8001aec:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <HAL_UART_RxCpltCallback+0x11c>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b06      	cmp	r3, #6
 8001af2:	d104      	bne.n	8001afe <HAL_UART_RxCpltCallback+0xd6>
			 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001af4:	2100      	movs	r1, #0
 8001af6:	4818      	ldr	r0, [pc, #96]	; (8001b58 <HAL_UART_RxCpltCallback+0x130>)
 8001af8:	f008 fea8 	bl	800a84c <HAL_TIM_PWM_Stop>
 8001afc:	e01c      	b.n	8001b38 <HAL_UART_RxCpltCallback+0x110>
		 } else if(Rx_data[0]==0x7){ //afficher la tension
 8001afe:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <HAL_UART_RxCpltCallback+0x11c>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b07      	cmp	r3, #7
 8001b04:	d104      	bne.n	8001b10 <HAL_UART_RxCpltCallback+0xe8>
//			 HAL_TIM_Base_Start_IT(&htim2);
			 Recevoir_tension_SHUNT(&hadc1,&huart2);
 8001b06:	490e      	ldr	r1, [pc, #56]	; (8001b40 <HAL_UART_RxCpltCallback+0x118>)
 8001b08:	4814      	ldr	r0, [pc, #80]	; (8001b5c <HAL_UART_RxCpltCallback+0x134>)
 8001b0a:	f7ff fa95 	bl	8001038 <Recevoir_tension_SHUNT>
 8001b0e:	e013      	b.n	8001b38 <HAL_UART_RxCpltCallback+0x110>
		 } else if(Rx_data[0]==0x8){ //Ne plus afficher la tension
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <HAL_UART_RxCpltCallback+0x11c>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b08      	cmp	r3, #8
 8001b16:	d00f      	beq.n	8001b38 <HAL_UART_RxCpltCallback+0x110>
//			 HAL_TIM_Base_Stop_IT(&htim2);
//			 HAL_TIM_Base_Stop(&htim2);
//			 HAL_TIM_Base_Stop_DMA(&htim2);
		 }else if(Rx_data[0]==0x9){ // Show corrction values or not
 8001b18:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <HAL_UART_RxCpltCallback+0x11c>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b09      	cmp	r3, #9
 8001b1e:	d10a      	bne.n	8001b36 <HAL_UART_RxCpltCallback+0x10e>
			 apply_correction = ! apply_correction;
 8001b20:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <HAL_UART_RxCpltCallback+0x138>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	bf0c      	ite	eq
 8001b28:	2301      	moveq	r3, #1
 8001b2a:	2300      	movne	r3, #0
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	461a      	mov	r2, r3
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <HAL_UART_RxCpltCallback+0x138>)
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	e000      	b.n	8001b38 <HAL_UART_RxCpltCallback+0x110>
		 }else{
			 return;
 8001b36:	bf00      	nop
		 }

	}

}
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	200007f0 	.word	0x200007f0
 8001b44:	20000838 	.word	0x20000838
 8001b48:	20000008 	.word	0x20000008
 8001b4c:	20000010 	.word	0x20000010
 8001b50:	20000018 	.word	0x20000018
 8001b54:	20000000 	.word	0x20000000
 8001b58:	20000760 	.word	0x20000760
 8001b5c:	20000664 	.word	0x20000664
 8001b60:	20000c88 	.word	0x20000c88

08001b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b68:	b672      	cpsid	i
}
 8001b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <Error_Handler+0x8>
	...

08001b70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	607b      	str	r3, [r7, #4]
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <HAL_MspInit+0x4c>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7e:	4a0f      	ldr	r2, [pc, #60]	; (8001bbc <HAL_MspInit+0x4c>)
 8001b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b84:	6453      	str	r3, [r2, #68]	; 0x44
 8001b86:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <HAL_MspInit+0x4c>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	603b      	str	r3, [r7, #0]
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <HAL_MspInit+0x4c>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	4a08      	ldr	r2, [pc, #32]	; (8001bbc <HAL_MspInit+0x4c>)
 8001b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_MspInit+0x4c>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001baa:	603b      	str	r3, [r7, #0]
 8001bac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001bae:	2007      	movs	r0, #7
 8001bb0:	f006 fb6a 	bl	8008288 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb4:	bf00      	nop
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40023800 	.word	0x40023800

08001bc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	; 0x28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a33      	ldr	r2, [pc, #204]	; (8001cac <HAL_ADC_MspInit+0xec>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d15f      	bne.n	8001ca2 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	613b      	str	r3, [r7, #16]
 8001be6:	4b32      	ldr	r3, [pc, #200]	; (8001cb0 <HAL_ADC_MspInit+0xf0>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	4a31      	ldr	r2, [pc, #196]	; (8001cb0 <HAL_ADC_MspInit+0xf0>)
 8001bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf2:	4b2f      	ldr	r3, [pc, #188]	; (8001cb0 <HAL_ADC_MspInit+0xf0>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	4b2b      	ldr	r3, [pc, #172]	; (8001cb0 <HAL_ADC_MspInit+0xf0>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a2a      	ldr	r2, [pc, #168]	; (8001cb0 <HAL_ADC_MspInit+0xf0>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b28      	ldr	r3, [pc, #160]	; (8001cb0 <HAL_ADC_MspInit+0xf0>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c26:	f107 0314 	add.w	r3, r7, #20
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4821      	ldr	r0, [pc, #132]	; (8001cb4 <HAL_ADC_MspInit+0xf4>)
 8001c2e:	f006 fee9 	bl	8008a04 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001c32:	4b21      	ldr	r3, [pc, #132]	; (8001cb8 <HAL_ADC_MspInit+0xf8>)
 8001c34:	4a21      	ldr	r2, [pc, #132]	; (8001cbc <HAL_ADC_MspInit+0xfc>)
 8001c36:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001c38:	4b1f      	ldr	r3, [pc, #124]	; (8001cb8 <HAL_ADC_MspInit+0xf8>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c3e:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <HAL_ADC_MspInit+0xf8>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c44:	4b1c      	ldr	r3, [pc, #112]	; (8001cb8 <HAL_ADC_MspInit+0xf8>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c4a:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <HAL_ADC_MspInit+0xf8>)
 8001c4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c50:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c52:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <HAL_ADC_MspInit+0xf8>)
 8001c54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c58:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c5a:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <HAL_ADC_MspInit+0xf8>)
 8001c5c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c60:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c62:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <HAL_ADC_MspInit+0xf8>)
 8001c64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c68:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c6a:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <HAL_ADC_MspInit+0xf8>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c70:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <HAL_ADC_MspInit+0xf8>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c76:	4810      	ldr	r0, [pc, #64]	; (8001cb8 <HAL_ADC_MspInit+0xf8>)
 8001c78:	f006 fb48 	bl	800830c <HAL_DMA_Init>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001c82:	f7ff ff6f 	bl	8001b64 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a0b      	ldr	r2, [pc, #44]	; (8001cb8 <HAL_ADC_MspInit+0xf8>)
 8001c8a:	639a      	str	r2, [r3, #56]	; 0x38
 8001c8c:	4a0a      	ldr	r2, [pc, #40]	; (8001cb8 <HAL_ADC_MspInit+0xf8>)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001c92:	2200      	movs	r2, #0
 8001c94:	2100      	movs	r1, #0
 8001c96:	2012      	movs	r0, #18
 8001c98:	f006 fb01 	bl	800829e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001c9c:	2012      	movs	r0, #18
 8001c9e:	f006 fb1a 	bl	80082d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ca2:	bf00      	nop
 8001ca4:	3728      	adds	r7, #40	; 0x28
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40012000 	.word	0x40012000
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40020000 	.word	0x40020000
 8001cb8:	200006ac 	.word	0x200006ac
 8001cbc:	40026410 	.word	0x40026410

08001cc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08a      	sub	sp, #40	; 0x28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 0314 	add.w	r3, r7, #20
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a19      	ldr	r2, [pc, #100]	; (8001d44 <HAL_I2C_MspInit+0x84>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d12c      	bne.n	8001d3c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <HAL_I2C_MspInit+0x88>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4a17      	ldr	r2, [pc, #92]	; (8001d48 <HAL_I2C_MspInit+0x88>)
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <HAL_I2C_MspInit+0x88>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cfe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d04:	2312      	movs	r3, #18
 8001d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d10:	2304      	movs	r3, #4
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	4619      	mov	r1, r3
 8001d1a:	480c      	ldr	r0, [pc, #48]	; (8001d4c <HAL_I2C_MspInit+0x8c>)
 8001d1c:	f006 fe72 	bl	8008a04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d20:	2300      	movs	r3, #0
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <HAL_I2C_MspInit+0x88>)
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	4a07      	ldr	r2, [pc, #28]	; (8001d48 <HAL_I2C_MspInit+0x88>)
 8001d2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d30:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <HAL_I2C_MspInit+0x88>)
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d3c:	bf00      	nop
 8001d3e:	3728      	adds	r7, #40	; 0x28
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40005400 	.word	0x40005400
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40020400 	.word	0x40020400

08001d50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a18      	ldr	r2, [pc, #96]	; (8001dc0 <HAL_TIM_Base_MspInit+0x70>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d10e      	bne.n	8001d80 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	4b17      	ldr	r3, [pc, #92]	; (8001dc4 <HAL_TIM_Base_MspInit+0x74>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6a:	4a16      	ldr	r2, [pc, #88]	; (8001dc4 <HAL_TIM_Base_MspInit+0x74>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	6453      	str	r3, [r2, #68]	; 0x44
 8001d72:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <HAL_TIM_Base_MspInit+0x74>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d7e:	e01a      	b.n	8001db6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d88:	d115      	bne.n	8001db6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	4b0d      	ldr	r3, [pc, #52]	; (8001dc4 <HAL_TIM_Base_MspInit+0x74>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	4a0c      	ldr	r2, [pc, #48]	; (8001dc4 <HAL_TIM_Base_MspInit+0x74>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <HAL_TIM_Base_MspInit+0x74>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001da6:	2200      	movs	r2, #0
 8001da8:	2100      	movs	r1, #0
 8001daa:	201c      	movs	r0, #28
 8001dac:	f006 fa77 	bl	800829e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001db0:	201c      	movs	r0, #28
 8001db2:	f006 fa90 	bl	80082d6 <HAL_NVIC_EnableIRQ>
}
 8001db6:	bf00      	nop
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40010000 	.word	0x40010000
 8001dc4:	40023800 	.word	0x40023800

08001dc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b088      	sub	sp, #32
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 030c 	add.w	r3, r7, #12
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a12      	ldr	r2, [pc, #72]	; (8001e30 <HAL_TIM_MspPostInit+0x68>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d11e      	bne.n	8001e28 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <HAL_TIM_MspPostInit+0x6c>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	4a10      	ldr	r2, [pc, #64]	; (8001e34 <HAL_TIM_MspPostInit+0x6c>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <HAL_TIM_MspPostInit+0x6c>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	60bb      	str	r3, [r7, #8]
 8001e04:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1c:	f107 030c 	add.w	r3, r7, #12
 8001e20:	4619      	mov	r1, r3
 8001e22:	4805      	ldr	r0, [pc, #20]	; (8001e38 <HAL_TIM_MspPostInit+0x70>)
 8001e24:	f006 fdee 	bl	8008a04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e28:	bf00      	nop
 8001e2a:	3720      	adds	r7, #32
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40010000 	.word	0x40010000
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40020000 	.word	0x40020000

08001e3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08a      	sub	sp, #40	; 0x28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e44:	f107 0314 	add.w	r3, r7, #20
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1d      	ldr	r2, [pc, #116]	; (8001ed0 <HAL_UART_MspInit+0x94>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d133      	bne.n	8001ec6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	613b      	str	r3, [r7, #16]
 8001e62:	4b1c      	ldr	r3, [pc, #112]	; (8001ed4 <HAL_UART_MspInit+0x98>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	4a1b      	ldr	r2, [pc, #108]	; (8001ed4 <HAL_UART_MspInit+0x98>)
 8001e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6e:	4b19      	ldr	r3, [pc, #100]	; (8001ed4 <HAL_UART_MspInit+0x98>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <HAL_UART_MspInit+0x98>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	4a14      	ldr	r2, [pc, #80]	; (8001ed4 <HAL_UART_MspInit+0x98>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8a:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <HAL_UART_MspInit+0x98>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e96:	230c      	movs	r3, #12
 8001e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ea6:	2307      	movs	r3, #7
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eaa:	f107 0314 	add.w	r3, r7, #20
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4809      	ldr	r0, [pc, #36]	; (8001ed8 <HAL_UART_MspInit+0x9c>)
 8001eb2:	f006 fda7 	bl	8008a04 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2100      	movs	r1, #0
 8001eba:	2026      	movs	r0, #38	; 0x26
 8001ebc:	f006 f9ef 	bl	800829e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ec0:	2026      	movs	r0, #38	; 0x26
 8001ec2:	f006 fa08 	bl	80082d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ec6:	bf00      	nop
 8001ec8:	3728      	adds	r7, #40	; 0x28
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40004400 	.word	0x40004400
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40020000 	.word	0x40020000

08001edc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ee0:	e7fe      	b.n	8001ee0 <NMI_Handler+0x4>

08001ee2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ee6:	e7fe      	b.n	8001ee6 <HardFault_Handler+0x4>

08001ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eec:	e7fe      	b.n	8001eec <MemManage_Handler+0x4>

08001eee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ef2:	e7fe      	b.n	8001ef2 <BusFault_Handler+0x4>

08001ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef8:	e7fe      	b.n	8001ef8 <UsageFault_Handler+0x4>

08001efa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001efe:	bf00      	nop
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f28:	f005 fbae 	bl	8007688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f2c:	bf00      	nop
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001f34:	4802      	ldr	r0, [pc, #8]	; (8001f40 <ADC_IRQHandler+0x10>)
 8001f36:	f005 fd6e 	bl	8007a16 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000664 	.word	0x20000664

08001f44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f48:	4802      	ldr	r0, [pc, #8]	; (8001f54 <TIM2_IRQHandler+0x10>)
 8001f4a:	f008 fce3 	bl	800a914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	200007a8 	.word	0x200007a8

08001f58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f5c:	4802      	ldr	r0, [pc, #8]	; (8001f68 <USART2_IRQHandler+0x10>)
 8001f5e:	f009 fc43 	bl	800b7e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	200007f0 	.word	0x200007f0

08001f6c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f70:	4802      	ldr	r0, [pc, #8]	; (8001f7c <DMA2_Stream0_IRQHandler+0x10>)
 8001f72:	f006 fb0b 	bl	800858c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	200006ac 	.word	0x200006ac

08001f80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
	return 1;
 8001f84:	2301      	movs	r3, #1
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <_kill>:

int _kill(int pid, int sig)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f9a:	f00a fb8d 	bl	800c6b8 <__errno>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2216      	movs	r2, #22
 8001fa2:	601a      	str	r2, [r3, #0]
	return -1;
 8001fa4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <_exit>:

void _exit (int status)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff ffe7 	bl	8001f90 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001fc2:	e7fe      	b.n	8001fc2 <_exit+0x12>

08001fc4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	e00a      	b.n	8001fec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fd6:	f3af 8000 	nop.w
 8001fda:	4601      	mov	r1, r0
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	1c5a      	adds	r2, r3, #1
 8001fe0:	60ba      	str	r2, [r7, #8]
 8001fe2:	b2ca      	uxtb	r2, r1
 8001fe4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	dbf0      	blt.n	8001fd6 <_read+0x12>
	}

return len;
 8001ff4:	687b      	ldr	r3, [r7, #4]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b086      	sub	sp, #24
 8002002:	af00      	add	r7, sp, #0
 8002004:	60f8      	str	r0, [r7, #12]
 8002006:	60b9      	str	r1, [r7, #8]
 8002008:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
 800200e:	e009      	b.n	8002024 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	1c5a      	adds	r2, r3, #1
 8002014:	60ba      	str	r2, [r7, #8]
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	3301      	adds	r3, #1
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	429a      	cmp	r2, r3
 800202a:	dbf1      	blt.n	8002010 <_write+0x12>
	}
	return len;
 800202c:	687b      	ldr	r3, [r7, #4]
}
 800202e:	4618      	mov	r0, r3
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <_close>:

int _close(int file)
{
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
	return -1;
 800203e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002042:	4618      	mov	r0, r3
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800205e:	605a      	str	r2, [r3, #4]
	return 0;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <_isatty>:

int _isatty(int file)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
	return 1;
 8002076:	2301      	movs	r3, #1
}
 8002078:	4618      	mov	r0, r3
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
	return 0;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
	...

080020a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020a8:	4a14      	ldr	r2, [pc, #80]	; (80020fc <_sbrk+0x5c>)
 80020aa:	4b15      	ldr	r3, [pc, #84]	; (8002100 <_sbrk+0x60>)
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020b4:	4b13      	ldr	r3, [pc, #76]	; (8002104 <_sbrk+0x64>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d102      	bne.n	80020c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020bc:	4b11      	ldr	r3, [pc, #68]	; (8002104 <_sbrk+0x64>)
 80020be:	4a12      	ldr	r2, [pc, #72]	; (8002108 <_sbrk+0x68>)
 80020c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020c2:	4b10      	ldr	r3, [pc, #64]	; (8002104 <_sbrk+0x64>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4413      	add	r3, r2
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d207      	bcs.n	80020e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020d0:	f00a faf2 	bl	800c6b8 <__errno>
 80020d4:	4603      	mov	r3, r0
 80020d6:	220c      	movs	r2, #12
 80020d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020da:	f04f 33ff 	mov.w	r3, #4294967295
 80020de:	e009      	b.n	80020f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020e0:	4b08      	ldr	r3, [pc, #32]	; (8002104 <_sbrk+0x64>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020e6:	4b07      	ldr	r3, [pc, #28]	; (8002104 <_sbrk+0x64>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4413      	add	r3, r2
 80020ee:	4a05      	ldr	r2, [pc, #20]	; (8002104 <_sbrk+0x64>)
 80020f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020f2:	68fb      	ldr	r3, [r7, #12]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20020000 	.word	0x20020000
 8002100:	00000400 	.word	0x00000400
 8002104:	20000c8c 	.word	0x20000c8c
 8002108:	20000d60 	.word	0x20000d60

0800210c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002110:	4b06      	ldr	r3, [pc, #24]	; (800212c <SystemInit+0x20>)
 8002112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002116:	4a05      	ldr	r2, [pc, #20]	; (800212c <SystemInit+0x20>)
 8002118:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800211c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002130:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002168 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002134:	480d      	ldr	r0, [pc, #52]	; (800216c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002136:	490e      	ldr	r1, [pc, #56]	; (8002170 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002138:	4a0e      	ldr	r2, [pc, #56]	; (8002174 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800213a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800213c:	e002      	b.n	8002144 <LoopCopyDataInit>

0800213e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800213e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002142:	3304      	adds	r3, #4

08002144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002148:	d3f9      	bcc.n	800213e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800214a:	4a0b      	ldr	r2, [pc, #44]	; (8002178 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800214c:	4c0b      	ldr	r4, [pc, #44]	; (800217c <LoopFillZerobss+0x26>)
  movs r3, #0
 800214e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002150:	e001      	b.n	8002156 <LoopFillZerobss>

08002152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002154:	3204      	adds	r2, #4

08002156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002158:	d3fb      	bcc.n	8002152 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800215a:	f7ff ffd7 	bl	800210c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800215e:	f00a fab1 	bl	800c6c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002162:	f7ff f91b 	bl	800139c <main>
  bx  lr    
 8002166:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002168:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800216c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002170:	20000648 	.word	0x20000648
  ldr r2, =_sidata
 8002174:	0800fa14 	.word	0x0800fa14
  ldr r2, =_sbss
 8002178:	20000648 	.word	0x20000648
  ldr r4, =_ebss
 800217c:	20000d5c 	.word	0x20000d5c

08002180 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002180:	e7fe      	b.n	8002180 <DMA1_Stream0_IRQHandler>

08002182 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b084      	sub	sp, #16
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
 800218a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800218c:	2300      	movs	r3, #0
 800218e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8002190:	6839      	ldr	r1, [r7, #0]
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f001 fcbb 	bl	8003b0e <VL53L0X_get_offset_calibration_data_micro_meter>
 8002198:	4603      	mov	r3, r0
 800219a:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 800219c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80021b4:	2300      	movs	r3, #0
 80021b6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 80021b8:	78fb      	ldrb	r3, [r7, #3]
 80021ba:	085b      	lsrs	r3, r3, #1
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	461a      	mov	r2, r3
 80021c0:	218a      	movs	r1, #138	; 0x8a
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f004 feb4 	bl	8006f30 <VL53L0X_WrByte>
 80021c8:	4603      	mov	r3, r0
 80021ca:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 80021cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 80021d8:	b5b0      	push	{r4, r5, r7, lr}
 80021da:	b096      	sub	sp, #88	; 0x58
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80021e0:	2300      	movs	r3, #0
 80021e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 80021e6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d107      	bne.n	80021fe <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 80021ee:	2200      	movs	r2, #0
 80021f0:	2188      	movs	r1, #136	; 0x88
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f004 fe9c 	bl	8006f30 <VL53L0X_WrByte>
 80021f8:	4603      	mov	r3, r0
 80021fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800220c:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002216:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a9e      	ldr	r2, [pc, #632]	; (8002498 <VL53L0X_DataInit+0x2c0>)
 800221e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a9d      	ldr	r2, [pc, #628]	; (800249c <VL53L0X_DataInit+0x2c4>)
 8002226:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8002230:	f107 0310 	add.w	r3, r7, #16
 8002234:	4619      	mov	r1, r3
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 fab4 	bl	80027a4 <VL53L0X_GetDeviceParameters>
 800223c:	4603      	mov	r3, r0
 800223e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8002242:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002246:	2b00      	cmp	r3, #0
 8002248:	d112      	bne.n	8002270 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800224a:	2300      	movs	r3, #0
 800224c:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 800224e:	2300      	movs	r3, #0
 8002250:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f103 0410 	add.w	r4, r3, #16
 8002258:	f107 0510 	add.w	r5, r7, #16
 800225c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800225e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002264:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002268:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800226c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2264      	movs	r2, #100	; 0x64
 8002274:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f44f 7261 	mov.w	r2, #900	; 0x384
 800227e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002288:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8002292:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800229e:	2201      	movs	r2, #1
 80022a0:	2180      	movs	r1, #128	; 0x80
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f004 fe44 	bl	8006f30 <VL53L0X_WrByte>
 80022a8:	4603      	mov	r3, r0
 80022aa:	461a      	mov	r2, r3
 80022ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80022b0:	4313      	orrs	r3, r2
 80022b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80022b6:	2201      	movs	r2, #1
 80022b8:	21ff      	movs	r1, #255	; 0xff
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f004 fe38 	bl	8006f30 <VL53L0X_WrByte>
 80022c0:	4603      	mov	r3, r0
 80022c2:	461a      	mov	r2, r3
 80022c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80022ce:	2200      	movs	r2, #0
 80022d0:	2100      	movs	r1, #0
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f004 fe2c 	bl	8006f30 <VL53L0X_WrByte>
 80022d8:	4603      	mov	r3, r0
 80022da:	461a      	mov	r2, r3
 80022dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80022e0:	4313      	orrs	r3, r2
 80022e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 80022e6:	f107 030f 	add.w	r3, r7, #15
 80022ea:	461a      	mov	r2, r3
 80022ec:	2191      	movs	r1, #145	; 0x91
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f004 fea0 	bl	8007034 <VL53L0X_RdByte>
 80022f4:	4603      	mov	r3, r0
 80022f6:	461a      	mov	r2, r3
 80022f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80022fc:	4313      	orrs	r3, r2
 80022fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8002302:	7bfa      	ldrb	r2, [r7, #15]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800230a:	2201      	movs	r2, #1
 800230c:	2100      	movs	r1, #0
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f004 fe0e 	bl	8006f30 <VL53L0X_WrByte>
 8002314:	4603      	mov	r3, r0
 8002316:	461a      	mov	r2, r3
 8002318:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800231c:	4313      	orrs	r3, r2
 800231e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002322:	2200      	movs	r2, #0
 8002324:	21ff      	movs	r1, #255	; 0xff
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f004 fe02 	bl	8006f30 <VL53L0X_WrByte>
 800232c:	4603      	mov	r3, r0
 800232e:	461a      	mov	r2, r3
 8002330:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002334:	4313      	orrs	r3, r2
 8002336:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800233a:	2200      	movs	r2, #0
 800233c:	2180      	movs	r1, #128	; 0x80
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f004 fdf6 	bl	8006f30 <VL53L0X_WrByte>
 8002344:	4603      	mov	r3, r0
 8002346:	461a      	mov	r2, r3
 8002348:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800234c:	4313      	orrs	r3, r2
 800234e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002352:	2300      	movs	r3, #0
 8002354:	653b      	str	r3, [r7, #80]	; 0x50
 8002356:	e014      	b.n	8002382 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8002358:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800235c:	2b00      	cmp	r3, #0
 800235e:	d114      	bne.n	800238a <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8002360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002362:	b29b      	uxth	r3, r3
 8002364:	2201      	movs	r2, #1
 8002366:	4619      	mov	r1, r3
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 fd27 	bl	8002dbc <VL53L0X_SetLimitCheckEnable>
 800236e:	4603      	mov	r3, r0
 8002370:	461a      	mov	r2, r3
 8002372:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002376:	4313      	orrs	r3, r2
 8002378:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800237c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800237e:	3301      	adds	r3, #1
 8002380:	653b      	str	r3, [r7, #80]	; 0x50
 8002382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002384:	2b05      	cmp	r3, #5
 8002386:	dde7      	ble.n	8002358 <VL53L0X_DataInit+0x180>
 8002388:	e000      	b.n	800238c <VL53L0X_DataInit+0x1b4>
		else
			break;
 800238a:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 800238c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002390:	2b00      	cmp	r3, #0
 8002392:	d107      	bne.n	80023a4 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002394:	2200      	movs	r2, #0
 8002396:	2102      	movs	r1, #2
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 fd0f 	bl	8002dbc <VL53L0X_SetLimitCheckEnable>
 800239e:	4603      	mov	r3, r0
 80023a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80023a4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d107      	bne.n	80023bc <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80023ac:	2200      	movs	r2, #0
 80023ae:	2103      	movs	r1, #3
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 fd03 	bl	8002dbc <VL53L0X_SetLimitCheckEnable>
 80023b6:	4603      	mov	r3, r0
 80023b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80023bc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d107      	bne.n	80023d4 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80023c4:	2200      	movs	r2, #0
 80023c6:	2104      	movs	r1, #4
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 fcf7 	bl	8002dbc <VL53L0X_SetLimitCheckEnable>
 80023ce:	4603      	mov	r3, r0
 80023d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80023d4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d107      	bne.n	80023ec <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80023dc:	2200      	movs	r2, #0
 80023de:	2105      	movs	r1, #5
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 fceb 	bl	8002dbc <VL53L0X_SetLimitCheckEnable>
 80023e6:	4603      	mov	r3, r0
 80023e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 80023ec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d108      	bne.n	8002406 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80023f4:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 80023f8:	2100      	movs	r1, #0
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 fd8e 	bl	8002f1c <VL53L0X_SetLimitCheckValue>
 8002400:	4603      	mov	r3, r0
 8002402:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002406:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800240a:	2b00      	cmp	r3, #0
 800240c:	d108      	bne.n	8002420 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800240e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002412:	2101      	movs	r1, #1
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 fd81 	bl	8002f1c <VL53L0X_SetLimitCheckValue>
 800241a:	4603      	mov	r3, r0
 800241c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002420:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002424:	2b00      	cmp	r3, #0
 8002426:	d108      	bne.n	800243a <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002428:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 800242c:	2102      	movs	r1, #2
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 fd74 	bl	8002f1c <VL53L0X_SetLimitCheckValue>
 8002434:	4603      	mov	r3, r0
 8002436:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800243a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800243e:	2b00      	cmp	r3, #0
 8002440:	d107      	bne.n	8002452 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002442:	2200      	movs	r2, #0
 8002444:	2103      	movs	r1, #3
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 fd68 	bl	8002f1c <VL53L0X_SetLimitCheckValue>
 800244c:	4603      	mov	r3, r0
 800244e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002452:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10f      	bne.n	800247a <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	22ff      	movs	r2, #255	; 0xff
 800245e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002462:	22ff      	movs	r2, #255	; 0xff
 8002464:	2101      	movs	r1, #1
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f004 fd62 	bl	8006f30 <VL53L0X_WrByte>
 800246c:	4603      	mov	r3, r0
 800246e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800247a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800247e:	2b00      	cmp	r3, #0
 8002480:	d103      	bne.n	800248a <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800248a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800248e:	4618      	mov	r0, r3
 8002490:	3758      	adds	r7, #88	; 0x58
 8002492:	46bd      	mov	sp, r7
 8002494:	bdb0      	pop	{r4, r5, r7, pc}
 8002496:	bf00      	nop
 8002498:	00016b85 	.word	0x00016b85
 800249c:	000970a4 	.word	0x000970a4

080024a0 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 80024a0:	b5b0      	push	{r4, r5, r7, lr}
 80024a2:	b09e      	sub	sp, #120	; 0x78
 80024a4:	af02      	add	r7, sp, #8
 80024a6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80024a8:	2300      	movs	r3, #0
 80024aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80024ae:	f107 031c 	add.w	r3, r7, #28
 80024b2:	2240      	movs	r2, #64	; 0x40
 80024b4:	2100      	movs	r1, #0
 80024b6:	4618      	mov	r0, r3
 80024b8:	f00a f936 	bl	800c728 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 80024dc:	2101      	movs	r1, #1
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f002 fa6b 	bl	80049ba <VL53L0X_get_info_from_device>
 80024e4:	4603      	mov	r3, r0
 80024e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80024f0:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80024f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 80024fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002500:	2b01      	cmp	r3, #1
 8002502:	d80d      	bhi.n	8002520 <VL53L0X_StaticInit+0x80>
 8002504:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002508:	2b01      	cmp	r3, #1
 800250a:	d102      	bne.n	8002512 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 800250c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800250e:	2b20      	cmp	r3, #32
 8002510:	d806      	bhi.n	8002520 <VL53L0X_StaticInit+0x80>
 8002512:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10e      	bne.n	8002538 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800251a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800251c:	2b0c      	cmp	r3, #12
 800251e:	d90b      	bls.n	8002538 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8002520:	f107 0218 	add.w	r2, r7, #24
 8002524:	f107 0314 	add.w	r3, r7, #20
 8002528:	4619      	mov	r1, r3
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f001 fcea 	bl	8003f04 <VL53L0X_perform_ref_spad_management>
 8002530:	4603      	mov	r3, r0
 8002532:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002536:	e009      	b.n	800254c <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8002538:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800253c:	461a      	mov	r2, r3
 800253e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f001 feeb 	bl	800431c <VL53L0X_set_reference_spads>
 8002546:	4603      	mov	r3, r0
 8002548:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 800254c:	4b94      	ldr	r3, [pc, #592]	; (80027a0 <VL53L0X_StaticInit+0x300>)
 800254e:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8002550:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10f      	bne.n	8002578 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800255e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8002562:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002566:	2b00      	cmp	r3, #0
 8002568:	d104      	bne.n	8002574 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8002570:	66bb      	str	r3, [r7, #104]	; 0x68
 8002572:	e001      	b.n	8002578 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8002574:	4b8a      	ldr	r3, [pc, #552]	; (80027a0 <VL53L0X_StaticInit+0x300>)
 8002576:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8002578:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800257c:	2b00      	cmp	r3, #0
 800257e:	d106      	bne.n	800258e <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8002580:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f003 fdbe 	bl	8006104 <VL53L0X_load_tuning_settings>
 8002588:	4603      	mov	r3, r0
 800258a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800258e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10a      	bne.n	80025ac <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8002596:	2300      	movs	r3, #0
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	2304      	movs	r3, #4
 800259c:	2200      	movs	r2, #0
 800259e:	2100      	movs	r1, #0
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f001 f8e3 	bl	800376c <VL53L0X_SetGpioConfig>
 80025a6:	4603      	mov	r3, r0
 80025a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80025ac:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d121      	bne.n	80025f8 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80025b4:	2201      	movs	r2, #1
 80025b6:	21ff      	movs	r1, #255	; 0xff
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f004 fcb9 	bl	8006f30 <VL53L0X_WrByte>
 80025be:	4603      	mov	r3, r0
 80025c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80025c4:	f107 031a 	add.w	r3, r7, #26
 80025c8:	461a      	mov	r2, r3
 80025ca:	2184      	movs	r1, #132	; 0x84
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f004 fd5b 	bl	8007088 <VL53L0X_RdWord>
 80025d2:	4603      	mov	r3, r0
 80025d4:	461a      	mov	r2, r3
 80025d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80025da:	4313      	orrs	r3, r2
 80025dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80025e0:	2200      	movs	r2, #0
 80025e2:	21ff      	movs	r1, #255	; 0xff
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f004 fca3 	bl	8006f30 <VL53L0X_WrByte>
 80025ea:	4603      	mov	r3, r0
 80025ec:	461a      	mov	r2, r3
 80025ee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80025f2:	4313      	orrs	r3, r2
 80025f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80025f8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d105      	bne.n	800260c <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8002600:	8b7b      	ldrh	r3, [r7, #26]
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	461a      	mov	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 800260c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002610:	2b00      	cmp	r3, #0
 8002612:	d108      	bne.n	8002626 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8002614:	f107 031c 	add.w	r3, r7, #28
 8002618:	4619      	mov	r1, r3
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f8c2 	bl	80027a4 <VL53L0X_GetDeviceParameters>
 8002620:	4603      	mov	r3, r0
 8002622:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8002626:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800262a:	2b00      	cmp	r3, #0
 800262c:	d110      	bne.n	8002650 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800262e:	f107 0319 	add.w	r3, r7, #25
 8002632:	4619      	mov	r1, r3
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 f984 	bl	8002942 <VL53L0X_GetFractionEnable>
 800263a:	4603      	mov	r3, r0
 800263c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8002640:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002644:	2b00      	cmp	r3, #0
 8002646:	d103      	bne.n	8002650 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8002648:	7e7a      	ldrb	r2, [r7, #25]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8002650:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10e      	bne.n	8002676 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f103 0410 	add.w	r4, r3, #16
 800265e:	f107 051c 	add.w	r5, r7, #28
 8002662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800266a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800266c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800266e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002672:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8002676:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800267a:	2b00      	cmp	r3, #0
 800267c:	d111      	bne.n	80026a2 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 800267e:	f107 0319 	add.w	r3, r7, #25
 8002682:	461a      	mov	r2, r3
 8002684:	2101      	movs	r1, #1
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f004 fcd4 	bl	8007034 <VL53L0X_RdByte>
 800268c:	4603      	mov	r3, r0
 800268e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8002692:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002696:	2b00      	cmp	r3, #0
 8002698:	d103      	bne.n	80026a2 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800269a:	7e7a      	ldrb	r2, [r7, #25]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 80026a2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d107      	bne.n	80026ba <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80026aa:	2200      	movs	r2, #0
 80026ac:	2100      	movs	r1, #0
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f9bc 	bl	8002a2c <VL53L0X_SetSequenceStepEnable>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80026ba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d107      	bne.n	80026d2 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80026c2:	2200      	movs	r2, #0
 80026c4:	2102      	movs	r1, #2
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f9b0 	bl	8002a2c <VL53L0X_SetSequenceStepEnable>
 80026cc:	4603      	mov	r3, r0
 80026ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 80026d2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d103      	bne.n	80026e2 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2203      	movs	r2, #3
 80026de:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80026e2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d109      	bne.n	80026fe <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 80026ea:	f107 0313 	add.w	r3, r7, #19
 80026ee:	461a      	mov	r2, r3
 80026f0:	2100      	movs	r1, #0
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f982 	bl	80029fc <VL53L0X_GetVcselPulsePeriod>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80026fe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002702:	2b00      	cmp	r3, #0
 8002704:	d103      	bne.n	800270e <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002706:	7cfa      	ldrb	r2, [r7, #19]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800270e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002712:	2b00      	cmp	r3, #0
 8002714:	d109      	bne.n	800272a <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8002716:	f107 0313 	add.w	r3, r7, #19
 800271a:	461a      	mov	r2, r3
 800271c:	2101      	movs	r1, #1
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f96c 	bl	80029fc <VL53L0X_GetVcselPulsePeriod>
 8002724:	4603      	mov	r3, r0
 8002726:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800272a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800272e:	2b00      	cmp	r3, #0
 8002730:	d103      	bne.n	800273a <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002732:	7cfa      	ldrb	r2, [r7, #19]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800273a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800273e:	2b00      	cmp	r3, #0
 8002740:	d109      	bne.n	8002756 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8002742:	f107 030c 	add.w	r3, r7, #12
 8002746:	461a      	mov	r2, r3
 8002748:	2103      	movs	r1, #3
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f002 feb6 	bl	80054bc <get_sequence_step_timeout>
 8002750:	4603      	mov	r3, r0
 8002752:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002756:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800275a:	2b00      	cmp	r3, #0
 800275c:	d103      	bne.n	8002766 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8002766:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800276a:	2b00      	cmp	r3, #0
 800276c:	d109      	bne.n	8002782 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 800276e:	f107 030c 	add.w	r3, r7, #12
 8002772:	461a      	mov	r2, r3
 8002774:	2104      	movs	r1, #4
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f002 fea0 	bl	80054bc <get_sequence_step_timeout>
 800277c:	4603      	mov	r3, r0
 800277e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002782:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002786:	2b00      	cmp	r3, #0
 8002788:	d103      	bne.n	8002792 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002792:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8002796:	4618      	mov	r0, r3
 8002798:	3770      	adds	r7, #112	; 0x70
 800279a:	46bd      	mov	sp, r7
 800279c:	bdb0      	pop	{r4, r5, r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000024 	.word	0x20000024

080027a4 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80027ae:	2300      	movs	r3, #0
 80027b0:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	4619      	mov	r1, r3
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f8b0 	bl	800291c <VL53L0X_GetDeviceMode>
 80027bc:	4603      	mov	r3, r0
 80027be:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80027c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d107      	bne.n	80027d8 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	3308      	adds	r3, #8
 80027cc:	4619      	mov	r1, r3
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 fa78 	bl	8002cc4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80027d4:	4603      	mov	r3, r0
 80027d6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80027d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d102      	bne.n	80027e6 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	2200      	movs	r2, #0
 80027e4:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80027e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d107      	bne.n	80027fe <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	3310      	adds	r3, #16
 80027f2:	4619      	mov	r1, r3
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 faae 	bl	8002d56 <VL53L0X_GetXTalkCompensationRateMegaCps>
 80027fa:	4603      	mov	r3, r0
 80027fc:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 80027fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d107      	bne.n	8002816 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	3314      	adds	r3, #20
 800280a:	4619      	mov	r1, r3
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff fcb8 	bl	8002182 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8002812:	4603      	mov	r3, r0
 8002814:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8002816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d134      	bne.n	8002888 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800281e:	2300      	movs	r3, #0
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	e02a      	b.n	800287a <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8002824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d12a      	bne.n	8002882 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	b299      	uxth	r1, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	3308      	adds	r3, #8
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	4413      	add	r3, r2
 800283a:	3304      	adds	r3, #4
 800283c:	461a      	mov	r2, r3
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 fbce 	bl	8002fe0 <VL53L0X_GetLimitCheckValue>
 8002844:	4603      	mov	r3, r0
 8002846:	461a      	mov	r2, r3
 8002848:	7bfb      	ldrb	r3, [r7, #15]
 800284a:	4313      	orrs	r3, r2
 800284c:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800284e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d117      	bne.n	8002886 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	b299      	uxth	r1, r3
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	3318      	adds	r3, #24
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	4413      	add	r3, r2
 8002862:	461a      	mov	r2, r3
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 fb35 	bl	8002ed4 <VL53L0X_GetLimitCheckEnable>
 800286a:	4603      	mov	r3, r0
 800286c:	461a      	mov	r2, r3
 800286e:	7bfb      	ldrb	r3, [r7, #15]
 8002870:	4313      	orrs	r3, r2
 8002872:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	3301      	adds	r3, #1
 8002878:	60bb      	str	r3, [r7, #8]
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	2b05      	cmp	r3, #5
 800287e:	ddd1      	ble.n	8002824 <VL53L0X_GetDeviceParameters+0x80>
 8002880:	e002      	b.n	8002888 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8002882:	bf00      	nop
 8002884:	e000      	b.n	8002888 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8002886:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002888:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d107      	bne.n	80028a0 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	333c      	adds	r3, #60	; 0x3c
 8002894:	4619      	mov	r1, r3
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 fc30 	bl	80030fc <VL53L0X_GetWrapAroundCheckEnable>
 800289c:	4603      	mov	r3, r0
 800289e:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80028a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d107      	bne.n	80028b8 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	3304      	adds	r3, #4
 80028ac:	4619      	mov	r1, r3
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f879 	bl	80029a6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80028b4:	4603      	mov	r3, r0
 80028b6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80028b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80028d0:	2300      	movs	r3, #0
 80028d2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80028d4:	78fb      	ldrb	r3, [r7, #3]
 80028d6:	2b15      	cmp	r3, #21
 80028d8:	bf8c      	ite	hi
 80028da:	2201      	movhi	r2, #1
 80028dc:	2200      	movls	r2, #0
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	2a00      	cmp	r2, #0
 80028e2:	d10e      	bne.n	8002902 <VL53L0X_SetDeviceMode+0x3e>
 80028e4:	2201      	movs	r2, #1
 80028e6:	409a      	lsls	r2, r3
 80028e8:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <VL53L0X_SetDeviceMode+0x54>)
 80028ea:	4013      	ands	r3, r2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	bf14      	ite	ne
 80028f0:	2301      	movne	r3, #1
 80028f2:	2300      	moveq	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	78fa      	ldrb	r2, [r7, #3]
 80028fe:	741a      	strb	r2, [r3, #16]
		break;
 8002900:	e001      	b.n	8002906 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8002902:	23f8      	movs	r3, #248	; 0xf8
 8002904:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002906:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800290a:	4618      	mov	r0, r3
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	0030000b 	.word	0x0030000b

0800291c <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002926:	2300      	movs	r3, #0
 8002928:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	7c1a      	ldrb	r2, [r3, #16]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8002932:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b084      	sub	sp, #16
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
 800294a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800294c:	2300      	movs	r3, #0
 800294e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	2109      	movs	r1, #9
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f004 fb6d 	bl	8007034 <VL53L0X_RdByte>
 800295a:	4603      	mov	r3, r0
 800295c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800295e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d106      	bne.n	8002974 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	b2da      	uxtb	r2, r3
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8002974:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800298a:	2300      	movs	r3, #0
 800298c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800298e:	6839      	ldr	r1, [r7, #0]
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f003 fa26 	bl	8005de2 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8002996:	4603      	mov	r3, r0
 8002998:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800299a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b084      	sub	sp, #16
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
 80029ae:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80029b0:	2300      	movs	r3, #0
 80029b2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80029b4:	6839      	ldr	r1, [r7, #0]
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f003 faf3 	bl	8005fa2 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80029bc:	4603      	mov	r3, r0
 80029be:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 80029c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	460b      	mov	r3, r1
 80029d6:	70fb      	strb	r3, [r7, #3]
 80029d8:	4613      	mov	r3, r2
 80029da:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80029dc:	2300      	movs	r3, #0
 80029de:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 80029e0:	78ba      	ldrb	r2, [r7, #2]
 80029e2:	78fb      	ldrb	r3, [r7, #3]
 80029e4:	4619      	mov	r1, r3
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f002 ff3b 	bl	8005862 <VL53L0X_set_vcsel_pulse_period>
 80029ec:	4603      	mov	r3, r0
 80029ee:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80029f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	460b      	mov	r3, r1
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8002a0e:	7afb      	ldrb	r3, [r7, #11]
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	4619      	mov	r1, r3
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f003 f9ad 	bl	8005d74 <VL53L0X_get_vcsel_pulse_period>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8002a1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
	...

08002a2c <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	70fb      	strb	r3, [r7, #3]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8002a40:	2300      	movs	r3, #0
 8002a42:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8002a44:	2300      	movs	r3, #0
 8002a46:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002a48:	f107 030f 	add.w	r3, r7, #15
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	2101      	movs	r1, #1
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f004 faef 	bl	8007034 <VL53L0X_RdByte>
 8002a56:	4603      	mov	r3, r0
 8002a58:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8002a5a:	7bfb      	ldrb	r3, [r7, #15]
 8002a5c:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8002a5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d15a      	bne.n	8002b1c <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8002a66:	78bb      	ldrb	r3, [r7, #2]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d12b      	bne.n	8002ac4 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8002a6c:	78fb      	ldrb	r3, [r7, #3]
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d825      	bhi.n	8002abe <VL53L0X_SetSequenceStepEnable+0x92>
 8002a72:	a201      	add	r2, pc, #4	; (adr r2, 8002a78 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8002a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a78:	08002a8d 	.word	0x08002a8d
 8002a7c:	08002a97 	.word	0x08002a97
 8002a80:	08002aa1 	.word	0x08002aa1
 8002a84:	08002aab 	.word	0x08002aab
 8002a88:	08002ab5 	.word	0x08002ab5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8002a8c:	7dbb      	ldrb	r3, [r7, #22]
 8002a8e:	f043 0310 	orr.w	r3, r3, #16
 8002a92:	75bb      	strb	r3, [r7, #22]
				break;
 8002a94:	e043      	b.n	8002b1e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8002a96:	7dbb      	ldrb	r3, [r7, #22]
 8002a98:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8002a9c:	75bb      	strb	r3, [r7, #22]
				break;
 8002a9e:	e03e      	b.n	8002b1e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8002aa0:	7dbb      	ldrb	r3, [r7, #22]
 8002aa2:	f043 0304 	orr.w	r3, r3, #4
 8002aa6:	75bb      	strb	r3, [r7, #22]
				break;
 8002aa8:	e039      	b.n	8002b1e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8002aaa:	7dbb      	ldrb	r3, [r7, #22]
 8002aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ab0:	75bb      	strb	r3, [r7, #22]
				break;
 8002ab2:	e034      	b.n	8002b1e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8002ab4:	7dbb      	ldrb	r3, [r7, #22]
 8002ab6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002aba:	75bb      	strb	r3, [r7, #22]
				break;
 8002abc:	e02f      	b.n	8002b1e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002abe:	23fc      	movs	r3, #252	; 0xfc
 8002ac0:	75fb      	strb	r3, [r7, #23]
 8002ac2:	e02c      	b.n	8002b1e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8002ac4:	78fb      	ldrb	r3, [r7, #3]
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d825      	bhi.n	8002b16 <VL53L0X_SetSequenceStepEnable+0xea>
 8002aca:	a201      	add	r2, pc, #4	; (adr r2, 8002ad0 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8002acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad0:	08002ae5 	.word	0x08002ae5
 8002ad4:	08002aef 	.word	0x08002aef
 8002ad8:	08002af9 	.word	0x08002af9
 8002adc:	08002b03 	.word	0x08002b03
 8002ae0:	08002b0d 	.word	0x08002b0d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8002ae4:	7dbb      	ldrb	r3, [r7, #22]
 8002ae6:	f023 0310 	bic.w	r3, r3, #16
 8002aea:	75bb      	strb	r3, [r7, #22]
				break;
 8002aec:	e017      	b.n	8002b1e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8002aee:	7dbb      	ldrb	r3, [r7, #22]
 8002af0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8002af4:	75bb      	strb	r3, [r7, #22]
				break;
 8002af6:	e012      	b.n	8002b1e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8002af8:	7dbb      	ldrb	r3, [r7, #22]
 8002afa:	f023 0304 	bic.w	r3, r3, #4
 8002afe:	75bb      	strb	r3, [r7, #22]
				break;
 8002b00:	e00d      	b.n	8002b1e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8002b02:	7dbb      	ldrb	r3, [r7, #22]
 8002b04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b08:	75bb      	strb	r3, [r7, #22]
				break;
 8002b0a:	e008      	b.n	8002b1e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8002b0c:	7dbb      	ldrb	r3, [r7, #22]
 8002b0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b12:	75bb      	strb	r3, [r7, #22]
				break;
 8002b14:	e003      	b.n	8002b1e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002b16:	23fc      	movs	r3, #252	; 0xfc
 8002b18:	75fb      	strb	r3, [r7, #23]
 8002b1a:	e000      	b.n	8002b1e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8002b1c:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
 8002b20:	7dba      	ldrb	r2, [r7, #22]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d01e      	beq.n	8002b64 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8002b26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d107      	bne.n	8002b3e <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8002b2e:	7dbb      	ldrb	r3, [r7, #22]
 8002b30:	461a      	mov	r2, r3
 8002b32:	2101      	movs	r1, #1
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f004 f9fb 	bl	8006f30 <VL53L0X_WrByte>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8002b3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d103      	bne.n	8002b4e <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	7dba      	ldrb	r2, [r7, #22]
 8002b4a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8002b4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d106      	bne.n	8002b64 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8002b5c:	6939      	ldr	r1, [r7, #16]
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7ff ff0e 	bl	8002980 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8002b64:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3718      	adds	r7, #24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b087      	sub	sp, #28
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	607b      	str	r3, [r7, #4]
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	72fb      	strb	r3, [r7, #11]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002b82:	2300      	movs	r3, #0
 8002b84:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8002b8c:	7afb      	ldrb	r3, [r7, #11]
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d836      	bhi.n	8002c00 <sequence_step_enabled+0x90>
 8002b92:	a201      	add	r2, pc, #4	; (adr r2, 8002b98 <sequence_step_enabled+0x28>)
 8002b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b98:	08002bad 	.word	0x08002bad
 8002b9c:	08002bbf 	.word	0x08002bbf
 8002ba0:	08002bd1 	.word	0x08002bd1
 8002ba4:	08002be3 	.word	0x08002be3
 8002ba8:	08002bf5 	.word	0x08002bf5
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8002bac:	7abb      	ldrb	r3, [r7, #10]
 8002bae:	111b      	asrs	r3, r3, #4
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	701a      	strb	r2, [r3, #0]
		break;
 8002bbc:	e022      	b.n	8002c04 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8002bbe:	7abb      	ldrb	r3, [r7, #10]
 8002bc0:	10db      	asrs	r3, r3, #3
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	701a      	strb	r2, [r3, #0]
		break;
 8002bce:	e019      	b.n	8002c04 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8002bd0:	7abb      	ldrb	r3, [r7, #10]
 8002bd2:	109b      	asrs	r3, r3, #2
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	701a      	strb	r2, [r3, #0]
		break;
 8002be0:	e010      	b.n	8002c04 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8002be2:	7abb      	ldrb	r3, [r7, #10]
 8002be4:	119b      	asrs	r3, r3, #6
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	701a      	strb	r2, [r3, #0]
		break;
 8002bf2:	e007      	b.n	8002c04 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8002bf4:	7abb      	ldrb	r3, [r7, #10]
 8002bf6:	09db      	lsrs	r3, r3, #7
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	701a      	strb	r2, [r3, #0]
		break;
 8002bfe:	e001      	b.n	8002c04 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002c00:	23fc      	movs	r3, #252	; 0xfc
 8002c02:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002c04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	371c      	adds	r7, #28
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8002c22:	2300      	movs	r3, #0
 8002c24:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002c26:	f107 030e 	add.w	r3, r7, #14
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f004 fa00 	bl	8007034 <VL53L0X_RdByte>
 8002c34:	4603      	mov	r3, r0
 8002c36:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8002c38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d107      	bne.n	8002c50 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8002c40:	7bba      	ldrb	r2, [r7, #14]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	2100      	movs	r1, #0
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7ff ff92 	bl	8002b70 <sequence_step_enabled>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002c50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d108      	bne.n	8002c6a <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8002c58:	7bba      	ldrb	r2, [r7, #14]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	3302      	adds	r3, #2
 8002c5e:	2101      	movs	r1, #1
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f7ff ff85 	bl	8002b70 <sequence_step_enabled>
 8002c66:	4603      	mov	r3, r0
 8002c68:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d108      	bne.n	8002c84 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8002c72:	7bba      	ldrb	r2, [r7, #14]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	3301      	adds	r3, #1
 8002c78:	2102      	movs	r1, #2
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7ff ff78 	bl	8002b70 <sequence_step_enabled>
 8002c80:	4603      	mov	r3, r0
 8002c82:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002c84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d108      	bne.n	8002c9e <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8002c8c:	7bba      	ldrb	r2, [r7, #14]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	3303      	adds	r3, #3
 8002c92:	2103      	movs	r1, #3
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f7ff ff6b 	bl	8002b70 <sequence_step_enabled>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d108      	bne.n	8002cb8 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8002ca6:	7bba      	ldrb	r2, [r7, #14]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	3304      	adds	r3, #4
 8002cac:	2104      	movs	r1, #4
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7ff ff5e 	bl	8002b70 <sequence_step_enabled>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002cb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8002cd2:	f107 030c 	add.w	r3, r7, #12
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	21f8      	movs	r1, #248	; 0xf8
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f004 f9d4 	bl	8007088 <VL53L0X_RdWord>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8002ce4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d108      	bne.n	8002cfe <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8002cec:	f107 0308 	add.w	r3, r7, #8
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	2104      	movs	r1, #4
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f004 f9ff 	bl	80070f8 <VL53L0X_RdDWord>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10c      	bne.n	8002d20 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8002d06:	89bb      	ldrh	r3, [r7, #12]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	89ba      	ldrh	r2, [r7, #12]
 8002d10:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002d20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002d36:	2300      	movs	r3, #0
 8002d38:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	7f1b      	ldrb	r3, [r3, #28]
 8002d3e:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	7bba      	ldrb	r2, [r7, #14]
 8002d44:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8002d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b086      	sub	sp, #24
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
 8002d5e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002d60:	2300      	movs	r3, #0
 8002d62:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8002d64:	f107 030e 	add.w	r3, r7, #14
 8002d68:	461a      	mov	r2, r3
 8002d6a:	2120      	movs	r1, #32
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f004 f98b 	bl	8007088 <VL53L0X_RdWord>
 8002d72:	4603      	mov	r3, r0
 8002d74:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8002d76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d118      	bne.n	8002db0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8002d7e:	89fb      	ldrh	r3, [r7, #14]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d109      	bne.n	8002d98 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	771a      	strb	r2, [r3, #28]
 8002d96:	e00b      	b.n	8002db0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8002d98:	89fb      	ldrh	r3, [r7, #14]
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002db0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3718      	adds	r7, #24
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	807b      	strh	r3, [r7, #2]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8002ddc:	887b      	ldrh	r3, [r7, #2]
 8002dde:	2b05      	cmp	r3, #5
 8002de0:	d902      	bls.n	8002de8 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002de2:	23fc      	movs	r3, #252	; 0xfc
 8002de4:	75fb      	strb	r3, [r7, #23]
 8002de6:	e05b      	b.n	8002ea0 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8002de8:	787b      	ldrb	r3, [r7, #1]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d106      	bne.n	8002dfc <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8002df2:	2300      	movs	r3, #0
 8002df4:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8002df6:	2301      	movs	r3, #1
 8002df8:	73bb      	strb	r3, [r7, #14]
 8002dfa:	e00a      	b.n	8002e12 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002dfc:	887b      	ldrh	r3, [r7, #2]
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	330c      	adds	r3, #12
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8002e12:	887b      	ldrh	r3, [r7, #2]
 8002e14:	2b05      	cmp	r3, #5
 8002e16:	d841      	bhi.n	8002e9c <VL53L0X_SetLimitCheckEnable+0xe0>
 8002e18:	a201      	add	r2, pc, #4	; (adr r2, 8002e20 <VL53L0X_SetLimitCheckEnable+0x64>)
 8002e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1e:	bf00      	nop
 8002e20:	08002e39 	.word	0x08002e39
 8002e24:	08002e43 	.word	0x08002e43
 8002e28:	08002e59 	.word	0x08002e59
 8002e2c:	08002e63 	.word	0x08002e63
 8002e30:	08002e6d 	.word	0x08002e6d
 8002e34:	08002e85 	.word	0x08002e85

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	7bfa      	ldrb	r2, [r7, #15]
 8002e3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8002e40:	e02e      	b.n	8002ea0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	461a      	mov	r2, r3
 8002e4a:	2144      	movs	r1, #68	; 0x44
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f004 f893 	bl	8006f78 <VL53L0X_WrWord>
 8002e52:	4603      	mov	r3, r0
 8002e54:	75fb      	strb	r3, [r7, #23]

			break;
 8002e56:	e023      	b.n	8002ea0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	7bfa      	ldrb	r2, [r7, #15]
 8002e5c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8002e60:	e01e      	b.n	8002ea0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	7bfa      	ldrb	r2, [r7, #15]
 8002e66:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8002e6a:	e019      	b.n	8002ea0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8002e6c:	7bbb      	ldrb	r3, [r7, #14]
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8002e72:	7b7b      	ldrb	r3, [r7, #13]
 8002e74:	22fe      	movs	r2, #254	; 0xfe
 8002e76:	2160      	movs	r1, #96	; 0x60
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f004 f8a7 	bl	8006fcc <VL53L0X_UpdateByte>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8002e82:	e00d      	b.n	8002ea0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8002e84:	7bbb      	ldrb	r3, [r7, #14]
 8002e86:	011b      	lsls	r3, r3, #4
 8002e88:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8002e8a:	7b7b      	ldrb	r3, [r7, #13]
 8002e8c:	22ef      	movs	r2, #239	; 0xef
 8002e8e:	2160      	movs	r1, #96	; 0x60
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f004 f89b 	bl	8006fcc <VL53L0X_UpdateByte>
 8002e96:	4603      	mov	r3, r0
 8002e98:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8002e9a:	e001      	b.n	8002ea0 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002e9c:	23fc      	movs	r3, #252	; 0xfc
 8002e9e:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002ea0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10f      	bne.n	8002ec8 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8002ea8:	787b      	ldrb	r3, [r7, #1]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d106      	bne.n	8002ebc <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002eae:	887b      	ldrh	r3, [r7, #2]
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002eba:	e005      	b.n	8002ec8 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002ebc:	887b      	ldrh	r3, [r7, #2]
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002ec8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b087      	sub	sp, #28
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	460b      	mov	r3, r1
 8002ede:	607a      	str	r2, [r7, #4]
 8002ee0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8002ee6:	897b      	ldrh	r3, [r7, #10]
 8002ee8:	2b05      	cmp	r3, #5
 8002eea:	d905      	bls.n	8002ef8 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002eec:	23fc      	movs	r3, #252	; 0xfc
 8002eee:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	701a      	strb	r2, [r3, #0]
 8002ef6:	e008      	b.n	8002f0a <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002ef8:	897b      	ldrh	r3, [r7, #10]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	4413      	add	r3, r2
 8002efe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f02:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	7dba      	ldrb	r2, [r7, #22]
 8002f08:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002f0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	371c      	adds	r7, #28
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
	...

08002f1c <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	460b      	mov	r3, r1
 8002f26:	607a      	str	r2, [r7, #4]
 8002f28:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8002f2e:	897b      	ldrh	r3, [r7, #10]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	4413      	add	r3, r2
 8002f34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f38:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8002f3a:	7dbb      	ldrb	r3, [r7, #22]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d107      	bne.n	8002f50 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002f40:	897b      	ldrh	r3, [r7, #10]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	330c      	adds	r3, #12
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	e040      	b.n	8002fd2 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8002f50:	897b      	ldrh	r3, [r7, #10]
 8002f52:	2b05      	cmp	r3, #5
 8002f54:	d830      	bhi.n	8002fb8 <VL53L0X_SetLimitCheckValue+0x9c>
 8002f56:	a201      	add	r2, pc, #4	; (adr r2, 8002f5c <VL53L0X_SetLimitCheckValue+0x40>)
 8002f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5c:	08002f75 	.word	0x08002f75
 8002f60:	08002f7d 	.word	0x08002f7d
 8002f64:	08002f93 	.word	0x08002f93
 8002f68:	08002f9b 	.word	0x08002f9b
 8002f6c:	08002fa3 	.word	0x08002fa3
 8002f70:	08002fa3 	.word	0x08002fa3

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8002f7a:	e01f      	b.n	8002fbc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	461a      	mov	r2, r3
 8002f84:	2144      	movs	r1, #68	; 0x44
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f003 fff6 	bl	8006f78 <VL53L0X_WrWord>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8002f90:	e014      	b.n	8002fbc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8002f98:	e010      	b.n	8002fbc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8002fa0:	e00c      	b.n	8002fbc <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	461a      	mov	r2, r3
 8002faa:	2164      	movs	r1, #100	; 0x64
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f003 ffe3 	bl	8006f78 <VL53L0X_WrWord>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8002fb6:	e001      	b.n	8002fbc <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002fb8:	23fc      	movs	r3, #252	; 0xfc
 8002fba:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8002fbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d106      	bne.n	8002fd2 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002fc4:	897b      	ldrh	r3, [r7, #10]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	330c      	adds	r3, #12
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002fd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop

08002fe0 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b088      	sub	sp, #32
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	607a      	str	r2, [r7, #4]
 8002fec:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8002ff6:	897b      	ldrh	r3, [r7, #10]
 8002ff8:	2b05      	cmp	r3, #5
 8002ffa:	d847      	bhi.n	800308c <VL53L0X_GetLimitCheckValue+0xac>
 8002ffc:	a201      	add	r2, pc, #4	; (adr r2, 8003004 <VL53L0X_GetLimitCheckValue+0x24>)
 8002ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003002:	bf00      	nop
 8003004:	0800301d 	.word	0x0800301d
 8003008:	08003029 	.word	0x08003029
 800300c:	0800304f 	.word	0x0800304f
 8003010:	0800305b 	.word	0x0800305b
 8003014:	08003067 	.word	0x08003067
 8003018:	08003067 	.word	0x08003067

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003020:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8003022:	2300      	movs	r3, #0
 8003024:	77bb      	strb	r3, [r7, #30]
		break;
 8003026:	e033      	b.n	8003090 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8003028:	f107 0316 	add.w	r3, r7, #22
 800302c:	461a      	mov	r2, r3
 800302e:	2144      	movs	r1, #68	; 0x44
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f004 f829 	bl	8007088 <VL53L0X_RdWord>
 8003036:	4603      	mov	r3, r0
 8003038:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800303a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d102      	bne.n	8003048 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8003042:	8afb      	ldrh	r3, [r7, #22]
 8003044:	025b      	lsls	r3, r3, #9
 8003046:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8003048:	2301      	movs	r3, #1
 800304a:	77bb      	strb	r3, [r7, #30]
		break;
 800304c:	e020      	b.n	8003090 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003052:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8003054:	2300      	movs	r3, #0
 8003056:	77bb      	strb	r3, [r7, #30]
		break;
 8003058:	e01a      	b.n	8003090 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8003060:	2300      	movs	r3, #0
 8003062:	77bb      	strb	r3, [r7, #30]
		break;
 8003064:	e014      	b.n	8003090 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8003066:	f107 0316 	add.w	r3, r7, #22
 800306a:	461a      	mov	r2, r3
 800306c:	2164      	movs	r1, #100	; 0x64
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f004 f80a 	bl	8007088 <VL53L0X_RdWord>
 8003074:	4603      	mov	r3, r0
 8003076:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8003078:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d102      	bne.n	8003086 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8003080:	8afb      	ldrh	r3, [r7, #22]
 8003082:	025b      	lsls	r3, r3, #9
 8003084:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8003086:	2300      	movs	r3, #0
 8003088:	77bb      	strb	r3, [r7, #30]
		break;
 800308a:	e001      	b.n	8003090 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800308c:	23fc      	movs	r3, #252	; 0xfc
 800308e:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003090:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d12a      	bne.n	80030ee <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8003098:	7fbb      	ldrb	r3, [r7, #30]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d124      	bne.n	80030e8 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d110      	bne.n	80030c6 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 80030a4:	897b      	ldrh	r3, [r7, #10]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	330c      	adds	r3, #12
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80030b8:	897b      	ldrh	r3, [r7, #10]
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	4413      	add	r3, r2
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80030c4:	e013      	b.n	80030ee <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80030cc:	897b      	ldrh	r3, [r7, #10]
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	330c      	adds	r3, #12
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80030da:	897b      	ldrh	r3, [r7, #10]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	4413      	add	r3, r2
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80030e6:	e002      	b.n	80030ee <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80030ee:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3720      	adds	r7, #32
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop

080030fc <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003106:	2300      	movs	r3, #0
 8003108:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800310a:	f107 030e 	add.w	r3, r7, #14
 800310e:	461a      	mov	r2, r3
 8003110:	2101      	movs	r1, #1
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f003 ff8e 	bl	8007034 <VL53L0X_RdByte>
 8003118:	4603      	mov	r3, r0
 800311a:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 800311c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10e      	bne.n	8003142 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8003124:	7bba      	ldrb	r2, [r7, #14]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 800312c:	7bbb      	ldrb	r3, [r7, #14]
 800312e:	b25b      	sxtb	r3, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	da03      	bge.n	800313c <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	2201      	movs	r2, #1
 8003138:	701a      	strb	r2, [r3, #0]
 800313a:	e002      	b.n	8003142 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	2200      	movs	r2, #0
 8003140:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d104      	bne.n	8003154 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	781a      	ldrb	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003154:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003168:	2300      	movs	r3, #0
 800316a:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800316c:	f107 030e 	add.w	r3, r7, #14
 8003170:	4619      	mov	r1, r3
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7ff fbd2 	bl	800291c <VL53L0X_GetDeviceMode>
 8003178:	4603      	mov	r3, r0
 800317a:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800317c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d107      	bne.n	8003194 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8003184:	7bbb      	ldrb	r3, [r7, #14]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d104      	bne.n	8003194 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f898 	bl	80032c0 <VL53L0X_StartMeasurement>
 8003190:	4603      	mov	r3, r0
 8003192:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8003194:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d104      	bne.n	80031a6 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f001 fb3f 	bl	8004820 <VL53L0X_measurement_poll_for_completion>
 80031a2:	4603      	mov	r3, r0
 80031a4:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80031a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d106      	bne.n	80031bc <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80031ae:	7bbb      	ldrb	r3, [r7, #14]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d103      	bne.n	80031bc <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2203      	movs	r2, #3
 80031b8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 80031bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80031d4:	2300      	movs	r3, #0
 80031d6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 80031d8:	2301      	movs	r3, #1
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	68b9      	ldr	r1, [r7, #8]
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f001 fae1 	bl	80047a6 <VL53L0X_perform_ref_calibration>
 80031e4:	4603      	mov	r3, r0
 80031e6:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 80031e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	460b      	mov	r3, r1
 80031fe:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003200:	2300      	movs	r3, #0
 8003202:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800320a:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800320c:	7dbb      	ldrb	r3, [r7, #22]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d005      	beq.n	800321e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8003212:	7dbb      	ldrb	r3, [r7, #22]
 8003214:	2b02      	cmp	r3, #2
 8003216:	d002      	beq.n	800321e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8003218:	7dbb      	ldrb	r3, [r7, #22]
 800321a:	2b03      	cmp	r3, #3
 800321c:	d147      	bne.n	80032ae <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800321e:	f107 030c 	add.w	r3, r7, #12
 8003222:	f107 0210 	add.w	r2, r7, #16
 8003226:	2101      	movs	r1, #1
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 fbc3 	bl	80039b4 <VL53L0X_GetInterruptThresholds>
 800322e:	4603      	mov	r3, r0
 8003230:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8003238:	d803      	bhi.n	8003242 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800323a:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800323c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8003240:	d935      	bls.n	80032ae <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8003242:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d131      	bne.n	80032ae <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800324a:	78fb      	ldrb	r3, [r7, #3]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d006      	beq.n	800325e <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8003250:	491a      	ldr	r1, [pc, #104]	; (80032bc <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f002 ff56 	bl	8006104 <VL53L0X_load_tuning_settings>
 8003258:	4603      	mov	r3, r0
 800325a:	75fb      	strb	r3, [r7, #23]
 800325c:	e027      	b.n	80032ae <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800325e:	2204      	movs	r2, #4
 8003260:	21ff      	movs	r1, #255	; 0xff
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f003 fe64 	bl	8006f30 <VL53L0X_WrByte>
 8003268:	4603      	mov	r3, r0
 800326a:	461a      	mov	r2, r3
 800326c:	7dfb      	ldrb	r3, [r7, #23]
 800326e:	4313      	orrs	r3, r2
 8003270:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8003272:	2200      	movs	r2, #0
 8003274:	2170      	movs	r1, #112	; 0x70
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f003 fe5a 	bl	8006f30 <VL53L0X_WrByte>
 800327c:	4603      	mov	r3, r0
 800327e:	461a      	mov	r2, r3
 8003280:	7dfb      	ldrb	r3, [r7, #23]
 8003282:	4313      	orrs	r3, r2
 8003284:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003286:	2200      	movs	r2, #0
 8003288:	21ff      	movs	r1, #255	; 0xff
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f003 fe50 	bl	8006f30 <VL53L0X_WrByte>
 8003290:	4603      	mov	r3, r0
 8003292:	461a      	mov	r2, r3
 8003294:	7dfb      	ldrb	r3, [r7, #23]
 8003296:	4313      	orrs	r3, r2
 8003298:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800329a:	2200      	movs	r2, #0
 800329c:	2180      	movs	r1, #128	; 0x80
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f003 fe46 	bl	8006f30 <VL53L0X_WrByte>
 80032a4:	4603      	mov	r3, r0
 80032a6:	461a      	mov	r2, r3
 80032a8:	7dfb      	ldrb	r3, [r7, #23]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 80032ae:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	20000118 	.word	0x20000118

080032c0 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80032c8:	2300      	movs	r3, #0
 80032ca:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 80032cc:	2301      	movs	r3, #1
 80032ce:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80032d0:	f107 030e 	add.w	r3, r7, #14
 80032d4:	4619      	mov	r1, r3
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7ff fb20 	bl	800291c <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 80032dc:	2201      	movs	r2, #1
 80032de:	2180      	movs	r1, #128	; 0x80
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f003 fe25 	bl	8006f30 <VL53L0X_WrByte>
 80032e6:	4603      	mov	r3, r0
 80032e8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80032ea:	2201      	movs	r2, #1
 80032ec:	21ff      	movs	r1, #255	; 0xff
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f003 fe1e 	bl	8006f30 <VL53L0X_WrByte>
 80032f4:	4603      	mov	r3, r0
 80032f6:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 80032f8:	2200      	movs	r2, #0
 80032fa:	2100      	movs	r1, #0
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f003 fe17 	bl	8006f30 <VL53L0X_WrByte>
 8003302:	4603      	mov	r3, r0
 8003304:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800330c:	461a      	mov	r2, r3
 800330e:	2191      	movs	r1, #145	; 0x91
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f003 fe0d 	bl	8006f30 <VL53L0X_WrByte>
 8003316:	4603      	mov	r3, r0
 8003318:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800331a:	2201      	movs	r2, #1
 800331c:	2100      	movs	r1, #0
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f003 fe06 	bl	8006f30 <VL53L0X_WrByte>
 8003324:	4603      	mov	r3, r0
 8003326:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003328:	2200      	movs	r2, #0
 800332a:	21ff      	movs	r1, #255	; 0xff
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f003 fdff 	bl	8006f30 <VL53L0X_WrByte>
 8003332:	4603      	mov	r3, r0
 8003334:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003336:	2200      	movs	r2, #0
 8003338:	2180      	movs	r1, #128	; 0x80
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f003 fdf8 	bl	8006f30 <VL53L0X_WrByte>
 8003340:	4603      	mov	r3, r0
 8003342:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8003344:	7bbb      	ldrb	r3, [r7, #14]
 8003346:	2b03      	cmp	r3, #3
 8003348:	d054      	beq.n	80033f4 <VL53L0X_StartMeasurement+0x134>
 800334a:	2b03      	cmp	r3, #3
 800334c:	dc6c      	bgt.n	8003428 <VL53L0X_StartMeasurement+0x168>
 800334e:	2b00      	cmp	r3, #0
 8003350:	d002      	beq.n	8003358 <VL53L0X_StartMeasurement+0x98>
 8003352:	2b01      	cmp	r3, #1
 8003354:	d034      	beq.n	80033c0 <VL53L0X_StartMeasurement+0x100>
 8003356:	e067      	b.n	8003428 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8003358:	2201      	movs	r2, #1
 800335a:	2100      	movs	r1, #0
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f003 fde7 	bl	8006f30 <VL53L0X_WrByte>
 8003362:	4603      	mov	r3, r0
 8003364:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8003366:	7bfb      	ldrb	r3, [r7, #15]
 8003368:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800336a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d15d      	bne.n	800342e <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8003372:	2300      	movs	r3, #0
 8003374:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d008      	beq.n	800338e <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800337c:	f107 030d 	add.w	r3, r7, #13
 8003380:	461a      	mov	r2, r3
 8003382:	2100      	movs	r1, #0
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f003 fe55 	bl	8007034 <VL53L0X_RdByte>
 800338a:	4603      	mov	r3, r0
 800338c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	3301      	adds	r3, #1
 8003392:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8003394:	7b7a      	ldrb	r2, [r7, #13]
 8003396:	7bfb      	ldrb	r3, [r7, #15]
 8003398:	4013      	ands	r3, r2
 800339a:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800339c:	7bfa      	ldrb	r2, [r7, #15]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d107      	bne.n	80033b2 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 80033a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d103      	bne.n	80033b2 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80033b0:	d3e1      	bcc.n	8003376 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80033b8:	d339      	bcc.n	800342e <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 80033ba:	23f9      	movs	r3, #249	; 0xf9
 80033bc:	75fb      	strb	r3, [r7, #23]

		}

		break;
 80033be:	e036      	b.n	800342e <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80033c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d105      	bne.n	80033d4 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80033c8:	2101      	movs	r1, #1
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7ff ff12 	bl	80031f4 <VL53L0X_CheckAndLoadInterruptSettings>
 80033d0:	4603      	mov	r3, r0
 80033d2:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80033d4:	2202      	movs	r2, #2
 80033d6:	2100      	movs	r1, #0
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f003 fda9 	bl	8006f30 <VL53L0X_WrByte>
 80033de:	4603      	mov	r3, r0
 80033e0:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 80033e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d123      	bne.n	8003432 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2204      	movs	r2, #4
 80033ee:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80033f2:	e01e      	b.n	8003432 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80033f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d105      	bne.n	8003408 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80033fc:	2101      	movs	r1, #1
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7ff fef8 	bl	80031f4 <VL53L0X_CheckAndLoadInterruptSettings>
 8003404:	4603      	mov	r3, r0
 8003406:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8003408:	2204      	movs	r2, #4
 800340a:	2100      	movs	r1, #0
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f003 fd8f 	bl	8006f30 <VL53L0X_WrByte>
 8003412:	4603      	mov	r3, r0
 8003414:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8003416:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10b      	bne.n	8003436 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2204      	movs	r2, #4
 8003422:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8003426:	e006      	b.n	8003436 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8003428:	23f8      	movs	r3, #248	; 0xf8
 800342a:	75fb      	strb	r3, [r7, #23]
 800342c:	e004      	b.n	8003438 <VL53L0X_StartMeasurement+0x178>
		break;
 800342e:	bf00      	nop
 8003430:	e002      	b.n	8003438 <VL53L0X_StartMeasurement+0x178>
		break;
 8003432:	bf00      	nop
 8003434:	e000      	b.n	8003438 <VL53L0X_StartMeasurement+0x178>
		break;
 8003436:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8003438:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3718      	adds	r7, #24
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800344e:	2300      	movs	r3, #0
 8003450:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8003458:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800345a:	7bbb      	ldrb	r3, [r7, #14]
 800345c:	2b04      	cmp	r3, #4
 800345e:	d112      	bne.n	8003486 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8003460:	f107 0308 	add.w	r3, r7, #8
 8003464:	4619      	mov	r1, r3
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 fb1a 	bl	8003aa0 <VL53L0X_GetInterruptMaskStatus>
 800346c:	4603      	mov	r3, r0
 800346e:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2b04      	cmp	r3, #4
 8003474:	d103      	bne.n	800347e <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	2201      	movs	r2, #1
 800347a:	701a      	strb	r2, [r3, #0]
 800347c:	e01c      	b.n	80034b8 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2200      	movs	r2, #0
 8003482:	701a      	strb	r2, [r3, #0]
 8003484:	e018      	b.n	80034b8 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8003486:	f107 030d 	add.w	r3, r7, #13
 800348a:	461a      	mov	r2, r3
 800348c:	2114      	movs	r1, #20
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f003 fdd0 	bl	8007034 <VL53L0X_RdByte>
 8003494:	4603      	mov	r3, r0
 8003496:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8003498:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10b      	bne.n	80034b8 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 80034a0:	7b7b      	ldrb	r3, [r7, #13]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	2201      	movs	r2, #1
 80034ae:	701a      	strb	r2, [r3, #0]
 80034b0:	e002      	b.n	80034b8 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2200      	movs	r2, #0
 80034b6:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80034b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80034c4:	b5b0      	push	{r4, r5, r7, lr}
 80034c6:	b096      	sub	sp, #88	; 0x58
 80034c8:	af02      	add	r7, sp, #8
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80034ce:	2300      	movs	r3, #0
 80034d0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 80034d4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80034d8:	230c      	movs	r3, #12
 80034da:	2114      	movs	r1, #20
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f003 fcfb 	bl	8006ed8 <VL53L0X_ReadMulti>
 80034e2:	4603      	mov	r3, r0
 80034e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 80034e8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f040 80d1 	bne.w	8003694 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2200      	movs	r2, #0
 80034f6:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 80034fe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003502:	b29b      	uxth	r3, r3
 8003504:	021b      	lsls	r3, r3, #8
 8003506:	b29a      	uxth	r2, r3
 8003508:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800350c:	b29b      	uxth	r3, r3
 800350e:	4413      	add	r3, r2
 8003510:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	2200      	movs	r2, #0
 8003518:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800351a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800351e:	b29b      	uxth	r3, r3
 8003520:	021b      	lsls	r3, r3, #8
 8003522:	b29a      	uxth	r2, r3
 8003524:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003528:	b29b      	uxth	r3, r3
 800352a:	4413      	add	r3, r2
 800352c:	b29b      	uxth	r3, r3
 800352e:	025b      	lsls	r3, r3, #9
 8003530:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003536:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8003538:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800353c:	b29b      	uxth	r3, r3
 800353e:	021b      	lsls	r3, r3, #8
 8003540:	b29a      	uxth	r2, r3
 8003542:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8003546:	b29b      	uxth	r3, r3
 8003548:	4413      	add	r3, r2
 800354a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800354e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003552:	025b      	lsls	r3, r3, #9
 8003554:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800355a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800355e:	b29b      	uxth	r3, r3
 8003560:	021b      	lsls	r3, r3, #8
 8003562:	b29a      	uxth	r2, r3
 8003564:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003568:	b29b      	uxth	r3, r3
 800356a:	4413      	add	r3, r2
 800356c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003576:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8003578:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800357c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8003586:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800358e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8003592:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003594:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003598:	d046      	beq.n	8003628 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800359a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800359c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80035a0:	fb02 f303 	mul.w	r3, r2, r3
 80035a4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80035a8:	4a57      	ldr	r2, [pc, #348]	; (8003708 <VL53L0X_GetRangingMeasurementData+0x244>)
 80035aa:	fb82 1203 	smull	r1, r2, r2, r3
 80035ae:	1192      	asrs	r2, r2, #6
 80035b0:	17db      	asrs	r3, r3, #31
 80035b2:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 80035b4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	7f1b      	ldrb	r3, [r3, #28]
 80035c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 80035c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d02c      	beq.n	8003628 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 80035ce:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80035d0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80035d4:	fb02 f303 	mul.w	r3, r2, r3
 80035d8:	121a      	asrs	r2, r3, #8
					<= 0) {
 80035da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 80035dc:	429a      	cmp	r2, r3
 80035de:	d10d      	bne.n	80035fc <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 80035e0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d004      	beq.n	80035f2 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 80035e8:	f242 23b8 	movw	r3, #8888	; 0x22b8
 80035ec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80035f0:	e016      	b.n	8003620 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 80035f2:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 80035f6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80035fa:	e011      	b.n	8003620 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 80035fc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003600:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003602:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8003606:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003608:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800360c:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8003610:	121b      	asrs	r3, r3, #8
 8003612:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8003614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003616:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8003618:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800361c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8003620:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003624:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8003628:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00d      	beq.n	800364c <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8003630:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003634:	089b      	lsrs	r3, r3, #2
 8003636:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800363c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003640:	b2db      	uxtb	r3, r3
 8003642:	019b      	lsls	r3, r3, #6
 8003644:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	75da      	strb	r2, [r3, #23]
 800364a:	e006      	b.n	800365a <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8003652:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	2200      	movs	r2, #0
 8003658:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800365a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800365e:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8003662:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8003666:	9301      	str	r3, [sp, #4]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	4613      	mov	r3, r2
 800366e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f003 f9e5 	bl	8006a40 <VL53L0X_get_pal_range_status>
 8003676:	4603      	mov	r3, r0
 8003678:	461a      	mov	r2, r3
 800367a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800367e:	4313      	orrs	r3, r2
 8003680:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8003684:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003688:	2b00      	cmp	r3, #0
 800368a:	d103      	bne.n	8003694 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800368c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003694:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003698:	2b00      	cmp	r3, #0
 800369a:	d12f      	bne.n	80036fc <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f107 040c 	add.w	r4, r7, #12
 80036a2:	f103 0550 	add.w	r5, r3, #80	; 0x50
 80036a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80036ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 80036b6:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 80036bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 80036c4:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 80036ca:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 80036d0:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 80036d6:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 80036dc:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 80036e2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80036ec:	f107 050c 	add.w	r5, r7, #12
 80036f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80036f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80036fc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8003700:	4618      	mov	r0, r3
 8003702:	3750      	adds	r7, #80	; 0x50
 8003704:	46bd      	mov	sp, r7
 8003706:	bdb0      	pop	{r4, r5, r7, pc}
 8003708:	10624dd3 	.word	0x10624dd3

0800370c <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003716:	2300      	movs	r3, #0
 8003718:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800371a:	2100      	movs	r1, #0
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7ff f8d1 	bl	80028c4 <VL53L0X_SetDeviceMode>
 8003722:	4603      	mov	r3, r0
 8003724:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d104      	bne.n	8003738 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7ff fd16 	bl	8003160 <VL53L0X_PerformSingleMeasurement>
 8003734:	4603      	mov	r3, r0
 8003736:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8003738:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d105      	bne.n	800374c <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8003740:	6839      	ldr	r1, [r7, #0]
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7ff febe 	bl	80034c4 <VL53L0X_GetRangingMeasurementData>
 8003748:	4603      	mov	r3, r0
 800374a:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800374c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d105      	bne.n	8003760 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8003754:	2100      	movs	r1, #0
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f962 	bl	8003a20 <VL53L0X_ClearInterruptMask>
 800375c:	4603      	mov	r3, r0
 800375e:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8003760:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	4608      	mov	r0, r1
 8003776:	4611      	mov	r1, r2
 8003778:	461a      	mov	r2, r3
 800377a:	4603      	mov	r3, r0
 800377c:	70fb      	strb	r3, [r7, #3]
 800377e:	460b      	mov	r3, r1
 8003780:	70bb      	strb	r3, [r7, #2]
 8003782:	4613      	mov	r3, r2
 8003784:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003786:	2300      	movs	r3, #0
 8003788:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800378a:	78fb      	ldrb	r3, [r7, #3]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8003790:	23f6      	movs	r3, #246	; 0xf6
 8003792:	73fb      	strb	r3, [r7, #15]
 8003794:	e107      	b.n	80039a6 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8003796:	78bb      	ldrb	r3, [r7, #2]
 8003798:	2b14      	cmp	r3, #20
 800379a:	d110      	bne.n	80037be <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800379c:	7e3b      	ldrb	r3, [r7, #24]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d102      	bne.n	80037a8 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 80037a2:	2310      	movs	r3, #16
 80037a4:	73bb      	strb	r3, [r7, #14]
 80037a6:	e001      	b.n	80037ac <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 80037a8:	2301      	movs	r3, #1
 80037aa:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 80037ac:	7bbb      	ldrb	r3, [r7, #14]
 80037ae:	461a      	mov	r2, r3
 80037b0:	2184      	movs	r1, #132	; 0x84
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f003 fbbc 	bl	8006f30 <VL53L0X_WrByte>
 80037b8:	4603      	mov	r3, r0
 80037ba:	73fb      	strb	r3, [r7, #15]
 80037bc:	e0f3      	b.n	80039a6 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 80037be:	78bb      	ldrb	r3, [r7, #2]
 80037c0:	2b15      	cmp	r3, #21
 80037c2:	f040 8097 	bne.w	80038f4 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80037c6:	2201      	movs	r2, #1
 80037c8:	21ff      	movs	r1, #255	; 0xff
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f003 fbb0 	bl	8006f30 <VL53L0X_WrByte>
 80037d0:	4603      	mov	r3, r0
 80037d2:	461a      	mov	r2, r3
 80037d4:	7bfb      	ldrb	r3, [r7, #15]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80037da:	2200      	movs	r2, #0
 80037dc:	2100      	movs	r1, #0
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f003 fba6 	bl	8006f30 <VL53L0X_WrByte>
 80037e4:	4603      	mov	r3, r0
 80037e6:	461a      	mov	r2, r3
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80037ee:	2200      	movs	r2, #0
 80037f0:	21ff      	movs	r1, #255	; 0xff
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f003 fb9c 	bl	8006f30 <VL53L0X_WrByte>
 80037f8:	4603      	mov	r3, r0
 80037fa:	461a      	mov	r2, r3
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
 80037fe:	4313      	orrs	r3, r2
 8003800:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003802:	2201      	movs	r2, #1
 8003804:	2180      	movs	r1, #128	; 0x80
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f003 fb92 	bl	8006f30 <VL53L0X_WrByte>
 800380c:	4603      	mov	r3, r0
 800380e:	461a      	mov	r2, r3
 8003810:	7bfb      	ldrb	r3, [r7, #15]
 8003812:	4313      	orrs	r3, r2
 8003814:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8003816:	2202      	movs	r2, #2
 8003818:	2185      	movs	r1, #133	; 0x85
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f003 fb88 	bl	8006f30 <VL53L0X_WrByte>
 8003820:	4603      	mov	r3, r0
 8003822:	461a      	mov	r2, r3
 8003824:	7bfb      	ldrb	r3, [r7, #15]
 8003826:	4313      	orrs	r3, r2
 8003828:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800382a:	2204      	movs	r2, #4
 800382c:	21ff      	movs	r1, #255	; 0xff
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f003 fb7e 	bl	8006f30 <VL53L0X_WrByte>
 8003834:	4603      	mov	r3, r0
 8003836:	461a      	mov	r2, r3
 8003838:	7bfb      	ldrb	r3, [r7, #15]
 800383a:	4313      	orrs	r3, r2
 800383c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800383e:	2200      	movs	r2, #0
 8003840:	21cd      	movs	r1, #205	; 0xcd
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f003 fb74 	bl	8006f30 <VL53L0X_WrByte>
 8003848:	4603      	mov	r3, r0
 800384a:	461a      	mov	r2, r3
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	4313      	orrs	r3, r2
 8003850:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8003852:	2211      	movs	r2, #17
 8003854:	21cc      	movs	r1, #204	; 0xcc
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f003 fb6a 	bl	8006f30 <VL53L0X_WrByte>
 800385c:	4603      	mov	r3, r0
 800385e:	461a      	mov	r2, r3
 8003860:	7bfb      	ldrb	r3, [r7, #15]
 8003862:	4313      	orrs	r3, r2
 8003864:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8003866:	2207      	movs	r2, #7
 8003868:	21ff      	movs	r1, #255	; 0xff
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f003 fb60 	bl	8006f30 <VL53L0X_WrByte>
 8003870:	4603      	mov	r3, r0
 8003872:	461a      	mov	r2, r3
 8003874:	7bfb      	ldrb	r3, [r7, #15]
 8003876:	4313      	orrs	r3, r2
 8003878:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800387a:	2200      	movs	r2, #0
 800387c:	21be      	movs	r1, #190	; 0xbe
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f003 fb56 	bl	8006f30 <VL53L0X_WrByte>
 8003884:	4603      	mov	r3, r0
 8003886:	461a      	mov	r2, r3
 8003888:	7bfb      	ldrb	r3, [r7, #15]
 800388a:	4313      	orrs	r3, r2
 800388c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800388e:	2206      	movs	r2, #6
 8003890:	21ff      	movs	r1, #255	; 0xff
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f003 fb4c 	bl	8006f30 <VL53L0X_WrByte>
 8003898:	4603      	mov	r3, r0
 800389a:	461a      	mov	r2, r3
 800389c:	7bfb      	ldrb	r3, [r7, #15]
 800389e:	4313      	orrs	r3, r2
 80038a0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80038a2:	2209      	movs	r2, #9
 80038a4:	21cc      	movs	r1, #204	; 0xcc
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f003 fb42 	bl	8006f30 <VL53L0X_WrByte>
 80038ac:	4603      	mov	r3, r0
 80038ae:	461a      	mov	r2, r3
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80038b6:	2200      	movs	r2, #0
 80038b8:	21ff      	movs	r1, #255	; 0xff
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f003 fb38 	bl	8006f30 <VL53L0X_WrByte>
 80038c0:	4603      	mov	r3, r0
 80038c2:	461a      	mov	r2, r3
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80038ca:	2201      	movs	r2, #1
 80038cc:	21ff      	movs	r1, #255	; 0xff
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f003 fb2e 	bl	8006f30 <VL53L0X_WrByte>
 80038d4:	4603      	mov	r3, r0
 80038d6:	461a      	mov	r2, r3
 80038d8:	7bfb      	ldrb	r3, [r7, #15]
 80038da:	4313      	orrs	r3, r2
 80038dc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80038de:	2200      	movs	r2, #0
 80038e0:	2100      	movs	r1, #0
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f003 fb24 	bl	8006f30 <VL53L0X_WrByte>
 80038e8:	4603      	mov	r3, r0
 80038ea:	461a      	mov	r2, r3
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	73fb      	strb	r3, [r7, #15]
 80038f2:	e058      	b.n	80039a6 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 80038f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d121      	bne.n	8003940 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 80038fc:	787b      	ldrb	r3, [r7, #1]
 80038fe:	2b04      	cmp	r3, #4
 8003900:	d81b      	bhi.n	800393a <VL53L0X_SetGpioConfig+0x1ce>
 8003902:	a201      	add	r2, pc, #4	; (adr r2, 8003908 <VL53L0X_SetGpioConfig+0x19c>)
 8003904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003908:	0800391d 	.word	0x0800391d
 800390c:	08003923 	.word	0x08003923
 8003910:	08003929 	.word	0x08003929
 8003914:	0800392f 	.word	0x0800392f
 8003918:	08003935 	.word	0x08003935
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800391c:	2300      	movs	r3, #0
 800391e:	73bb      	strb	r3, [r7, #14]
				break;
 8003920:	e00f      	b.n	8003942 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8003922:	2301      	movs	r3, #1
 8003924:	73bb      	strb	r3, [r7, #14]
				break;
 8003926:	e00c      	b.n	8003942 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8003928:	2302      	movs	r3, #2
 800392a:	73bb      	strb	r3, [r7, #14]
				break;
 800392c:	e009      	b.n	8003942 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800392e:	2303      	movs	r3, #3
 8003930:	73bb      	strb	r3, [r7, #14]
				break;
 8003932:	e006      	b.n	8003942 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8003934:	2304      	movs	r3, #4
 8003936:	73bb      	strb	r3, [r7, #14]
				break;
 8003938:	e003      	b.n	8003942 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800393a:	23f5      	movs	r3, #245	; 0xf5
 800393c:	73fb      	strb	r3, [r7, #15]
 800393e:	e000      	b.n	8003942 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8003940:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8003942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d107      	bne.n	800395a <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800394a:	7bbb      	ldrb	r3, [r7, #14]
 800394c:	461a      	mov	r2, r3
 800394e:	210a      	movs	r1, #10
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f003 faed 	bl	8006f30 <VL53L0X_WrByte>
 8003956:	4603      	mov	r3, r0
 8003958:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800395a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10f      	bne.n	8003982 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8003962:	7e3b      	ldrb	r3, [r7, #24]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d102      	bne.n	800396e <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8003968:	2300      	movs	r3, #0
 800396a:	73bb      	strb	r3, [r7, #14]
 800396c:	e001      	b.n	8003972 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800396e:	2310      	movs	r3, #16
 8003970:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8003972:	7bbb      	ldrb	r3, [r7, #14]
 8003974:	22ef      	movs	r2, #239	; 0xef
 8003976:	2184      	movs	r1, #132	; 0x84
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f003 fb27 	bl	8006fcc <VL53L0X_UpdateByte>
 800397e:	4603      	mov	r3, r0
 8003980:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8003982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d103      	bne.n	8003992 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	787a      	ldrb	r2, [r7, #1]
 800398e:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8003992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d105      	bne.n	80039a6 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800399a:	2100      	movs	r1, #0
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f83f 	bl	8003a20 <VL53L0X_ClearInterruptMask>
 80039a2:	4603      	mov	r3, r0
 80039a4:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 80039a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop

080039b4 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	607a      	str	r2, [r7, #4]
 80039be:	603b      	str	r3, [r7, #0]
 80039c0:	460b      	mov	r3, r1
 80039c2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80039c4:	2300      	movs	r3, #0
 80039c6:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 80039c8:	f107 0314 	add.w	r3, r7, #20
 80039cc:	461a      	mov	r2, r3
 80039ce:	210e      	movs	r1, #14
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f003 fb59 	bl	8007088 <VL53L0X_RdWord>
 80039d6:	4603      	mov	r3, r0
 80039d8:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80039da:	8abb      	ldrh	r3, [r7, #20]
 80039dc:	045b      	lsls	r3, r3, #17
 80039de:	461a      	mov	r2, r3
 80039e0:	4b0e      	ldr	r3, [pc, #56]	; (8003a1c <VL53L0X_GetInterruptThresholds+0x68>)
 80039e2:	4013      	ands	r3, r2
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 80039e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10f      	bne.n	8003a10 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80039f0:	f107 0314 	add.w	r3, r7, #20
 80039f4:	461a      	mov	r2, r3
 80039f6:	210c      	movs	r1, #12
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f003 fb45 	bl	8007088 <VL53L0X_RdWord>
 80039fe:	4603      	mov	r3, r0
 8003a00:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8003a02:	8abb      	ldrh	r3, [r7, #20]
 8003a04:	045b      	lsls	r3, r3, #17
 8003a06:	461a      	mov	r2, r3
 8003a08:	4b04      	ldr	r3, [pc, #16]	; (8003a1c <VL53L0X_GetInterruptThresholds+0x68>)
 8003a0a:	4013      	ands	r3, r2
		*pThresholdHigh =
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003a10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3718      	adds	r7, #24
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	1ffe0000 	.word	0x1ffe0000

08003a20 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8003a32:	2201      	movs	r2, #1
 8003a34:	210b      	movs	r1, #11
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f003 fa7a 	bl	8006f30 <VL53L0X_WrByte>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8003a40:	2200      	movs	r2, #0
 8003a42:	210b      	movs	r1, #11
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f003 fa73 	bl	8006f30 <VL53L0X_WrByte>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	7bfb      	ldrb	r3, [r7, #15]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8003a54:	f107 030d 	add.w	r3, r7, #13
 8003a58:	461a      	mov	r2, r3
 8003a5a:	2113      	movs	r1, #19
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f003 fae9 	bl	8007034 <VL53L0X_RdByte>
 8003a62:	4603      	mov	r3, r0
 8003a64:	461a      	mov	r2, r3
 8003a66:	7bfb      	ldrb	r3, [r7, #15]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8003a6c:	7bbb      	ldrb	r3, [r7, #14]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8003a72:	7b7b      	ldrb	r3, [r7, #13]
 8003a74:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d006      	beq.n	8003a8a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8003a7c:	7bbb      	ldrb	r3, [r7, #14]
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d803      	bhi.n	8003a8a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8003a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d0d3      	beq.n	8003a32 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8003a8a:	7bbb      	ldrb	r3, [r7, #14]
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d901      	bls.n	8003a94 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8003a90:	23f4      	movs	r3, #244	; 0xf4
 8003a92:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8003a94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8003aae:	f107 030e 	add.w	r3, r7, #14
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	2113      	movs	r1, #19
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f003 fabc 	bl	8007034 <VL53L0X_RdByte>
 8003abc:	4603      	mov	r3, r0
 8003abe:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8003ac0:	7bbb      	ldrb	r3, [r7, #14]
 8003ac2:	f003 0207 	and.w	r2, r3, #7
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8003aca:	7bbb      	ldrb	r3, [r7, #14]
 8003acc:	f003 0318 	and.w	r3, r3, #24
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8003ad4:	23fa      	movs	r3, #250	; 0xfa
 8003ad6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8003ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003af0:	2300      	movs	r3, #0
 8003af2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	68b9      	ldr	r1, [r7, #8]
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 fa03 	bl	8003f04 <VL53L0X_perform_ref_spad_management>
 8003afe:	4603      	mov	r3, r0
 8003b00:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8003b02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3718      	adds	r7, #24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b084      	sub	sp, #16
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
 8003b16:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8003b1c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003b20:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8003b22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b26:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8003b28:	f107 0308 	add.w	r3, r7, #8
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	2128      	movs	r1, #40	; 0x28
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f003 faa9 	bl	8007088 <VL53L0X_RdWord>
 8003b36:	4603      	mov	r3, r0
 8003b38:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8003b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d11e      	bne.n	8003b80 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8003b42:	893b      	ldrh	r3, [r7, #8]
 8003b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8003b4c:	893b      	ldrh	r3, [r7, #8]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	dd0b      	ble.n	8003b70 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8003b58:	893a      	ldrh	r2, [r7, #8]
 8003b5a:	897b      	ldrh	r3, [r7, #10]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	b21b      	sxth	r3, r3
 8003b62:	461a      	mov	r2, r3
					* 250;
 8003b64:	23fa      	movs	r3, #250	; 0xfa
 8003b66:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	e007      	b.n	8003b80 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8003b70:	893b      	ldrh	r3, [r7, #8]
 8003b72:	b21b      	sxth	r3, r3
 8003b74:	461a      	mov	r2, r3
 8003b76:	23fa      	movs	r3, #250	; 0xfa
 8003b78:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8003b80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b08b      	sub	sp, #44	; 0x2c
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
 8003b98:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8003b9a:	2308      	movs	r3, #8
 8003b9c:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ba8:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb2:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	fbb3 f2f2 	udiv	r2, r3, r2
 8003bbc:	69b9      	ldr	r1, [r7, #24]
 8003bbe:	fb01 f202 	mul.w	r2, r1, r2
 8003bc2:	1a9b      	subs	r3, r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bca:	e030      	b.n	8003c2e <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd4:	4413      	add	r3, r2
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8003bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d11e      	bne.n	8003c20 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8003be2:	7ffa      	ldrb	r2, [r7, #31]
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	fa42 f303 	asr.w	r3, r2, r3
 8003bea:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8003bf0:	e016      	b.n	8003c20 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8003bf2:	7ffb      	ldrb	r3, [r7, #31]
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00b      	beq.n	8003c14 <get_next_good_spad+0x88>
				success = 1;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	fb03 f202 	mul.w	r2, r3, r2
 8003c08:	6a3b      	ldr	r3, [r7, #32]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	601a      	str	r2, [r3, #0]
				break;
 8003c12:	e009      	b.n	8003c28 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8003c14:	7ffb      	ldrb	r3, [r7, #31]
 8003c16:	085b      	lsrs	r3, r3, #1
 8003c18:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8003c20:	6a3a      	ldr	r2, [r7, #32]
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d3e4      	bcc.n	8003bf2 <get_next_good_spad+0x66>
				coarseIndex++) {
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8003c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d202      	bcs.n	8003c3c <get_next_good_spad+0xb0>
 8003c36:	7fbb      	ldrb	r3, [r7, #30]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d0c7      	beq.n	8003bcc <get_next_good_spad+0x40>
		}
	}
}
 8003c3c:	bf00      	nop
 8003c3e:	372c      	adds	r7, #44	; 0x2c
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8003c50:	2301      	movs	r3, #1
 8003c52:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	099b      	lsrs	r3, r3, #6
 8003c58:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8003c5a:	4a07      	ldr	r2, [pc, #28]	; (8003c78 <is_aperture+0x30>)
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <is_aperture+0x22>
		isAperture = 0;
 8003c66:	2300      	movs	r3, #0
 8003c68:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8003c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	200002d0 	.word	0x200002d0

08003c7c <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b089      	sub	sp, #36	; 0x24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8003c8c:	2308      	movs	r3, #8
 8003c8e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c98:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003ca2:	69b9      	ldr	r1, [r7, #24]
 8003ca4:	fb01 f202 	mul.w	r2, r1, r2
 8003ca8:	1a9b      	subs	r3, r3, r2
 8003caa:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d302      	bcc.n	8003cba <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8003cb4:	23ce      	movs	r3, #206	; 0xce
 8003cb6:	77fb      	strb	r3, [r7, #31]
 8003cb8:	e010      	b.n	8003cdc <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	b25a      	sxtb	r2, r3
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ccc:	b25b      	sxtb	r3, r3
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	b259      	sxtb	r1, r3
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	b2ca      	uxtb	r2, r1
 8003cda:	701a      	strb	r2, [r3, #0]

	return status;
 8003cdc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3724      	adds	r7, #36	; 0x24
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8003cf6:	2306      	movs	r3, #6
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	21b0      	movs	r1, #176	; 0xb0
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f003 f8bb 	bl	8006e78 <VL53L0X_WriteMulti>
 8003d02:	4603      	mov	r3, r0
 8003d04:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8003d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b084      	sub	sp, #16
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
 8003d1a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8003d1c:	2306      	movs	r3, #6
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	21b0      	movs	r1, #176	; 0xb0
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f003 f8d8 	bl	8006ed8 <VL53L0X_ReadMulti>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8003d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b08c      	sub	sp, #48	; 0x30
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	607a      	str	r2, [r7, #4]
 8003d42:	603b      	str	r3, [r7, #0]
 8003d44:	460b      	mov	r3, r1
 8003d46:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8003d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d50:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8003d52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d54:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8003d56:	2300      	movs	r3, #0
 8003d58:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d5a:	e02b      	b.n	8003db4 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8003d5c:	f107 031c 	add.w	r3, r7, #28
 8003d60:	6a3a      	ldr	r2, [r7, #32]
 8003d62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7ff ff11 	bl	8003b8c <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d70:	d103      	bne.n	8003d7a <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8003d72:	23ce      	movs	r3, #206	; 0xce
 8003d74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8003d78:	e020      	b.n	8003dbc <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d80:	4413      	add	r3, r2
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7ff ff60 	bl	8003c48 <is_aperture>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	7afb      	ldrb	r3, [r7, #11]
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d003      	beq.n	8003d9a <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8003d92:	23ce      	movs	r3, #206	; 0xce
 8003d94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8003d98:	e010      	b.n	8003dbc <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8003d9e:	6a3a      	ldr	r2, [r7, #32]
 8003da0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003da2:	6838      	ldr	r0, [r7, #0]
 8003da4:	f7ff ff6a 	bl	8003c7c <enable_spad_bit>
		currentSpad++;
 8003da8:	6a3b      	ldr	r3, [r7, #32]
 8003daa:	3301      	adds	r3, #1
 8003dac:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8003dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db0:	3301      	adds	r3, #1
 8003db2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003db4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003db6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d3cf      	bcc.n	8003d5c <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8003dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dbe:	6a3a      	ldr	r2, [r7, #32]
 8003dc0:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8003dc2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d106      	bne.n	8003dd8 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8003dca:	6839      	ldr	r1, [r7, #0]
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f7ff ff8d 	bl	8003cec <set_ref_spad_map>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8003dd8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d121      	bne.n	8003e24 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8003de0:	f107 0314 	add.w	r3, r7, #20
 8003de4:	4619      	mov	r1, r3
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f7ff ff93 	bl	8003d12 <get_ref_spad_map>
 8003dec:	4603      	mov	r3, r0
 8003dee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8003df2:	2300      	movs	r3, #0
 8003df4:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8003df6:	e011      	b.n	8003e1c <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	4413      	add	r3, r2
 8003dfe:	781a      	ldrb	r2, [r3, #0]
 8003e00:	f107 0114 	add.w	r1, r7, #20
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	440b      	add	r3, r1
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d003      	beq.n	8003e16 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8003e0e:	23ce      	movs	r3, #206	; 0xce
 8003e10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8003e14:	e006      	b.n	8003e24 <enable_ref_spads+0xec>
			}
			i++;
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	3301      	adds	r3, #1
 8003e1a:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8003e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d3e9      	bcc.n	8003df8 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8003e24:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3730      	adds	r7, #48	; 0x30
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b08a      	sub	sp, #40	; 0x28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8003e40:	2300      	movs	r3, #0
 8003e42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8003e4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8003e50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d107      	bne.n	8003e68 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8003e58:	22c0      	movs	r2, #192	; 0xc0
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f003 f867 	bl	8006f30 <VL53L0X_WrByte>
 8003e62:	4603      	mov	r3, r0
 8003e64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8003e68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d108      	bne.n	8003e82 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8003e70:	f107 0308 	add.w	r3, r7, #8
 8003e74:	4619      	mov	r1, r3
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7ff fc48 	bl	800370c <VL53L0X_PerformSingleRangingMeasurement>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8003e82:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d107      	bne.n	8003e9a <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	21ff      	movs	r1, #255	; 0xff
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f003 f84e 	bl	8006f30 <VL53L0X_WrByte>
 8003e94:	4603      	mov	r3, r0
 8003e96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8003e9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d107      	bne.n	8003eb2 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	21b6      	movs	r1, #182	; 0xb6
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f003 f8ee 	bl	8007088 <VL53L0X_RdWord>
 8003eac:	4603      	mov	r3, r0
 8003eae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8003eb2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d107      	bne.n	8003eca <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003eba:	2200      	movs	r2, #0
 8003ebc:	21ff      	movs	r1, #255	; 0xff
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f003 f836 	bl	8006f30 <VL53L0X_WrByte>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8003eca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d112      	bne.n	8003ef8 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003ed2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	2101      	movs	r1, #1
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f003 f828 	bl	8006f30 <VL53L0X_WrByte>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8003ee6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d104      	bne.n	8003ef8 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003ef4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8003ef8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3728      	adds	r7, #40	; 0x28
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8003f04:	b590      	push	{r4, r7, lr}
 8003f06:	b09d      	sub	sp, #116	; 0x74
 8003f08:	af06      	add	r7, sp, #24
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f10:	2300      	movs	r3, #0
 8003f12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8003f16:	23b4      	movs	r3, #180	; 0xb4
 8003f18:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8003f20:	232c      	movs	r3, #44	; 0x2c
 8003f22:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8003f24:	2300      	movs	r3, #0
 8003f26:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8003f30:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8003f34:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8003f36:	2300      	movs	r3, #0
 8003f38:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8003f3e:	2306      	movs	r3, #6
 8003f40:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8003f42:	2300      	movs	r3, #0
 8003f44:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8003f46:	2300      	movs	r3, #0
 8003f48:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8003f50:	2300      	movs	r3, #0
 8003f52:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8003f54:	2300      	movs	r3, #0
 8003f56:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8003f68:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f6e:	e009      	b.n	8003f84 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f74:	4413      	add	r3, r2
 8003f76:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8003f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f80:	3301      	adds	r3, #1
 8003f82:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d3f1      	bcc.n	8003f70 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	21ff      	movs	r1, #255	; 0xff
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f002 ffcd 	bl	8006f30 <VL53L0X_WrByte>
 8003f96:	4603      	mov	r3, r0
 8003f98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8003f9c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d107      	bne.n	8003fb4 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	214f      	movs	r1, #79	; 0x4f
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f002 ffc1 	bl	8006f30 <VL53L0X_WrByte>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8003fb4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d107      	bne.n	8003fcc <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8003fbc:	222c      	movs	r2, #44	; 0x2c
 8003fbe:	214e      	movs	r1, #78	; 0x4e
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f002 ffb5 	bl	8006f30 <VL53L0X_WrByte>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8003fcc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d107      	bne.n	8003fe4 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	21ff      	movs	r1, #255	; 0xff
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f002 ffa9 	bl	8006f30 <VL53L0X_WrByte>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8003fe4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d109      	bne.n	8004000 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8003fec:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	21b6      	movs	r1, #182	; 0xb6
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f002 ff9b 	bl	8006f30 <VL53L0X_WrByte>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8004000:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004004:	2b00      	cmp	r3, #0
 8004006:	d107      	bne.n	8004018 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8004008:	2200      	movs	r2, #0
 800400a:	2180      	movs	r1, #128	; 0x80
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f002 ff8f 	bl	8006f30 <VL53L0X_WrByte>
 8004012:	4603      	mov	r3, r0
 8004014:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8004018:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10a      	bne.n	8004036 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8004020:	f107 0210 	add.w	r2, r7, #16
 8004024:	f107 0111 	add.w	r1, r7, #17
 8004028:	2300      	movs	r3, #0
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f000 fbbb 	bl	80047a6 <VL53L0X_perform_ref_calibration>
 8004030:	4603      	mov	r3, r0
 8004032:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8004036:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800403a:	2b00      	cmp	r3, #0
 800403c:	d121      	bne.n	8004082 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800403e:	2300      	movs	r3, #0
 8004040:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8004042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004044:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8004046:	2300      	movs	r3, #0
 8004048:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800404a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800404c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800405a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800405e:	f107 0218 	add.w	r2, r7, #24
 8004062:	9204      	str	r2, [sp, #16]
 8004064:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004066:	9203      	str	r2, [sp, #12]
 8004068:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800406a:	9202      	str	r2, [sp, #8]
 800406c:	9301      	str	r3, [sp, #4]
 800406e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	4623      	mov	r3, r4
 8004074:	4602      	mov	r2, r0
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f7ff fe5e 	bl	8003d38 <enable_ref_spads>
 800407c:	4603      	mov	r3, r0
 800407e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004082:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004086:	2b00      	cmp	r3, #0
 8004088:	d174      	bne.n	8004174 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800408e:	f107 0312 	add.w	r3, r7, #18
 8004092:	4619      	mov	r1, r3
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f7ff fecb 	bl	8003e30 <perform_ref_signal_measurement>
 800409a:	4603      	mov	r3, r0
 800409c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 80040a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d161      	bne.n	800416c <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 80040a8:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 80040aa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d25d      	bcs.n	800416c <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 80040b0:	2300      	movs	r3, #0
 80040b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80040b4:	e009      	b.n	80040ca <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80040c0:	2200      	movs	r2, #0
 80040c2:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 80040c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040c6:	3301      	adds	r3, #1
 80040c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80040ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d3f1      	bcc.n	80040b6 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 80040d2:	e002      	b.n	80040da <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 80040d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040d6:	3301      	adds	r3, #1
 80040d8:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 80040da:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80040de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040e0:	4413      	add	r3, r2
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7ff fdb0 	bl	8003c48 <is_aperture>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d103      	bne.n	80040f6 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80040ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80040f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d3ee      	bcc.n	80040d4 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 80040f6:	2301      	movs	r3, #1
 80040f8:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 80040fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040fc:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800410a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800410e:	f107 0218 	add.w	r2, r7, #24
 8004112:	9204      	str	r2, [sp, #16]
 8004114:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004116:	9203      	str	r2, [sp, #12]
 8004118:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800411a:	9202      	str	r2, [sp, #8]
 800411c:	9301      	str	r3, [sp, #4]
 800411e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	4623      	mov	r3, r4
 8004124:	4602      	mov	r2, r0
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f7ff fe06 	bl	8003d38 <enable_ref_spads>
 800412c:	4603      	mov	r3, r0
 800412e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8004132:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004136:	2b00      	cmp	r3, #0
 8004138:	d11b      	bne.n	8004172 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800413e:	f107 0312 	add.w	r3, r7, #18
 8004142:	4619      	mov	r1, r3
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f7ff fe73 	bl	8003e30 <perform_ref_signal_measurement>
 800414a:	4603      	mov	r3, r0
 800414c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8004150:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10c      	bne.n	8004172 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8004158:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800415a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800415c:	429a      	cmp	r2, r3
 800415e:	d208      	bcs.n	8004172 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8004160:	2301      	movs	r3, #1
 8004162:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8004166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004168:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800416a:	e002      	b.n	8004172 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800416c:	2300      	movs	r3, #0
 800416e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004170:	e000      	b.n	8004174 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8004172:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8004174:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004178:	2b00      	cmp	r3, #0
 800417a:	f040 80af 	bne.w	80042dc <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800417e:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8004180:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004182:	429a      	cmp	r2, r3
 8004184:	f240 80aa 	bls.w	80042dc <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8004188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800418a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800418e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004190:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8004198:	f107 031c 	add.w	r3, r7, #28
 800419c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800419e:	4618      	mov	r0, r3
 80041a0:	f008 fab4 	bl	800c70c <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 80041a4:	8a7b      	ldrh	r3, [r7, #18]
 80041a6:	461a      	mov	r2, r3
 80041a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	bfb8      	it	lt
 80041b0:	425b      	neglt	r3, r3
 80041b2:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 80041b4:	2300      	movs	r3, #0
 80041b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 80041ba:	e086      	b.n	80042ca <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 80041c2:	f107 0314 	add.w	r3, r7, #20
 80041c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80041c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041ca:	f7ff fcdf 	bl	8003b8c <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d4:	d103      	bne.n	80041de <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 80041d6:	23ce      	movs	r3, #206	; 0xce
 80041d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 80041dc:	e07e      	b.n	80042dc <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80041de:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	4413      	add	r3, r2
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff fd2e 	bl	8003c48 <is_aperture>
 80041ec:	4603      	mov	r3, r0
 80041ee:	461a      	mov	r2, r3
 80041f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d003      	beq.n	80041fe <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 80041f6:	2301      	movs	r3, #1
 80041f8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 80041fc:	e06e      	b.n	80042dc <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 80041fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004200:	3301      	adds	r3, #1
 8004202:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800420e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004210:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004212:	4618      	mov	r0, r3
 8004214:	f7ff fd32 	bl	8003c7c <enable_spad_bit>
 8004218:	4603      	mov	r3, r0
 800421a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800421e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10c      	bne.n	8004240 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8004226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004228:	3301      	adds	r3, #1
 800422a:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8004232:	4619      	mov	r1, r3
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f7ff fd59 	bl	8003cec <set_ref_spad_map>
 800423a:	4603      	mov	r3, r0
 800423c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8004240:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004244:	2b00      	cmp	r3, #0
 8004246:	d146      	bne.n	80042d6 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8004248:	f107 0312 	add.w	r3, r7, #18
 800424c:	4619      	mov	r1, r3
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f7ff fdee 	bl	8003e30 <perform_ref_signal_measurement>
 8004254:	4603      	mov	r3, r0
 8004256:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800425a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800425e:	2b00      	cmp	r3, #0
 8004260:	d13b      	bne.n	80042da <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8004262:	8a7b      	ldrh	r3, [r7, #18]
 8004264:	461a      	mov	r2, r3
 8004266:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	bfb8      	it	lt
 800426e:	425b      	neglt	r3, r3
 8004270:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8004272:	8a7b      	ldrh	r3, [r7, #18]
 8004274:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004276:	429a      	cmp	r2, r3
 8004278:	d21c      	bcs.n	80042b4 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800427a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800427c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800427e:	429a      	cmp	r2, r3
 8004280:	d914      	bls.n	80042ac <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8004282:	f107 031c 	add.w	r3, r7, #28
 8004286:	4619      	mov	r1, r3
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f7ff fd2f 	bl	8003cec <set_ref_spad_map>
 800428e:	4603      	mov	r3, r0
 8004290:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800429a:	f107 011c 	add.w	r1, r7, #28
 800429e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042a0:	4618      	mov	r0, r3
 80042a2:	f008 fa33 	bl	800c70c <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 80042a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042a8:	3b01      	subs	r3, #1
 80042aa:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 80042ac:	2301      	movs	r3, #1
 80042ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042b2:	e00a      	b.n	80042ca <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 80042be:	f107 031c 	add.w	r3, r7, #28
 80042c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042c4:	4618      	mov	r0, r3
 80042c6:	f008 fa21 	bl	800c70c <memcpy>
		while (!complete) {
 80042ca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f43f af74 	beq.w	80041bc <VL53L0X_perform_ref_spad_management+0x2b8>
 80042d4:	e002      	b.n	80042dc <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80042d6:	bf00      	nop
 80042d8:	e000      	b.n	80042dc <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80042da:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80042dc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d115      	bne.n	8004310 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80042e8:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80042f0:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	781a      	ldrb	r2, [r3, #0]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8004310:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8004314:	4618      	mov	r0, r3
 8004316:	375c      	adds	r7, #92	; 0x5c
 8004318:	46bd      	mov	sp, r7
 800431a:	bd90      	pop	{r4, r7, pc}

0800431c <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800431c:	b590      	push	{r4, r7, lr}
 800431e:	b093      	sub	sp, #76	; 0x4c
 8004320:	af06      	add	r7, sp, #24
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	4613      	mov	r3, r2
 8004328:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800432a:	2300      	movs	r3, #0
 800432c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8004330:	2300      	movs	r3, #0
 8004332:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8004334:	23b4      	movs	r3, #180	; 0xb4
 8004336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800433a:	2306      	movs	r3, #6
 800433c:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800433e:	232c      	movs	r3, #44	; 0x2c
 8004340:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004342:	2201      	movs	r2, #1
 8004344:	21ff      	movs	r1, #255	; 0xff
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f002 fdf2 	bl	8006f30 <VL53L0X_WrByte>
 800434c:	4603      	mov	r3, r0
 800434e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8004352:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004356:	2b00      	cmp	r3, #0
 8004358:	d107      	bne.n	800436a <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800435a:	2200      	movs	r2, #0
 800435c:	214f      	movs	r1, #79	; 0x4f
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f002 fde6 	bl	8006f30 <VL53L0X_WrByte>
 8004364:	4603      	mov	r3, r0
 8004366:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800436a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800436e:	2b00      	cmp	r3, #0
 8004370:	d107      	bne.n	8004382 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8004372:	222c      	movs	r2, #44	; 0x2c
 8004374:	214e      	movs	r1, #78	; 0x4e
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f002 fdda 	bl	8006f30 <VL53L0X_WrByte>
 800437c:	4603      	mov	r3, r0
 800437e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8004382:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004386:	2b00      	cmp	r3, #0
 8004388:	d107      	bne.n	800439a <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800438a:	2200      	movs	r2, #0
 800438c:	21ff      	movs	r1, #255	; 0xff
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f002 fdce 	bl	8006f30 <VL53L0X_WrByte>
 8004394:	4603      	mov	r3, r0
 8004396:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800439a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d109      	bne.n	80043b6 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 80043a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043a6:	461a      	mov	r2, r3
 80043a8:	21b6      	movs	r1, #182	; 0xb6
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f002 fdc0 	bl	8006f30 <VL53L0X_WrByte>
 80043b0:	4603      	mov	r3, r0
 80043b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 80043b6:	2300      	movs	r3, #0
 80043b8:	627b      	str	r3, [r7, #36]	; 0x24
 80043ba:	e009      	b.n	80043d0 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c0:	4413      	add	r3, r2
 80043c2:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80043c6:	2200      	movs	r2, #0
 80043c8:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80043ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043cc:	3301      	adds	r3, #1
 80043ce:	627b      	str	r3, [r7, #36]	; 0x24
 80043d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d3f1      	bcc.n	80043bc <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 80043d8:	79fb      	ldrb	r3, [r7, #7]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d011      	beq.n	8004402 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80043de:	e002      	b.n	80043e6 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 80043e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e2:	3301      	adds	r3, #1
 80043e4:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80043e6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80043ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ec:	4413      	add	r3, r2
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff fc2a 	bl	8003c48 <is_aperture>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d103      	bne.n	8004402 <VL53L0X_set_reference_spads+0xe6>
 80043fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d3ee      	bcc.n	80043e0 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800440e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004412:	79f9      	ldrb	r1, [r7, #7]
 8004414:	f107 0214 	add.w	r2, r7, #20
 8004418:	9204      	str	r2, [sp, #16]
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	9203      	str	r2, [sp, #12]
 800441e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004420:	9202      	str	r2, [sp, #8]
 8004422:	9301      	str	r3, [sp, #4]
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	4623      	mov	r3, r4
 800442a:	4602      	mov	r2, r0
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f7ff fc83 	bl	8003d38 <enable_ref_spads>
 8004432:	4603      	mov	r3, r0
 8004434:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8004438:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10c      	bne.n	800445a <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	b2da      	uxtb	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	79fa      	ldrb	r2, [r7, #7]
 8004456:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800445a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800445e:	4618      	mov	r0, r3
 8004460:	3734      	adds	r7, #52	; 0x34
 8004462:	46bd      	mov	sp, r7
 8004464:	bd90      	pop	{r4, r7, pc}

08004466 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b084      	sub	sp, #16
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
 800446e:	460b      	mov	r3, r1
 8004470:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004472:	2300      	movs	r3, #0
 8004474:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10a      	bne.n	8004494 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800447e:	78fb      	ldrb	r3, [r7, #3]
 8004480:	f043 0301 	orr.w	r3, r3, #1
 8004484:	b2db      	uxtb	r3, r3
 8004486:	461a      	mov	r2, r3
 8004488:	2100      	movs	r1, #0
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f002 fd50 	bl	8006f30 <VL53L0X_WrByte>
 8004490:	4603      	mov	r3, r0
 8004492:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8004494:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d104      	bne.n	80044a6 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 f9bf 	bl	8004820 <VL53L0X_measurement_poll_for_completion>
 80044a2:	4603      	mov	r3, r0
 80044a4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80044a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d105      	bne.n	80044ba <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80044ae:	2100      	movs	r1, #0
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f7ff fab5 	bl	8003a20 <VL53L0X_ClearInterruptMask>
 80044b6:	4603      	mov	r3, r0
 80044b8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80044ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d106      	bne.n	80044d0 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80044c2:	2200      	movs	r2, #0
 80044c4:	2100      	movs	r1, #0
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f002 fd32 	bl	8006f30 <VL53L0X_WrByte>
 80044cc:	4603      	mov	r3, r0
 80044ce:	73fb      	strb	r3, [r7, #15]

	return Status;
 80044d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	4608      	mov	r0, r1
 80044e6:	4611      	mov	r1, r2
 80044e8:	461a      	mov	r2, r3
 80044ea:	4603      	mov	r3, r0
 80044ec:	70fb      	strb	r3, [r7, #3]
 80044ee:	460b      	mov	r3, r1
 80044f0:	70bb      	strb	r3, [r7, #2]
 80044f2:	4613      	mov	r3, r2
 80044f4:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80044f6:	2300      	movs	r3, #0
 80044f8:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 80044fa:	2300      	movs	r3, #0
 80044fc:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80044fe:	2201      	movs	r2, #1
 8004500:	21ff      	movs	r1, #255	; 0xff
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f002 fd14 	bl	8006f30 <VL53L0X_WrByte>
 8004508:	4603      	mov	r3, r0
 800450a:	461a      	mov	r2, r3
 800450c:	7bfb      	ldrb	r3, [r7, #15]
 800450e:	4313      	orrs	r3, r2
 8004510:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004512:	2200      	movs	r2, #0
 8004514:	2100      	movs	r1, #0
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f002 fd0a 	bl	8006f30 <VL53L0X_WrByte>
 800451c:	4603      	mov	r3, r0
 800451e:	461a      	mov	r2, r3
 8004520:	7bfb      	ldrb	r3, [r7, #15]
 8004522:	4313      	orrs	r3, r2
 8004524:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004526:	2200      	movs	r2, #0
 8004528:	21ff      	movs	r1, #255	; 0xff
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f002 fd00 	bl	8006f30 <VL53L0X_WrByte>
 8004530:	4603      	mov	r3, r0
 8004532:	461a      	mov	r2, r3
 8004534:	7bfb      	ldrb	r3, [r7, #15]
 8004536:	4313      	orrs	r3, r2
 8004538:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800453a:	78fb      	ldrb	r3, [r7, #3]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d01e      	beq.n	800457e <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8004540:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d009      	beq.n	800455c <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	21cb      	movs	r1, #203	; 0xcb
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f002 fd71 	bl	8007034 <VL53L0X_RdByte>
 8004552:	4603      	mov	r3, r0
 8004554:	461a      	mov	r2, r3
 8004556:	7bfb      	ldrb	r3, [r7, #15]
 8004558:	4313      	orrs	r3, r2
 800455a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800455c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004560:	2b00      	cmp	r3, #0
 8004562:	d02a      	beq.n	80045ba <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8004564:	f107 030e 	add.w	r3, r7, #14
 8004568:	461a      	mov	r2, r3
 800456a:	21ee      	movs	r1, #238	; 0xee
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f002 fd61 	bl	8007034 <VL53L0X_RdByte>
 8004572:	4603      	mov	r3, r0
 8004574:	461a      	mov	r2, r3
 8004576:	7bfb      	ldrb	r3, [r7, #15]
 8004578:	4313      	orrs	r3, r2
 800457a:	73fb      	strb	r3, [r7, #15]
 800457c:	e01d      	b.n	80045ba <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800457e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00a      	beq.n	800459c <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8004586:	78bb      	ldrb	r3, [r7, #2]
 8004588:	461a      	mov	r2, r3
 800458a:	21cb      	movs	r1, #203	; 0xcb
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f002 fccf 	bl	8006f30 <VL53L0X_WrByte>
 8004592:	4603      	mov	r3, r0
 8004594:	461a      	mov	r2, r3
 8004596:	7bfb      	ldrb	r3, [r7, #15]
 8004598:	4313      	orrs	r3, r2
 800459a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800459c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00a      	beq.n	80045ba <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 80045a4:	787b      	ldrb	r3, [r7, #1]
 80045a6:	2280      	movs	r2, #128	; 0x80
 80045a8:	21ee      	movs	r1, #238	; 0xee
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f002 fd0e 	bl	8006fcc <VL53L0X_UpdateByte>
 80045b0:	4603      	mov	r3, r0
 80045b2:	461a      	mov	r2, r3
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80045ba:	2201      	movs	r2, #1
 80045bc:	21ff      	movs	r1, #255	; 0xff
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f002 fcb6 	bl	8006f30 <VL53L0X_WrByte>
 80045c4:	4603      	mov	r3, r0
 80045c6:	461a      	mov	r2, r3
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80045ce:	2201      	movs	r2, #1
 80045d0:	2100      	movs	r1, #0
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f002 fcac 	bl	8006f30 <VL53L0X_WrByte>
 80045d8:	4603      	mov	r3, r0
 80045da:	461a      	mov	r2, r3
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
 80045de:	4313      	orrs	r3, r2
 80045e0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80045e2:	2200      	movs	r2, #0
 80045e4:	21ff      	movs	r1, #255	; 0xff
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f002 fca2 	bl	8006f30 <VL53L0X_WrByte>
 80045ec:	4603      	mov	r3, r0
 80045ee:	461a      	mov	r2, r3
 80045f0:	7bfb      	ldrb	r3, [r7, #15]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80045f6:	7bbb      	ldrb	r3, [r7, #14]
 80045f8:	f023 0310 	bic.w	r3, r3, #16
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	701a      	strb	r2, [r3, #0]

	return Status;
 8004602:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004606:	4618      	mov	r0, r3
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b08a      	sub	sp, #40	; 0x28
 8004612:	af04      	add	r7, sp, #16
 8004614:	60f8      	str	r0, [r7, #12]
 8004616:	60b9      	str	r1, [r7, #8]
 8004618:	4611      	mov	r1, r2
 800461a:	461a      	mov	r2, r3
 800461c:	460b      	mov	r3, r1
 800461e:	71fb      	strb	r3, [r7, #7]
 8004620:	4613      	mov	r3, r2
 8004622:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004624:	2300      	movs	r3, #0
 8004626:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8004628:	2300      	movs	r3, #0
 800462a:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800462c:	2300      	movs	r3, #0
 800462e:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8004630:	2300      	movs	r3, #0
 8004632:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8004634:	2300      	movs	r3, #0
 8004636:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8004638:	79bb      	ldrb	r3, [r7, #6]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8004644:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8004646:	2201      	movs	r2, #1
 8004648:	2101      	movs	r1, #1
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f002 fc70 	bl	8006f30 <VL53L0X_WrByte>
 8004650:	4603      	mov	r3, r0
 8004652:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8004654:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d105      	bne.n	8004668 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800465c:	2140      	movs	r1, #64	; 0x40
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f7ff ff01 	bl	8004466 <VL53L0X_perform_single_ref_calibration>
 8004664:	4603      	mov	r3, r0
 8004666:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8004668:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d115      	bne.n	800469c <VL53L0X_perform_vhv_calibration+0x8e>
 8004670:	79fb      	ldrb	r3, [r7, #7]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d112      	bne.n	800469c <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8004676:	7d39      	ldrb	r1, [r7, #20]
 8004678:	7d7a      	ldrb	r2, [r7, #21]
 800467a:	2300      	movs	r3, #0
 800467c:	9303      	str	r3, [sp, #12]
 800467e:	2301      	movs	r3, #1
 8004680:	9302      	str	r3, [sp, #8]
 8004682:	f107 0313 	add.w	r3, r7, #19
 8004686:	9301      	str	r3, [sp, #4]
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	460b      	mov	r3, r1
 800468e:	2101      	movs	r1, #1
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f7ff ff23 	bl	80044dc <VL53L0X_ref_calibration_io>
 8004696:	4603      	mov	r3, r0
 8004698:	75fb      	strb	r3, [r7, #23]
 800469a:	e002      	b.n	80046a2 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	2200      	movs	r2, #0
 80046a0:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80046a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d112      	bne.n	80046d0 <VL53L0X_perform_vhv_calibration+0xc2>
 80046aa:	79bb      	ldrb	r3, [r7, #6]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00f      	beq.n	80046d0 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80046b0:	7dbb      	ldrb	r3, [r7, #22]
 80046b2:	461a      	mov	r2, r3
 80046b4:	2101      	movs	r1, #1
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f002 fc3a 	bl	8006f30 <VL53L0X_WrByte>
 80046bc:	4603      	mov	r3, r0
 80046be:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80046c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d103      	bne.n	80046d0 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	7dba      	ldrb	r2, [r7, #22]
 80046cc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80046d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3718      	adds	r7, #24
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b08a      	sub	sp, #40	; 0x28
 80046e0:	af04      	add	r7, sp, #16
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	4611      	mov	r1, r2
 80046e8:	461a      	mov	r2, r3
 80046ea:	460b      	mov	r3, r1
 80046ec:	71fb      	strb	r3, [r7, #7]
 80046ee:	4613      	mov	r3, r2
 80046f0:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80046f2:	2300      	movs	r3, #0
 80046f4:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80046f6:	2300      	movs	r3, #0
 80046f8:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80046fa:	2300      	movs	r3, #0
 80046fc:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80046fe:	2300      	movs	r3, #0
 8004700:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8004702:	79bb      	ldrb	r3, [r7, #6]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800470e:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8004710:	2202      	movs	r2, #2
 8004712:	2101      	movs	r1, #1
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f002 fc0b 	bl	8006f30 <VL53L0X_WrByte>
 800471a:	4603      	mov	r3, r0
 800471c:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800471e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d105      	bne.n	8004732 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8004726:	2100      	movs	r1, #0
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f7ff fe9c 	bl	8004466 <VL53L0X_perform_single_ref_calibration>
 800472e:	4603      	mov	r3, r0
 8004730:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8004732:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d115      	bne.n	8004766 <VL53L0X_perform_phase_calibration+0x8a>
 800473a:	79fb      	ldrb	r3, [r7, #7]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d112      	bne.n	8004766 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8004740:	7d39      	ldrb	r1, [r7, #20]
 8004742:	7d7a      	ldrb	r2, [r7, #21]
 8004744:	2301      	movs	r3, #1
 8004746:	9303      	str	r3, [sp, #12]
 8004748:	2300      	movs	r3, #0
 800474a:	9302      	str	r3, [sp, #8]
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	9301      	str	r3, [sp, #4]
 8004750:	f107 0313 	add.w	r3, r7, #19
 8004754:	9300      	str	r3, [sp, #0]
 8004756:	460b      	mov	r3, r1
 8004758:	2101      	movs	r1, #1
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f7ff febe 	bl	80044dc <VL53L0X_ref_calibration_io>
 8004760:	4603      	mov	r3, r0
 8004762:	75fb      	strb	r3, [r7, #23]
 8004764:	e002      	b.n	800476c <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2200      	movs	r2, #0
 800476a:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800476c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d112      	bne.n	800479a <VL53L0X_perform_phase_calibration+0xbe>
 8004774:	79bb      	ldrb	r3, [r7, #6]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00f      	beq.n	800479a <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800477a:	7dbb      	ldrb	r3, [r7, #22]
 800477c:	461a      	mov	r2, r3
 800477e:	2101      	movs	r1, #1
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f002 fbd5 	bl	8006f30 <VL53L0X_WrByte>
 8004786:	4603      	mov	r3, r0
 8004788:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800478a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d103      	bne.n	800479a <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	7dba      	ldrb	r2, [r7, #22]
 8004796:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800479a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b086      	sub	sp, #24
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	60f8      	str	r0, [r7, #12]
 80047ae:	60b9      	str	r1, [r7, #8]
 80047b0:	607a      	str	r2, [r7, #4]
 80047b2:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80047b4:	2300      	movs	r3, #0
 80047b6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80047b8:	2300      	movs	r3, #0
 80047ba:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80047c2:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 80047c4:	78fa      	ldrb	r2, [r7, #3]
 80047c6:	2300      	movs	r3, #0
 80047c8:	68b9      	ldr	r1, [r7, #8]
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f7ff ff1f 	bl	800460e <VL53L0X_perform_vhv_calibration>
 80047d0:	4603      	mov	r3, r0
 80047d2:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80047d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d107      	bne.n	80047ec <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 80047dc:	78fa      	ldrb	r2, [r7, #3]
 80047de:	2300      	movs	r3, #0
 80047e0:	6879      	ldr	r1, [r7, #4]
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f7ff ff7a 	bl	80046dc <VL53L0X_perform_phase_calibration>
 80047e8:	4603      	mov	r3, r0
 80047ea:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 80047ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10f      	bne.n	8004814 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80047f4:	7dbb      	ldrb	r3, [r7, #22]
 80047f6:	461a      	mov	r2, r3
 80047f8:	2101      	movs	r1, #1
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f002 fb98 	bl	8006f30 <VL53L0X_WrByte>
 8004800:	4603      	mov	r3, r0
 8004802:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8004804:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d103      	bne.n	8004814 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	7dba      	ldrb	r2, [r7, #22]
 8004810:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8004814:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3718      	adds	r7, #24
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004828:	2300      	movs	r3, #0
 800482a:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800482c:	2300      	movs	r3, #0
 800482e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8004830:	2300      	movs	r3, #0
 8004832:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8004834:	f107 030f 	add.w	r3, r7, #15
 8004838:	4619      	mov	r1, r3
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7fe fe02 	bl	8003444 <VL53L0X_GetMeasurementDataReady>
 8004840:	4603      	mov	r3, r0
 8004842:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8004844:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d110      	bne.n	800486e <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800484c:	7bfb      	ldrb	r3, [r7, #15]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d00f      	beq.n	8004872 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	3301      	adds	r3, #1
 8004856:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800485e:	d302      	bcc.n	8004866 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8004860:	23f9      	movs	r3, #249	; 0xf9
 8004862:	75fb      	strb	r3, [r7, #23]
			break;
 8004864:	e006      	b.n	8004874 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f002 fc82 	bl	8007170 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800486c:	e7e2      	b.n	8004834 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800486e:	bf00      	nop
 8004870:	e000      	b.n	8004874 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8004872:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8004874:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004878:	4618      	mov	r0, r3
 800487a:	3718      	adds	r7, #24
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	4603      	mov	r3, r0
 8004888:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800488a:	2300      	movs	r3, #0
 800488c:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800488e:	79fb      	ldrb	r3, [r7, #7]
 8004890:	3301      	adds	r3, #1
 8004892:	b2db      	uxtb	r3, r3
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8004898:	7bfb      	ldrb	r3, [r7, #15]
}
 800489a:	4618      	mov	r0, r3
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b085      	sub	sp, #20
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	4603      	mov	r3, r0
 80048ae:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 80048b0:	2300      	movs	r3, #0
 80048b2:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 80048b4:	79fb      	ldrb	r3, [r7, #7]
 80048b6:	085b      	lsrs	r3, r3, #1
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	3b01      	subs	r3, #1
 80048bc:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 80048be:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 80048d4:	2300      	movs	r3, #0
 80048d6:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 80048d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80048dc:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 80048de:	e002      	b.n	80048e6 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	089b      	lsrs	r3, r3, #2
 80048e4:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d8f8      	bhi.n	80048e0 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 80048ee:	e017      	b.n	8004920 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	4413      	add	r3, r2
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d30b      	bcc.n	8004914 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	4413      	add	r3, r2
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	085b      	lsrs	r3, r3, #1
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	4413      	add	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]
 8004912:	e002      	b.n	800491a <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	085b      	lsrs	r3, r3, #1
 8004918:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	089b      	lsrs	r3, r3, #2
 800491e:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1e4      	bne.n	80048f0 <VL53L0X_isqrt+0x24>
	}

	return res;
 8004926:	68fb      	ldr	r3, [r7, #12]
}
 8004928:	4618      	mov	r0, r3
 800492a:	3714      	adds	r7, #20
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800493c:	2300      	movs	r3, #0
 800493e:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8004940:	2200      	movs	r2, #0
 8004942:	2183      	movs	r1, #131	; 0x83
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f002 faf3 	bl	8006f30 <VL53L0X_WrByte>
 800494a:	4603      	mov	r3, r0
 800494c:	461a      	mov	r2, r3
 800494e:	7dfb      	ldrb	r3, [r7, #23]
 8004950:	4313      	orrs	r3, r2
 8004952:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8004954:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d11e      	bne.n	800499a <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800495c:	2300      	movs	r3, #0
 800495e:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8004960:	f107 030f 	add.w	r3, r7, #15
 8004964:	461a      	mov	r2, r3
 8004966:	2183      	movs	r1, #131	; 0x83
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f002 fb63 	bl	8007034 <VL53L0X_RdByte>
 800496e:	4603      	mov	r3, r0
 8004970:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8004972:	7bfb      	ldrb	r3, [r7, #15]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10a      	bne.n	800498e <VL53L0X_device_read_strobe+0x5a>
 8004978:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d106      	bne.n	800498e <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	3301      	adds	r3, #1
 8004984:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800498c:	d3e8      	bcc.n	8004960 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004994:	d301      	bcc.n	800499a <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8004996:	23f9      	movs	r3, #249	; 0xf9
 8004998:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800499a:	2201      	movs	r2, #1
 800499c:	2183      	movs	r1, #131	; 0x83
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f002 fac6 	bl	8006f30 <VL53L0X_WrByte>
 80049a4:	4603      	mov	r3, r0
 80049a6:	461a      	mov	r2, r3
 80049a8:	7dfb      	ldrb	r3, [r7, #23]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 80049ae:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3718      	adds	r7, #24
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b098      	sub	sp, #96	; 0x60
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
 80049c2:	460b      	mov	r3, r1
 80049c4:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80049c6:	2300      	movs	r3, #0
 80049c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 80049cc:	2300      	movs	r3, #0
 80049ce:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 80049d2:	2300      	movs	r3, #0
 80049d4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 80049d8:	2300      	movs	r3, #0
 80049da:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 80049dc:	2300      	movs	r3, #0
 80049de:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 80049e0:	2300      	movs	r3, #0
 80049e2:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 80049e4:	2300      	movs	r3, #0
 80049e6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 80049ea:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80049ee:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 80049f0:	2300      	movs	r3, #0
 80049f2:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80049f4:	2300      	movs	r3, #0
 80049f6:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 80049f8:	2300      	movs	r3, #0
 80049fa:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8004a02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8004a06:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004a0a:	2b07      	cmp	r3, #7
 8004a0c:	f000 8408 	beq.w	8005220 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004a10:	2201      	movs	r2, #1
 8004a12:	2180      	movs	r1, #128	; 0x80
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f002 fa8b 	bl	8006f30 <VL53L0X_WrByte>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a22:	4313      	orrs	r3, r2
 8004a24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004a28:	2201      	movs	r2, #1
 8004a2a:	21ff      	movs	r1, #255	; 0xff
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f002 fa7f 	bl	8006f30 <VL53L0X_WrByte>
 8004a32:	4603      	mov	r3, r0
 8004a34:	461a      	mov	r2, r3
 8004a36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004a40:	2200      	movs	r2, #0
 8004a42:	2100      	movs	r1, #0
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f002 fa73 	bl	8006f30 <VL53L0X_WrByte>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a52:	4313      	orrs	r3, r2
 8004a54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8004a58:	2206      	movs	r2, #6
 8004a5a:	21ff      	movs	r1, #255	; 0xff
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f002 fa67 	bl	8006f30 <VL53L0X_WrByte>
 8004a62:	4603      	mov	r3, r0
 8004a64:	461a      	mov	r2, r3
 8004a66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8004a70:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8004a74:	461a      	mov	r2, r3
 8004a76:	2183      	movs	r1, #131	; 0x83
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f002 fadb 	bl	8007034 <VL53L0X_RdByte>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	461a      	mov	r2, r3
 8004a82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a86:	4313      	orrs	r3, r2
 8004a88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8004a8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a90:	f043 0304 	orr.w	r3, r3, #4
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	461a      	mov	r2, r3
 8004a98:	2183      	movs	r1, #131	; 0x83
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f002 fa48 	bl	8006f30 <VL53L0X_WrByte>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8004aae:	2207      	movs	r2, #7
 8004ab0:	21ff      	movs	r1, #255	; 0xff
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f002 fa3c 	bl	8006f30 <VL53L0X_WrByte>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	461a      	mov	r2, r3
 8004abc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	2181      	movs	r1, #129	; 0x81
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f002 fa30 	bl	8006f30 <VL53L0X_WrByte>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f002 fb46 	bl	8007170 <VL53L0X_PollingDelay>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004aec:	4313      	orrs	r3, r2
 8004aee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004af2:	2201      	movs	r2, #1
 8004af4:	2180      	movs	r1, #128	; 0x80
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f002 fa1a 	bl	8006f30 <VL53L0X_WrByte>
 8004afc:	4603      	mov	r3, r0
 8004afe:	461a      	mov	r2, r3
 8004b00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b04:	4313      	orrs	r3, r2
 8004b06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8004b0a:	78fb      	ldrb	r3, [r7, #3]
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f000 8098 	beq.w	8004c46 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8004b16:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004b1a:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f040 8091 	bne.w	8004c46 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8004b24:	226b      	movs	r2, #107	; 0x6b
 8004b26:	2194      	movs	r1, #148	; 0x94
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f002 fa01 	bl	8006f30 <VL53L0X_WrByte>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	461a      	mov	r2, r3
 8004b32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b36:	4313      	orrs	r3, r2
 8004b38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f7ff fef9 	bl	8004934 <VL53L0X_device_read_strobe>
 8004b42:	4603      	mov	r3, r0
 8004b44:	461a      	mov	r2, r3
 8004b46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004b50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b54:	461a      	mov	r2, r3
 8004b56:	2190      	movs	r1, #144	; 0x90
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f002 facd 	bl	80070f8 <VL53L0X_RdDWord>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	461a      	mov	r2, r3
 8004b62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b66:	4313      	orrs	r3, r2
 8004b68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8004b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6e:	0a1b      	lsrs	r3, r3, #8
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b76:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8004b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7c:	0bdb      	lsrs	r3, r3, #15
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8004b88:	2224      	movs	r2, #36	; 0x24
 8004b8a:	2194      	movs	r1, #148	; 0x94
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f002 f9cf 	bl	8006f30 <VL53L0X_WrByte>
 8004b92:	4603      	mov	r3, r0
 8004b94:	461a      	mov	r2, r3
 8004b96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7ff fec7 	bl	8004934 <VL53L0X_device_read_strobe>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	461a      	mov	r2, r3
 8004baa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004bb4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004bb8:	461a      	mov	r2, r3
 8004bba:	2190      	movs	r1, #144	; 0x90
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f002 fa9b 	bl	80070f8 <VL53L0X_RdDWord>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8004bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd2:	0e1b      	lsrs	r3, r3, #24
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8004bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bda:	0c1b      	lsrs	r3, r3, #16
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8004be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be2:	0a1b      	lsrs	r3, r3, #8
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8004be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8004bee:	2225      	movs	r2, #37	; 0x25
 8004bf0:	2194      	movs	r1, #148	; 0x94
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f002 f99c 	bl	8006f30 <VL53L0X_WrByte>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c00:	4313      	orrs	r3, r2
 8004c02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7ff fe94 	bl	8004934 <VL53L0X_device_read_strobe>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	461a      	mov	r2, r3
 8004c10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c14:	4313      	orrs	r3, r2
 8004c16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004c1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c1e:	461a      	mov	r2, r3
 8004c20:	2190      	movs	r1, #144	; 0x90
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f002 fa68 	bl	80070f8 <VL53L0X_RdDWord>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c30:	4313      	orrs	r3, r2
 8004c32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8004c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c38:	0e1b      	lsrs	r3, r3, #24
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c40:	0c1b      	lsrs	r3, r3, #16
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8004c46:	78fb      	ldrb	r3, [r7, #3]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 8189 	beq.w	8004f64 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8004c52:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004c56:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f040 8182 	bne.w	8004f64 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8004c60:	2202      	movs	r2, #2
 8004c62:	2194      	movs	r1, #148	; 0x94
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f002 f963 	bl	8006f30 <VL53L0X_WrByte>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c72:	4313      	orrs	r3, r2
 8004c74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7ff fe5b 	bl	8004934 <VL53L0X_device_read_strobe>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	461a      	mov	r2, r3
 8004c82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c86:	4313      	orrs	r3, r2
 8004c88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8004c8c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8004c90:	461a      	mov	r2, r3
 8004c92:	2190      	movs	r1, #144	; 0x90
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f002 f9cd 	bl	8007034 <VL53L0X_RdByte>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8004ca8:	227b      	movs	r2, #123	; 0x7b
 8004caa:	2194      	movs	r1, #148	; 0x94
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f002 f93f 	bl	8006f30 <VL53L0X_WrByte>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7ff fe37 	bl	8004934 <VL53L0X_device_read_strobe>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	461a      	mov	r2, r3
 8004cca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8004cd4:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8004cd8:	461a      	mov	r2, r3
 8004cda:	2190      	movs	r1, #144	; 0x90
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f002 f9a9 	bl	8007034 <VL53L0X_RdByte>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004cea:	4313      	orrs	r3, r2
 8004cec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8004cf0:	2277      	movs	r2, #119	; 0x77
 8004cf2:	2194      	movs	r1, #148	; 0x94
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f002 f91b 	bl	8006f30 <VL53L0X_WrByte>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f7ff fe13 	bl	8004934 <VL53L0X_device_read_strobe>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	461a      	mov	r2, r3
 8004d12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004d16:	4313      	orrs	r3, r2
 8004d18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004d1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004d20:	461a      	mov	r2, r3
 8004d22:	2190      	movs	r1, #144	; 0x90
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f002 f9e7 	bl	80070f8 <VL53L0X_RdDWord>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004d32:	4313      	orrs	r3, r2
 8004d34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8004d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3a:	0e5b      	lsrs	r3, r3, #25
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8004d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d48:	0c9b      	lsrs	r3, r3, #18
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8004d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d56:	0adb      	lsrs	r3, r3, #11
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8004d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d64:	091b      	lsrs	r3, r3, #4
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8004d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	00db      	lsls	r3, r3, #3
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8004d82:	2278      	movs	r2, #120	; 0x78
 8004d84:	2194      	movs	r1, #148	; 0x94
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f002 f8d2 	bl	8006f30 <VL53L0X_WrByte>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	461a      	mov	r2, r3
 8004d90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004d94:	4313      	orrs	r3, r2
 8004d96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7ff fdca 	bl	8004934 <VL53L0X_device_read_strobe>
 8004da0:	4603      	mov	r3, r0
 8004da2:	461a      	mov	r2, r3
 8004da4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004da8:	4313      	orrs	r3, r2
 8004daa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004dae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004db2:	461a      	mov	r2, r3
 8004db4:	2190      	movs	r1, #144	; 0x90
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f002 f99e 	bl	80070f8 <VL53L0X_RdDWord>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8004dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dcc:	0f5b      	lsrs	r3, r3, #29
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dd4:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8004dd6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004dda:	4413      	add	r3, r2
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8004de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de2:	0d9b      	lsrs	r3, r3, #22
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8004dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df0:	0bdb      	lsrs	r3, r3, #15
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8004dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfe:	0a1b      	lsrs	r3, r3, #8
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8004e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0c:	085b      	lsrs	r3, r3, #1
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8004e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	019b      	lsls	r3, r3, #6
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8004e2a:	2279      	movs	r2, #121	; 0x79
 8004e2c:	2194      	movs	r1, #148	; 0x94
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f002 f87e 	bl	8006f30 <VL53L0X_WrByte>
 8004e34:	4603      	mov	r3, r0
 8004e36:	461a      	mov	r2, r3
 8004e38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7ff fd76 	bl	8004934 <VL53L0X_device_read_strobe>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004e50:	4313      	orrs	r3, r2
 8004e52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004e56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	2190      	movs	r1, #144	; 0x90
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f002 f94a 	bl	80070f8 <VL53L0X_RdDWord>
 8004e64:	4603      	mov	r3, r0
 8004e66:	461a      	mov	r2, r3
 8004e68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8004e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e74:	0e9b      	lsrs	r3, r3, #26
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e7c:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8004e7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004e82:	4413      	add	r3, r2
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8004e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8a:	0cdb      	lsrs	r3, r3, #19
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8004e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e98:	0b1b      	lsrs	r3, r3, #12
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8004ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea6:	095b      	lsrs	r3, r3, #5
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8004eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8004ec4:	227a      	movs	r2, #122	; 0x7a
 8004ec6:	2194      	movs	r1, #148	; 0x94
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f002 f831 	bl	8006f30 <VL53L0X_WrByte>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f7ff fd29 	bl	8004934 <VL53L0X_device_read_strobe>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004eea:	4313      	orrs	r3, r2
 8004eec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004ef0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	2190      	movs	r1, #144	; 0x90
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f002 f8fd 	bl	80070f8 <VL53L0X_RdDWord>
 8004efe:	4603      	mov	r3, r0
 8004f00:	461a      	mov	r2, r3
 8004f02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004f06:	4313      	orrs	r3, r2
 8004f08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8004f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0e:	0f9b      	lsrs	r3, r3, #30
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f16:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8004f18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f1c:	4413      	add	r3, r2
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8004f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f24:	0ddb      	lsrs	r3, r3, #23
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8004f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f32:	0c1b      	lsrs	r3, r3, #16
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8004f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f40:	0a5b      	lsrs	r3, r3, #9
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8004f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f50:	089b      	lsrs	r3, r3, #2
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8004f5e:	2300      	movs	r3, #0
 8004f60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8004f64:	78fb      	ldrb	r3, [r7, #3]
 8004f66:	f003 0304 	and.w	r3, r3, #4
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f000 80f1 	beq.w	8005152 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8004f70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004f74:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f040 80ea 	bne.w	8005152 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8004f7e:	227b      	movs	r2, #123	; 0x7b
 8004f80:	2194      	movs	r1, #148	; 0x94
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f001 ffd4 	bl	8006f30 <VL53L0X_WrByte>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004f90:	4313      	orrs	r3, r2
 8004f92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f7ff fccc 	bl	8004934 <VL53L0X_device_read_strobe>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8004faa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004fae:	461a      	mov	r2, r3
 8004fb0:	2190      	movs	r1, #144	; 0x90
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f002 f8a0 	bl	80070f8 <VL53L0X_RdDWord>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	461a      	mov	r2, r3
 8004fbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8004fc6:	227c      	movs	r2, #124	; 0x7c
 8004fc8:	2194      	movs	r1, #148	; 0x94
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f001 ffb0 	bl	8006f30 <VL53L0X_WrByte>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7ff fca8 	bl	8004934 <VL53L0X_device_read_strobe>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004fec:	4313      	orrs	r3, r2
 8004fee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8004ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	2190      	movs	r1, #144	; 0x90
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f002 f87c 	bl	80070f8 <VL53L0X_RdDWord>
 8005000:	4603      	mov	r3, r0
 8005002:	461a      	mov	r2, r3
 8005004:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005008:	4313      	orrs	r3, r2
 800500a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800500e:	2273      	movs	r2, #115	; 0x73
 8005010:	2194      	movs	r1, #148	; 0x94
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f001 ff8c 	bl	8006f30 <VL53L0X_WrByte>
 8005018:	4603      	mov	r3, r0
 800501a:	461a      	mov	r2, r3
 800501c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005020:	4313      	orrs	r3, r2
 8005022:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7ff fc84 	bl	8004934 <VL53L0X_device_read_strobe>
 800502c:	4603      	mov	r3, r0
 800502e:	461a      	mov	r2, r3
 8005030:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005034:	4313      	orrs	r3, r2
 8005036:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800503a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800503e:	461a      	mov	r2, r3
 8005040:	2190      	movs	r1, #144	; 0x90
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f002 f858 	bl	80070f8 <VL53L0X_RdDWord>
 8005048:	4603      	mov	r3, r0
 800504a:	461a      	mov	r2, r3
 800504c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005050:	4313      	orrs	r3, r2
 8005052:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8005056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005058:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800505a:	b29b      	uxth	r3, r3
 800505c:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800505e:	2274      	movs	r2, #116	; 0x74
 8005060:	2194      	movs	r1, #148	; 0x94
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f001 ff64 	bl	8006f30 <VL53L0X_WrByte>
 8005068:	4603      	mov	r3, r0
 800506a:	461a      	mov	r2, r3
 800506c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005070:	4313      	orrs	r3, r2
 8005072:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f7ff fc5c 	bl	8004934 <VL53L0X_device_read_strobe>
 800507c:	4603      	mov	r3, r0
 800507e:	461a      	mov	r2, r3
 8005080:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005084:	4313      	orrs	r3, r2
 8005086:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800508a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800508e:	461a      	mov	r2, r3
 8005090:	2190      	movs	r1, #144	; 0x90
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f002 f830 	bl	80070f8 <VL53L0X_RdDWord>
 8005098:	4603      	mov	r3, r0
 800509a:	461a      	mov	r2, r3
 800509c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80050a0:	4313      	orrs	r3, r2
 80050a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 80050a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a8:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 80050aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80050ac:	4313      	orrs	r3, r2
 80050ae:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80050b0:	2275      	movs	r2, #117	; 0x75
 80050b2:	2194      	movs	r1, #148	; 0x94
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f001 ff3b 	bl	8006f30 <VL53L0X_WrByte>
 80050ba:	4603      	mov	r3, r0
 80050bc:	461a      	mov	r2, r3
 80050be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80050c2:	4313      	orrs	r3, r2
 80050c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f7ff fc33 	bl	8004934 <VL53L0X_device_read_strobe>
 80050ce:	4603      	mov	r3, r0
 80050d0:	461a      	mov	r2, r3
 80050d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80050d6:	4313      	orrs	r3, r2
 80050d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80050dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80050e0:	461a      	mov	r2, r3
 80050e2:	2190      	movs	r1, #144	; 0x90
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f002 f807 	bl	80070f8 <VL53L0X_RdDWord>
 80050ea:	4603      	mov	r3, r0
 80050ec:	461a      	mov	r2, r3
 80050ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80050f2:	4313      	orrs	r3, r2
 80050f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 80050f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fa:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8005100:	2276      	movs	r2, #118	; 0x76
 8005102:	2194      	movs	r1, #148	; 0x94
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f001 ff13 	bl	8006f30 <VL53L0X_WrByte>
 800510a:	4603      	mov	r3, r0
 800510c:	461a      	mov	r2, r3
 800510e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005112:	4313      	orrs	r3, r2
 8005114:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f7ff fc0b 	bl	8004934 <VL53L0X_device_read_strobe>
 800511e:	4603      	mov	r3, r0
 8005120:	461a      	mov	r2, r3
 8005122:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005126:	4313      	orrs	r3, r2
 8005128:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800512c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005130:	461a      	mov	r2, r3
 8005132:	2190      	movs	r1, #144	; 0x90
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f001 ffdf 	bl	80070f8 <VL53L0X_RdDWord>
 800513a:	4603      	mov	r3, r0
 800513c:	461a      	mov	r2, r3
 800513e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005142:	4313      	orrs	r3, r2
 8005144:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8005148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514a:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800514c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800514e:	4313      	orrs	r3, r2
 8005150:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8005152:	2200      	movs	r2, #0
 8005154:	2181      	movs	r1, #129	; 0x81
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f001 feea 	bl	8006f30 <VL53L0X_WrByte>
 800515c:	4603      	mov	r3, r0
 800515e:	461a      	mov	r2, r3
 8005160:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005164:	4313      	orrs	r3, r2
 8005166:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800516a:	2206      	movs	r2, #6
 800516c:	21ff      	movs	r1, #255	; 0xff
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f001 fede 	bl	8006f30 <VL53L0X_WrByte>
 8005174:	4603      	mov	r3, r0
 8005176:	461a      	mov	r2, r3
 8005178:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800517c:	4313      	orrs	r3, r2
 800517e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8005182:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8005186:	461a      	mov	r2, r3
 8005188:	2183      	movs	r1, #131	; 0x83
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f001 ff52 	bl	8007034 <VL53L0X_RdByte>
 8005190:	4603      	mov	r3, r0
 8005192:	461a      	mov	r2, r3
 8005194:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005198:	4313      	orrs	r3, r2
 800519a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800519e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80051a2:	f023 0304 	bic.w	r3, r3, #4
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	461a      	mov	r2, r3
 80051aa:	2183      	movs	r1, #131	; 0x83
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f001 febf 	bl	8006f30 <VL53L0X_WrByte>
 80051b2:	4603      	mov	r3, r0
 80051b4:	461a      	mov	r2, r3
 80051b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80051ba:	4313      	orrs	r3, r2
 80051bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80051c0:	2201      	movs	r2, #1
 80051c2:	21ff      	movs	r1, #255	; 0xff
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f001 feb3 	bl	8006f30 <VL53L0X_WrByte>
 80051ca:	4603      	mov	r3, r0
 80051cc:	461a      	mov	r2, r3
 80051ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80051d2:	4313      	orrs	r3, r2
 80051d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80051d8:	2201      	movs	r2, #1
 80051da:	2100      	movs	r1, #0
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f001 fea7 	bl	8006f30 <VL53L0X_WrByte>
 80051e2:	4603      	mov	r3, r0
 80051e4:	461a      	mov	r2, r3
 80051e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80051ea:	4313      	orrs	r3, r2
 80051ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80051f0:	2200      	movs	r2, #0
 80051f2:	21ff      	movs	r1, #255	; 0xff
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f001 fe9b 	bl	8006f30 <VL53L0X_WrByte>
 80051fa:	4603      	mov	r3, r0
 80051fc:	461a      	mov	r2, r3
 80051fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005202:	4313      	orrs	r3, r2
 8005204:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005208:	2200      	movs	r2, #0
 800520a:	2180      	movs	r1, #128	; 0x80
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f001 fe8f 	bl	8006f30 <VL53L0X_WrByte>
 8005212:	4603      	mov	r3, r0
 8005214:	461a      	mov	r2, r3
 8005216:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800521a:	4313      	orrs	r3, r2
 800521c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8005220:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8005224:	2b00      	cmp	r3, #0
 8005226:	f040 808f 	bne.w	8005348 <VL53L0X_get_info_from_device+0x98e>
 800522a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800522e:	2b07      	cmp	r3, #7
 8005230:	f000 808a 	beq.w	8005348 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8005234:	78fb      	ldrb	r3, [r7, #3]
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	d024      	beq.n	8005288 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800523e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005242:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8005246:	2b00      	cmp	r3, #0
 8005248:	d11e      	bne.n	8005288 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8005250:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800525a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800525e:	2300      	movs	r3, #0
 8005260:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005262:	e00e      	b.n	8005282 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8005264:	f107 0208 	add.w	r2, r7, #8
 8005268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800526a:	4413      	add	r3, r2
 800526c:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005272:	4413      	add	r3, r2
 8005274:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8005278:	460a      	mov	r2, r1
 800527a:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800527c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800527e:	3301      	adds	r3, #1
 8005280:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005284:	2b05      	cmp	r3, #5
 8005286:	dded      	ble.n	8005264 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8005288:	78fb      	ldrb	r3, [r7, #3]
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b00      	cmp	r3, #0
 8005290:	d018      	beq.n	80052c4 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8005292:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005296:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800529a:	2b00      	cmp	r3, #0
 800529c:	d112      	bne.n	80052c4 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800529e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80052a8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	33f3      	adds	r3, #243	; 0xf3
 80052b6:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 80052b8:	f107 0310 	add.w	r3, r7, #16
 80052bc:	4619      	mov	r1, r3
 80052be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80052c0:	f007 fec4 	bl	800d04c <strcpy>

		}

		if (((option & 4) == 4) &&
 80052c4:	78fb      	ldrb	r3, [r7, #3]
 80052c6:	f003 0304 	and.w	r3, r3, #4
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d030      	beq.n	8005330 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80052ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80052d2:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d12a      	bne.n	8005330 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80052da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80052e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 80052ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052ec:	025b      	lsls	r3, r3, #9
 80052ee:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052f4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 80052f8:	2300      	movs	r3, #0
 80052fa:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 80052fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005300:	2b00      	cmp	r3, #0
 8005302:	d011      	beq.n	8005328 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8005304:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800530c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800530e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005312:	fb02 f303 	mul.w	r3, r2, r3
 8005316:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8005318:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800531c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005320:	425b      	negs	r3, r3
 8005322:	b29b      	uxth	r3, r3
 8005324:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8005328:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8005330:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005334:	78fb      	ldrb	r3, [r7, #3]
 8005336:	4313      	orrs	r3, r2
 8005338:	b2db      	uxtb	r3, r3
 800533a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800533e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005348:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800534c:	4618      	mov	r0, r3
 800534e:	3760      	adds	r7, #96	; 0x60
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8005354:	b480      	push	{r7}
 8005356:	b087      	sub	sp, #28
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	460b      	mov	r3, r1
 800535e:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8005360:	f240 6277 	movw	r2, #1655	; 0x677
 8005364:	f04f 0300 	mov.w	r3, #0
 8005368:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800536c:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8005370:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8005372:	78fb      	ldrb	r3, [r7, #3]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	fb02 f303 	mul.w	r3, r2, r3
 8005380:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8005382:	68bb      	ldr	r3, [r7, #8]
}
 8005384:	4618      	mov	r0, r3
 8005386:	371c      	adds	r7, #28
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8005390:	b480      	push	{r7}
 8005392:	b087      	sub	sp, #28
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8005398:	2300      	movs	r3, #0
 800539a:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800539c:	2300      	movs	r3, #0
 800539e:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 80053a0:	2300      	movs	r3, #0
 80053a2:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d017      	beq.n	80053da <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	3b01      	subs	r3, #1
 80053ae:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 80053b0:	e005      	b.n	80053be <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	085b      	lsrs	r3, r3, #1
 80053b6:	613b      	str	r3, [r7, #16]
			ms_byte++;
 80053b8:	89fb      	ldrh	r3, [r7, #14]
 80053ba:	3301      	adds	r3, #1
 80053bc:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1f4      	bne.n	80053b2 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 80053c8:	89fb      	ldrh	r3, [r7, #14]
 80053ca:	021b      	lsls	r3, r3, #8
 80053cc:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 80053d6:	4413      	add	r3, r2
 80053d8:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 80053da:	8afb      	ldrh	r3, [r7, #22]

}
 80053dc:	4618      	mov	r0, r3
 80053de:	371c      	adds	r7, #28
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	4603      	mov	r3, r0
 80053f0:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 80053f2:	2300      	movs	r3, #0
 80053f4:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80053f6:	88fb      	ldrh	r3, [r7, #6]
 80053f8:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80053fa:	88fa      	ldrh	r2, [r7, #6]
 80053fc:	0a12      	lsrs	r2, r2, #8
 80053fe:	b292      	uxth	r2, r2
 8005400:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005402:	3301      	adds	r3, #1
 8005404:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8005406:	68fb      	ldr	r3, [r7, #12]
}
 8005408:	4618      	mov	r0, r3
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b088      	sub	sp, #32
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	4613      	mov	r3, r2
 8005420:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8005422:	2300      	movs	r3, #0
 8005424:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8005426:	79fb      	ldrb	r3, [r7, #7]
 8005428:	4619      	mov	r1, r3
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f7ff ff92 	bl	8005354 <VL53L0X_calc_macro_period_ps>
 8005430:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005438:	4a0a      	ldr	r2, [pc, #40]	; (8005464 <VL53L0X_calc_timeout_mclks+0x50>)
 800543a:	fba2 2303 	umull	r2, r3, r2, r3
 800543e:	099b      	lsrs	r3, r3, #6
 8005440:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005448:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	085b      	lsrs	r3, r3, #1
 8005450:	441a      	add	r2, r3
	timeout_period_mclks =
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	fbb2 f3f3 	udiv	r3, r2, r3
 8005458:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800545a:	69fb      	ldr	r3, [r7, #28]
}
 800545c:	4618      	mov	r0, r3
 800545e:	3720      	adds	r7, #32
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	10624dd3 	.word	0x10624dd3

08005468 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	460b      	mov	r3, r1
 8005472:	807b      	strh	r3, [r7, #2]
 8005474:	4613      	mov	r3, r2
 8005476:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8005478:	2300      	movs	r3, #0
 800547a:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800547c:	787b      	ldrb	r3, [r7, #1]
 800547e:	4619      	mov	r1, r3
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f7ff ff67 	bl	8005354 <VL53L0X_calc_macro_period_ps>
 8005486:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800548e:	4a0a      	ldr	r2, [pc, #40]	; (80054b8 <VL53L0X_calc_timeout_us+0x50>)
 8005490:	fba2 2303 	umull	r2, r3, r2, r3
 8005494:	099b      	lsrs	r3, r3, #6
 8005496:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8005498:	887b      	ldrh	r3, [r7, #2]
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	fb02 f303 	mul.w	r3, r2, r3
 80054a0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 80054a4:	4a04      	ldr	r2, [pc, #16]	; (80054b8 <VL53L0X_calc_timeout_us+0x50>)
 80054a6:	fba2 2303 	umull	r2, r3, r2, r3
 80054aa:	099b      	lsrs	r3, r3, #6
 80054ac:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 80054ae:	697b      	ldr	r3, [r7, #20]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3718      	adds	r7, #24
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	10624dd3 	.word	0x10624dd3

080054bc <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b08c      	sub	sp, #48	; 0x30
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	460b      	mov	r3, r1
 80054c6:	607a      	str	r2, [r7, #4]
 80054c8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80054ca:	2300      	movs	r3, #0
 80054cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 80054d0:	2300      	movs	r3, #0
 80054d2:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 80054d6:	2300      	movs	r3, #0
 80054d8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 80054da:	2300      	movs	r3, #0
 80054dc:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 80054de:	2300      	movs	r3, #0
 80054e0:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80054e2:	7afb      	ldrb	r3, [r7, #11]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d005      	beq.n	80054f4 <get_sequence_step_timeout+0x38>
 80054e8:	7afb      	ldrb	r3, [r7, #11]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d002      	beq.n	80054f4 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 80054ee:	7afb      	ldrb	r3, [r7, #11]
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d128      	bne.n	8005546 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80054f4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80054f8:	461a      	mov	r2, r3
 80054fa:	2100      	movs	r1, #0
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f7fd fa7d 	bl	80029fc <VL53L0X_GetVcselPulsePeriod>
 8005502:	4603      	mov	r3, r0
 8005504:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8005508:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800550c:	2b00      	cmp	r3, #0
 800550e:	d109      	bne.n	8005524 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8005510:	f107 0320 	add.w	r3, r7, #32
 8005514:	461a      	mov	r2, r3
 8005516:	2146      	movs	r1, #70	; 0x46
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f001 fd8b 	bl	8007034 <VL53L0X_RdByte>
 800551e:	4603      	mov	r3, r0
 8005520:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8005524:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005528:	b29b      	uxth	r3, r3
 800552a:	4618      	mov	r0, r3
 800552c:	f7ff ff5c 	bl	80053e8 <VL53L0X_decode_timeout>
 8005530:	4603      	mov	r3, r0
 8005532:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005534:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005538:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800553a:	4619      	mov	r1, r3
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f7ff ff93 	bl	8005468 <VL53L0X_calc_timeout_us>
 8005542:	62b8      	str	r0, [r7, #40]	; 0x28
 8005544:	e092      	b.n	800566c <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8005546:	7afb      	ldrb	r3, [r7, #11]
 8005548:	2b03      	cmp	r3, #3
 800554a:	d135      	bne.n	80055b8 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800554c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005550:	461a      	mov	r2, r3
 8005552:	2100      	movs	r1, #0
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	f7fd fa51 	bl	80029fc <VL53L0X_GetVcselPulsePeriod>
 800555a:	4603      	mov	r3, r0
 800555c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8005560:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005564:	2b00      	cmp	r3, #0
 8005566:	f040 8081 	bne.w	800566c <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800556a:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800556e:	461a      	mov	r2, r3
 8005570:	2100      	movs	r1, #0
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f7fd fa42 	bl	80029fc <VL53L0X_GetVcselPulsePeriod>
 8005578:	4603      	mov	r3, r0
 800557a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800557e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005582:	2b00      	cmp	r3, #0
 8005584:	d109      	bne.n	800559a <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8005586:	f107 031e 	add.w	r3, r7, #30
 800558a:	461a      	mov	r2, r3
 800558c:	2151      	movs	r1, #81	; 0x51
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f001 fd7a 	bl	8007088 <VL53L0X_RdWord>
 8005594:	4603      	mov	r3, r0
 8005596:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800559a:	8bfb      	ldrh	r3, [r7, #30]
 800559c:	4618      	mov	r0, r3
 800559e:	f7ff ff23 	bl	80053e8 <VL53L0X_decode_timeout>
 80055a2:	4603      	mov	r3, r0
 80055a4:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80055a6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80055aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80055ac:	4619      	mov	r1, r3
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f7ff ff5a 	bl	8005468 <VL53L0X_calc_timeout_us>
 80055b4:	62b8      	str	r0, [r7, #40]	; 0x28
 80055b6:	e059      	b.n	800566c <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80055b8:	7afb      	ldrb	r3, [r7, #11]
 80055ba:	2b04      	cmp	r3, #4
 80055bc:	d156      	bne.n	800566c <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80055be:	f107 0314 	add.w	r3, r7, #20
 80055c2:	4619      	mov	r1, r3
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f7fd fb25 	bl	8002c14 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 80055ca:	2300      	movs	r3, #0
 80055cc:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 80055ce:	7dfb      	ldrb	r3, [r7, #23]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d01d      	beq.n	8005610 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80055d4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80055d8:	461a      	mov	r2, r3
 80055da:	2100      	movs	r1, #0
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f7fd fa0d 	bl	80029fc <VL53L0X_GetVcselPulsePeriod>
 80055e2:	4603      	mov	r3, r0
 80055e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 80055e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d10f      	bne.n	8005610 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 80055f0:	f107 031e 	add.w	r3, r7, #30
 80055f4:	461a      	mov	r2, r3
 80055f6:	2151      	movs	r1, #81	; 0x51
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f001 fd45 	bl	8007088 <VL53L0X_RdWord>
 80055fe:	4603      	mov	r3, r0
 8005600:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005604:	8bfb      	ldrh	r3, [r7, #30]
 8005606:	4618      	mov	r0, r3
 8005608:	f7ff feee 	bl	80053e8 <VL53L0X_decode_timeout>
 800560c:	4603      	mov	r3, r0
 800560e:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8005610:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005614:	2b00      	cmp	r3, #0
 8005616:	d109      	bne.n	800562c <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005618:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800561c:	461a      	mov	r2, r3
 800561e:	2101      	movs	r1, #1
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f7fd f9eb 	bl	80029fc <VL53L0X_GetVcselPulsePeriod>
 8005626:	4603      	mov	r3, r0
 8005628:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800562c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10f      	bne.n	8005654 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8005634:	f107 031c 	add.w	r3, r7, #28
 8005638:	461a      	mov	r2, r3
 800563a:	2171      	movs	r1, #113	; 0x71
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f001 fd23 	bl	8007088 <VL53L0X_RdWord>
 8005642:	4603      	mov	r3, r0
 8005644:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005648:	8bbb      	ldrh	r3, [r7, #28]
 800564a:	4618      	mov	r0, r3
 800564c:	f7ff fecc 	bl	80053e8 <VL53L0X_decode_timeout>
 8005650:	4603      	mov	r3, r0
 8005652:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8005654:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005656:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800565c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005660:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005662:	4619      	mov	r1, r3
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f7ff feff 	bl	8005468 <VL53L0X_calc_timeout_us>
 800566a:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005670:	601a      	str	r2, [r3, #0]

	return Status;
 8005672:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8005676:	4618      	mov	r0, r3
 8005678:	3730      	adds	r7, #48	; 0x30
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b08a      	sub	sp, #40	; 0x28
 8005682:	af00      	add	r7, sp, #0
 8005684:	60f8      	str	r0, [r7, #12]
 8005686:	460b      	mov	r3, r1
 8005688:	607a      	str	r2, [r7, #4]
 800568a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800568c:	2300      	movs	r3, #0
 800568e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8005692:	7afb      	ldrb	r3, [r7, #11]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d005      	beq.n	80056a4 <set_sequence_step_timeout+0x26>
 8005698:	7afb      	ldrb	r3, [r7, #11]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d002      	beq.n	80056a4 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800569e:	7afb      	ldrb	r3, [r7, #11]
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d138      	bne.n	8005716 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80056a4:	f107 031b 	add.w	r3, r7, #27
 80056a8:	461a      	mov	r2, r3
 80056aa:	2100      	movs	r1, #0
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f7fd f9a5 	bl	80029fc <VL53L0X_GetVcselPulsePeriod>
 80056b2:	4603      	mov	r3, r0
 80056b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 80056b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d11a      	bne.n	80056f6 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 80056c0:	7efb      	ldrb	r3, [r7, #27]
 80056c2:	461a      	mov	r2, r3
 80056c4:	6879      	ldr	r1, [r7, #4]
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f7ff fea4 	bl	8005414 <VL53L0X_calc_timeout_mclks>
 80056cc:	4603      	mov	r3, r0
 80056ce:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 80056d0:	8bbb      	ldrh	r3, [r7, #28]
 80056d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056d6:	d903      	bls.n	80056e0 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 80056d8:	23ff      	movs	r3, #255	; 0xff
 80056da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80056de:	e004      	b.n	80056ea <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 80056e0:	8bbb      	ldrh	r3, [r7, #28]
 80056e2:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 80056e4:	3b01      	subs	r3, #1
 80056e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80056ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80056f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f040 80ab 	bne.w	8005856 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8005700:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005704:	461a      	mov	r2, r3
 8005706:	2146      	movs	r1, #70	; 0x46
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f001 fc11 	bl	8006f30 <VL53L0X_WrByte>
 800570e:	4603      	mov	r3, r0
 8005710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8005714:	e09f      	b.n	8005856 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8005716:	7afb      	ldrb	r3, [r7, #11]
 8005718:	2b03      	cmp	r3, #3
 800571a:	d135      	bne.n	8005788 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800571c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005720:	2b00      	cmp	r3, #0
 8005722:	d11b      	bne.n	800575c <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005724:	f107 031b 	add.w	r3, r7, #27
 8005728:	461a      	mov	r2, r3
 800572a:	2100      	movs	r1, #0
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f7fd f965 	bl	80029fc <VL53L0X_GetVcselPulsePeriod>
 8005732:	4603      	mov	r3, r0
 8005734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8005738:	7efb      	ldrb	r3, [r7, #27]
 800573a:	461a      	mov	r2, r3
 800573c:	6879      	ldr	r1, [r7, #4]
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f7ff fe68 	bl	8005414 <VL53L0X_calc_timeout_mclks>
 8005744:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8005746:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8005748:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800574a:	4618      	mov	r0, r3
 800574c:	f7ff fe20 	bl	8005390 <VL53L0X_encode_timeout>
 8005750:	4603      	mov	r3, r0
 8005752:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005754:	8b3a      	ldrh	r2, [r7, #24]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800575c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005760:	2b00      	cmp	r3, #0
 8005762:	d108      	bne.n	8005776 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8005764:	8b3b      	ldrh	r3, [r7, #24]
 8005766:	461a      	mov	r2, r3
 8005768:	2151      	movs	r1, #81	; 0x51
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f001 fc04 	bl	8006f78 <VL53L0X_WrWord>
 8005770:	4603      	mov	r3, r0
 8005772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8005776:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800577a:	2b00      	cmp	r3, #0
 800577c:	d16b      	bne.n	8005856 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8005786:	e066      	b.n	8005856 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8005788:	7afb      	ldrb	r3, [r7, #11]
 800578a:	2b04      	cmp	r3, #4
 800578c:	d160      	bne.n	8005850 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800578e:	f107 0310 	add.w	r3, r7, #16
 8005792:	4619      	mov	r1, r3
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f7fd fa3d 	bl	8002c14 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800579a:	2300      	movs	r3, #0
 800579c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800579e:	7cfb      	ldrb	r3, [r7, #19]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d01d      	beq.n	80057e0 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80057a4:	f107 031b 	add.w	r3, r7, #27
 80057a8:	461a      	mov	r2, r3
 80057aa:	2100      	movs	r1, #0
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f7fd f925 	bl	80029fc <VL53L0X_GetVcselPulsePeriod>
 80057b2:	4603      	mov	r3, r0
 80057b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 80057b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10f      	bne.n	80057e0 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 80057c0:	f107 0318 	add.w	r3, r7, #24
 80057c4:	461a      	mov	r2, r3
 80057c6:	2151      	movs	r1, #81	; 0x51
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f001 fc5d 	bl	8007088 <VL53L0X_RdWord>
 80057ce:	4603      	mov	r3, r0
 80057d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 80057d4:	8b3b      	ldrh	r3, [r7, #24]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7ff fe06 	bl	80053e8 <VL53L0X_decode_timeout>
 80057dc:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 80057de:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80057e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d109      	bne.n	80057fc <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80057e8:	f107 031b 	add.w	r3, r7, #27
 80057ec:	461a      	mov	r2, r3
 80057ee:	2101      	movs	r1, #1
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f7fd f903 	bl	80029fc <VL53L0X_GetVcselPulsePeriod>
 80057f6:	4603      	mov	r3, r0
 80057f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80057fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005800:	2b00      	cmp	r3, #0
 8005802:	d128      	bne.n	8005856 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8005804:	7efb      	ldrb	r3, [r7, #27]
 8005806:	461a      	mov	r2, r3
 8005808:	6879      	ldr	r1, [r7, #4]
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f7ff fe02 	bl	8005414 <VL53L0X_calc_timeout_mclks>
 8005810:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8005812:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005814:	6a3a      	ldr	r2, [r7, #32]
 8005816:	4413      	add	r3, r2
 8005818:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800581a:	6a38      	ldr	r0, [r7, #32]
 800581c:	f7ff fdb8 	bl	8005390 <VL53L0X_encode_timeout>
 8005820:	4603      	mov	r3, r0
 8005822:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8005824:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005828:	2b00      	cmp	r3, #0
 800582a:	d108      	bne.n	800583e <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800582c:	8bfb      	ldrh	r3, [r7, #30]
 800582e:	461a      	mov	r2, r3
 8005830:	2171      	movs	r1, #113	; 0x71
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f001 fba0 	bl	8006f78 <VL53L0X_WrWord>
 8005838:	4603      	mov	r3, r0
 800583a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800583e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005842:	2b00      	cmp	r3, #0
 8005844:	d107      	bne.n	8005856 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800584e:	e002      	b.n	8005856 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005850:	23fc      	movs	r3, #252	; 0xfc
 8005852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8005856:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800585a:	4618      	mov	r0, r3
 800585c:	3728      	adds	r7, #40	; 0x28
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b08a      	sub	sp, #40	; 0x28
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
 800586a:	460b      	mov	r3, r1
 800586c:	70fb      	strb	r3, [r7, #3]
 800586e:	4613      	mov	r3, r2
 8005870:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005872:	2300      	movs	r3, #0
 8005874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8005878:	230c      	movs	r3, #12
 800587a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800587e:	2312      	movs	r3, #18
 8005880:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8005884:	2308      	movs	r3, #8
 8005886:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800588a:	230e      	movs	r3, #14
 800588c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8005890:	2300      	movs	r3, #0
 8005892:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8005894:	78bb      	ldrb	r3, [r7, #2]
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b00      	cmp	r3, #0
 800589e:	d003      	beq.n	80058a8 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80058a0:	23fc      	movs	r3, #252	; 0xfc
 80058a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80058a6:	e020      	b.n	80058ea <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 80058a8:	78fb      	ldrb	r3, [r7, #3]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10d      	bne.n	80058ca <VL53L0X_set_vcsel_pulse_period+0x68>
 80058ae:	78ba      	ldrb	r2, [r7, #2]
 80058b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d304      	bcc.n	80058c2 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 80058b8:	78ba      	ldrb	r2, [r7, #2]
 80058ba:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80058be:	429a      	cmp	r2, r3
 80058c0:	d903      	bls.n	80058ca <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80058c2:	23fc      	movs	r3, #252	; 0xfc
 80058c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80058c8:	e00f      	b.n	80058ea <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 80058ca:	78fb      	ldrb	r3, [r7, #3]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d10c      	bne.n	80058ea <VL53L0X_set_vcsel_pulse_period+0x88>
 80058d0:	78ba      	ldrb	r2, [r7, #2]
 80058d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d304      	bcc.n	80058e4 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 80058da:	78ba      	ldrb	r2, [r7, #2]
 80058dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d902      	bls.n	80058ea <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80058e4:	23fc      	movs	r3, #252	; 0xfc
 80058e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 80058ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d002      	beq.n	80058f8 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 80058f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80058f6:	e239      	b.n	8005d6c <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 80058f8:	78fb      	ldrb	r3, [r7, #3]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d150      	bne.n	80059a0 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 80058fe:	78bb      	ldrb	r3, [r7, #2]
 8005900:	2b0c      	cmp	r3, #12
 8005902:	d110      	bne.n	8005926 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8005904:	2218      	movs	r2, #24
 8005906:	2157      	movs	r1, #87	; 0x57
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f001 fb11 	bl	8006f30 <VL53L0X_WrByte>
 800590e:	4603      	mov	r3, r0
 8005910:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8005914:	2208      	movs	r2, #8
 8005916:	2156      	movs	r1, #86	; 0x56
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f001 fb09 	bl	8006f30 <VL53L0X_WrByte>
 800591e:	4603      	mov	r3, r0
 8005920:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005924:	e17f      	b.n	8005c26 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 8005926:	78bb      	ldrb	r3, [r7, #2]
 8005928:	2b0e      	cmp	r3, #14
 800592a:	d110      	bne.n	800594e <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800592c:	2230      	movs	r2, #48	; 0x30
 800592e:	2157      	movs	r1, #87	; 0x57
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f001 fafd 	bl	8006f30 <VL53L0X_WrByte>
 8005936:	4603      	mov	r3, r0
 8005938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800593c:	2208      	movs	r2, #8
 800593e:	2156      	movs	r1, #86	; 0x56
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f001 faf5 	bl	8006f30 <VL53L0X_WrByte>
 8005946:	4603      	mov	r3, r0
 8005948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800594c:	e16b      	b.n	8005c26 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800594e:	78bb      	ldrb	r3, [r7, #2]
 8005950:	2b10      	cmp	r3, #16
 8005952:	d110      	bne.n	8005976 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8005954:	2240      	movs	r2, #64	; 0x40
 8005956:	2157      	movs	r1, #87	; 0x57
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f001 fae9 	bl	8006f30 <VL53L0X_WrByte>
 800595e:	4603      	mov	r3, r0
 8005960:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8005964:	2208      	movs	r2, #8
 8005966:	2156      	movs	r1, #86	; 0x56
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f001 fae1 	bl	8006f30 <VL53L0X_WrByte>
 800596e:	4603      	mov	r3, r0
 8005970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005974:	e157      	b.n	8005c26 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8005976:	78bb      	ldrb	r3, [r7, #2]
 8005978:	2b12      	cmp	r3, #18
 800597a:	f040 8154 	bne.w	8005c26 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800597e:	2250      	movs	r2, #80	; 0x50
 8005980:	2157      	movs	r1, #87	; 0x57
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f001 fad4 	bl	8006f30 <VL53L0X_WrByte>
 8005988:	4603      	mov	r3, r0
 800598a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800598e:	2208      	movs	r2, #8
 8005990:	2156      	movs	r1, #86	; 0x56
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f001 facc 	bl	8006f30 <VL53L0X_WrByte>
 8005998:	4603      	mov	r3, r0
 800599a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800599e:	e142      	b.n	8005c26 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 80059a0:	78fb      	ldrb	r3, [r7, #3]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	f040 813f 	bne.w	8005c26 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 80059a8:	78bb      	ldrb	r3, [r7, #2]
 80059aa:	2b08      	cmp	r3, #8
 80059ac:	d14c      	bne.n	8005a48 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 80059ae:	2210      	movs	r2, #16
 80059b0:	2148      	movs	r1, #72	; 0x48
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f001 fabc 	bl	8006f30 <VL53L0X_WrByte>
 80059b8:	4603      	mov	r3, r0
 80059ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 80059be:	2208      	movs	r2, #8
 80059c0:	2147      	movs	r1, #71	; 0x47
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f001 fab4 	bl	8006f30 <VL53L0X_WrByte>
 80059c8:	4603      	mov	r3, r0
 80059ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80059ce:	2202      	movs	r2, #2
 80059d0:	2132      	movs	r1, #50	; 0x32
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f001 faac 	bl	8006f30 <VL53L0X_WrByte>
 80059d8:	4603      	mov	r3, r0
 80059da:	461a      	mov	r2, r3
 80059dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059e0:	4313      	orrs	r3, r2
 80059e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 80059e6:	220c      	movs	r2, #12
 80059e8:	2130      	movs	r1, #48	; 0x30
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f001 faa0 	bl	8006f30 <VL53L0X_WrByte>
 80059f0:	4603      	mov	r3, r0
 80059f2:	461a      	mov	r2, r3
 80059f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059f8:	4313      	orrs	r3, r2
 80059fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80059fe:	2201      	movs	r2, #1
 8005a00:	21ff      	movs	r1, #255	; 0xff
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f001 fa94 	bl	8006f30 <VL53L0X_WrByte>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a10:	4313      	orrs	r3, r2
 8005a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8005a16:	2230      	movs	r2, #48	; 0x30
 8005a18:	2130      	movs	r1, #48	; 0x30
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f001 fa88 	bl	8006f30 <VL53L0X_WrByte>
 8005a20:	4603      	mov	r3, r0
 8005a22:	461a      	mov	r2, r3
 8005a24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005a2e:	2200      	movs	r2, #0
 8005a30:	21ff      	movs	r1, #255	; 0xff
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f001 fa7c 	bl	8006f30 <VL53L0X_WrByte>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a40:	4313      	orrs	r3, r2
 8005a42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005a46:	e0ee      	b.n	8005c26 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8005a48:	78bb      	ldrb	r3, [r7, #2]
 8005a4a:	2b0a      	cmp	r3, #10
 8005a4c:	d14c      	bne.n	8005ae8 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8005a4e:	2228      	movs	r2, #40	; 0x28
 8005a50:	2148      	movs	r1, #72	; 0x48
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f001 fa6c 	bl	8006f30 <VL53L0X_WrByte>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8005a5e:	2208      	movs	r2, #8
 8005a60:	2147      	movs	r1, #71	; 0x47
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f001 fa64 	bl	8006f30 <VL53L0X_WrByte>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8005a6e:	2203      	movs	r2, #3
 8005a70:	2132      	movs	r1, #50	; 0x32
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f001 fa5c 	bl	8006f30 <VL53L0X_WrByte>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a80:	4313      	orrs	r3, r2
 8005a82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8005a86:	2209      	movs	r2, #9
 8005a88:	2130      	movs	r1, #48	; 0x30
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f001 fa50 	bl	8006f30 <VL53L0X_WrByte>
 8005a90:	4603      	mov	r3, r0
 8005a92:	461a      	mov	r2, r3
 8005a94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	21ff      	movs	r1, #255	; 0xff
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f001 fa44 	bl	8006f30 <VL53L0X_WrByte>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	461a      	mov	r2, r3
 8005aac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	2130      	movs	r1, #48	; 0x30
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f001 fa38 	bl	8006f30 <VL53L0X_WrByte>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005ace:	2200      	movs	r2, #0
 8005ad0:	21ff      	movs	r1, #255	; 0xff
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f001 fa2c 	bl	8006f30 <VL53L0X_WrByte>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	461a      	mov	r2, r3
 8005adc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005ae6:	e09e      	b.n	8005c26 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8005ae8:	78bb      	ldrb	r3, [r7, #2]
 8005aea:	2b0c      	cmp	r3, #12
 8005aec:	d14c      	bne.n	8005b88 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8005aee:	2238      	movs	r2, #56	; 0x38
 8005af0:	2148      	movs	r1, #72	; 0x48
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f001 fa1c 	bl	8006f30 <VL53L0X_WrByte>
 8005af8:	4603      	mov	r3, r0
 8005afa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8005afe:	2208      	movs	r2, #8
 8005b00:	2147      	movs	r1, #71	; 0x47
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f001 fa14 	bl	8006f30 <VL53L0X_WrByte>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8005b0e:	2203      	movs	r2, #3
 8005b10:	2132      	movs	r1, #50	; 0x32
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f001 fa0c 	bl	8006f30 <VL53L0X_WrByte>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b20:	4313      	orrs	r3, r2
 8005b22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8005b26:	2208      	movs	r2, #8
 8005b28:	2130      	movs	r1, #48	; 0x30
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f001 fa00 	bl	8006f30 <VL53L0X_WrByte>
 8005b30:	4603      	mov	r3, r0
 8005b32:	461a      	mov	r2, r3
 8005b34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8005b3e:	2201      	movs	r2, #1
 8005b40:	21ff      	movs	r1, #255	; 0xff
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f001 f9f4 	bl	8006f30 <VL53L0X_WrByte>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b50:	4313      	orrs	r3, r2
 8005b52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8005b56:	2220      	movs	r2, #32
 8005b58:	2130      	movs	r1, #48	; 0x30
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f001 f9e8 	bl	8006f30 <VL53L0X_WrByte>
 8005b60:	4603      	mov	r3, r0
 8005b62:	461a      	mov	r2, r3
 8005b64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005b6e:	2200      	movs	r2, #0
 8005b70:	21ff      	movs	r1, #255	; 0xff
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f001 f9dc 	bl	8006f30 <VL53L0X_WrByte>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b80:	4313      	orrs	r3, r2
 8005b82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005b86:	e04e      	b.n	8005c26 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8005b88:	78bb      	ldrb	r3, [r7, #2]
 8005b8a:	2b0e      	cmp	r3, #14
 8005b8c:	d14b      	bne.n	8005c26 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8005b8e:	2248      	movs	r2, #72	; 0x48
 8005b90:	2148      	movs	r1, #72	; 0x48
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f001 f9cc 	bl	8006f30 <VL53L0X_WrByte>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8005b9e:	2208      	movs	r2, #8
 8005ba0:	2147      	movs	r1, #71	; 0x47
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f001 f9c4 	bl	8006f30 <VL53L0X_WrByte>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8005bae:	2203      	movs	r2, #3
 8005bb0:	2132      	movs	r1, #50	; 0x32
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f001 f9bc 	bl	8006f30 <VL53L0X_WrByte>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	461a      	mov	r2, r3
 8005bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8005bc6:	2207      	movs	r2, #7
 8005bc8:	2130      	movs	r1, #48	; 0x30
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f001 f9b0 	bl	8006f30 <VL53L0X_WrByte>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8005bde:	2201      	movs	r2, #1
 8005be0:	21ff      	movs	r1, #255	; 0xff
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f001 f9a4 	bl	8006f30 <VL53L0X_WrByte>
 8005be8:	4603      	mov	r3, r0
 8005bea:	461a      	mov	r2, r3
 8005bec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	2130      	movs	r1, #48	; 0x30
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f001 f998 	bl	8006f30 <VL53L0X_WrByte>
 8005c00:	4603      	mov	r3, r0
 8005c02:	461a      	mov	r2, r3
 8005c04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005c0e:	2200      	movs	r2, #0
 8005c10:	21ff      	movs	r1, #255	; 0xff
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f001 f98c 	bl	8006f30 <VL53L0X_WrByte>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c20:	4313      	orrs	r3, r2
 8005c22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8005c26:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d17f      	bne.n	8005d2e <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8005c2e:	78bb      	ldrb	r3, [r7, #2]
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7fe fe38 	bl	80048a6 <VL53L0X_encode_vcsel_period>
 8005c36:	4603      	mov	r3, r0
 8005c38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8005c3c:	78fb      	ldrb	r3, [r7, #3]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d002      	beq.n	8005c48 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d045      	beq.n	8005cd2 <VL53L0X_set_vcsel_pulse_period+0x470>
 8005c46:	e06e      	b.n	8005d26 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8005c48:	f107 0314 	add.w	r3, r7, #20
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	2103      	movs	r1, #3
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f7ff fc33 	bl	80054bc <get_sequence_step_timeout>
 8005c56:	4603      	mov	r3, r0
 8005c58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8005c5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d109      	bne.n	8005c78 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8005c64:	f107 0310 	add.w	r3, r7, #16
 8005c68:	461a      	mov	r2, r3
 8005c6a:	2102      	movs	r1, #2
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f7ff fc25 	bl	80054bc <get_sequence_step_timeout>
 8005c72:	4603      	mov	r3, r0
 8005c74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8005c78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d109      	bne.n	8005c94 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8005c80:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005c84:	461a      	mov	r2, r3
 8005c86:	2150      	movs	r1, #80	; 0x50
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f001 f951 	bl	8006f30 <VL53L0X_WrByte>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8005c94:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d108      	bne.n	8005cae <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	2103      	movs	r1, #3
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f7ff fceb 	bl	800567e <set_sequence_step_timeout>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8005cae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d108      	bne.n	8005cc8 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	461a      	mov	r2, r3
 8005cba:	2102      	movs	r1, #2
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f7ff fcde 	bl	800567e <set_sequence_step_timeout>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	78ba      	ldrb	r2, [r7, #2]
 8005ccc:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8005cd0:	e02e      	b.n	8005d30 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8005cd2:	f107 0318 	add.w	r3, r7, #24
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	2104      	movs	r1, #4
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7ff fbee 	bl	80054bc <get_sequence_step_timeout>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8005ce6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d109      	bne.n	8005d02 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8005cee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	2170      	movs	r1, #112	; 0x70
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f001 f91a 	bl	8006f30 <VL53L0X_WrByte>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8005d02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d108      	bne.n	8005d1c <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	2104      	movs	r1, #4
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f7ff fcb4 	bl	800567e <set_sequence_step_timeout>
 8005d16:	4603      	mov	r3, r0
 8005d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	78ba      	ldrb	r2, [r7, #2]
 8005d20:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8005d24:	e004      	b.n	8005d30 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005d26:	23fc      	movs	r3, #252	; 0xfc
 8005d28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005d2c:	e000      	b.n	8005d30 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 8005d2e:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8005d30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d109      	bne.n	8005d4c <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	695b      	ldr	r3, [r3, #20]
 8005d3c:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8005d3e:	69f9      	ldr	r1, [r7, #28]
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f7fc fe1d 	bl	8002980 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8005d46:	4603      	mov	r3, r0
 8005d48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8005d4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d109      	bne.n	8005d68 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 8005d54:	f107 010f 	add.w	r1, r7, #15
 8005d58:	2301      	movs	r3, #1
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f7fe fcbd 	bl	80046dc <VL53L0X_perform_phase_calibration>
 8005d62:	4603      	mov	r3, r0
 8005d64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8005d68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3728      	adds	r7, #40	; 0x28
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	607a      	str	r2, [r7, #4]
 8005d80:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d82:	2300      	movs	r3, #0
 8005d84:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8005d86:	7afb      	ldrb	r3, [r7, #11]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d002      	beq.n	8005d92 <VL53L0X_get_vcsel_pulse_period+0x1e>
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d00a      	beq.n	8005da6 <VL53L0X_get_vcsel_pulse_period+0x32>
 8005d90:	e013      	b.n	8005dba <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8005d92:	f107 0316 	add.w	r3, r7, #22
 8005d96:	461a      	mov	r2, r3
 8005d98:	2150      	movs	r1, #80	; 0x50
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f001 f94a 	bl	8007034 <VL53L0X_RdByte>
 8005da0:	4603      	mov	r3, r0
 8005da2:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8005da4:	e00b      	b.n	8005dbe <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8005da6:	f107 0316 	add.w	r3, r7, #22
 8005daa:	461a      	mov	r2, r3
 8005dac:	2170      	movs	r1, #112	; 0x70
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f001 f940 	bl	8007034 <VL53L0X_RdByte>
 8005db4:	4603      	mov	r3, r0
 8005db6:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8005db8:	e001      	b.n	8005dbe <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005dba:	23fc      	movs	r3, #252	; 0xfc
 8005dbc:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8005dbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d107      	bne.n	8005dd6 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8005dc6:	7dbb      	ldrb	r3, [r7, #22]
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7fe fd59 	bl	8004880 <VL53L0X_decode_vcsel_period>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	701a      	strb	r2, [r3, #0]

	return Status;
 8005dd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3718      	adds	r7, #24
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b092      	sub	sp, #72	; 0x48
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
 8005dea:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005dec:	2300      	movs	r3, #0
 8005dee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8005df2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005df6:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8005df8:	f240 7376 	movw	r3, #1910	; 0x776
 8005dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8005dfe:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8005e02:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8005e04:	f44f 7325 	mov.w	r3, #660	; 0x294
 8005e08:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8005e0a:	f240 234e 	movw	r3, #590	; 0x24e
 8005e0e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8005e10:	f240 23b2 	movw	r3, #690	; 0x2b2
 8005e14:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8005e16:	f44f 7325 	mov.w	r3, #660	; 0x294
 8005e1a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8005e1c:	f240 2326 	movw	r3, #550	; 0x226
 8005e20:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8005e22:	2300      	movs	r3, #0
 8005e24:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8005e26:	f644 6320 	movw	r3, #20000	; 0x4e20
 8005e2a:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8005e30:	683a      	ldr	r2, [r7, #0]
 8005e32:	6a3b      	ldr	r3, [r7, #32]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d205      	bcs.n	8005e44 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005e38:	23fc      	movs	r3, #252	; 0xfc
 8005e3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8005e3e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005e42:	e0aa      	b.n	8005f9a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8005e44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e48:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8005e50:	f107 0314 	add.w	r3, r7, #20
 8005e54:	4619      	mov	r1, r3
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f7fc fedc 	bl	8002c14 <VL53L0X_GetSequenceStepEnables>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8005e62:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d15b      	bne.n	8005f22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8005e6a:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d105      	bne.n	8005e7c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8005e70:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d102      	bne.n	8005e7c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8005e76:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d052      	beq.n	8005f22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8005e7c:	f107 0310 	add.w	r3, r7, #16
 8005e80:	461a      	mov	r2, r3
 8005e82:	2102      	movs	r1, #2
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7ff fb19 	bl	80054bc <get_sequence_step_timeout>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8005e90:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d002      	beq.n	8005e9e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8005e98:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005e9c:	e07d      	b.n	8005f9a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8005e9e:	7d3b      	ldrb	r3, [r7, #20]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00f      	beq.n	8005ec4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8005ea4:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8005ea6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ea8:	4413      	add	r3, r2
 8005eaa:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8005eac:	69fa      	ldr	r2, [r7, #28]
 8005eae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d204      	bcs.n	8005ebe <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8005eb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	643b      	str	r3, [r7, #64]	; 0x40
 8005ebc:	e002      	b.n	8005ec4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005ebe:	23fc      	movs	r3, #252	; 0xfc
 8005ec0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8005ec4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d002      	beq.n	8005ed2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8005ecc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005ed0:	e063      	b.n	8005f9a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8005ed2:	7dbb      	ldrb	r3, [r7, #22]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d011      	beq.n	8005efc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005edc:	4413      	add	r3, r2
 8005ede:	005b      	lsls	r3, r3, #1
 8005ee0:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8005ee2:	69fa      	ldr	r2, [r7, #28]
 8005ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d204      	bcs.n	8005ef4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8005eea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	643b      	str	r3, [r7, #64]	; 0x40
 8005ef2:	e016      	b.n	8005f22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005ef4:	23fc      	movs	r3, #252	; 0xfc
 8005ef6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005efa:	e012      	b.n	8005f22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8005efc:	7d7b      	ldrb	r3, [r7, #21]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00f      	beq.n	8005f22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f06:	4413      	add	r3, r2
 8005f08:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8005f0a:	69fa      	ldr	r2, [r7, #28]
 8005f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d204      	bcs.n	8005f1c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8005f12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	643b      	str	r3, [r7, #64]	; 0x40
 8005f1a:	e002      	b.n	8005f22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005f1c:	23fc      	movs	r3, #252	; 0xfc
 8005f1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8005f22:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d002      	beq.n	8005f30 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8005f2a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005f2e:	e034      	b.n	8005f9a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8005f30:	7dfb      	ldrb	r3, [r7, #23]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d019      	beq.n	8005f6a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8005f36:	f107 030c 	add.w	r3, r7, #12
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	2103      	movs	r1, #3
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7ff fabc 	bl	80054bc <get_sequence_step_timeout>
 8005f44:	4603      	mov	r3, r0
 8005f46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f4e:	4413      	add	r3, r2
 8005f50:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8005f52:	69fa      	ldr	r2, [r7, #28]
 8005f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d204      	bcs.n	8005f64 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8005f5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	643b      	str	r3, [r7, #64]	; 0x40
 8005f62:	e002      	b.n	8005f6a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005f64:	23fc      	movs	r3, #252	; 0xfc
 8005f66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8005f6a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d111      	bne.n	8005f96 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8005f72:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00e      	beq.n	8005f96 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8005f78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8005f80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f82:	2104      	movs	r1, #4
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f7ff fb7a 	bl	800567e <set_sequence_step_timeout>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	683a      	ldr	r2, [r7, #0]
 8005f94:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8005f96:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3748      	adds	r7, #72	; 0x48
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b090      	sub	sp, #64	; 0x40
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
 8005faa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005fac:	2300      	movs	r3, #0
 8005fae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8005fb2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005fb6:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8005fb8:	f240 7376 	movw	r3, #1910	; 0x776
 8005fbc:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8005fbe:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8005fc2:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8005fc4:	f44f 7325 	mov.w	r3, #660	; 0x294
 8005fc8:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8005fca:	f240 234e 	movw	r3, #590	; 0x24e
 8005fce:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8005fd0:	f240 23b2 	movw	r3, #690	; 0x2b2
 8005fd4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8005fd6:	f44f 7325 	mov.w	r3, #660	; 0x294
 8005fda:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8005fdc:	f240 2326 	movw	r3, #550	; 0x226
 8005fe0:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8005fe6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fea:	441a      	add	r2, r3
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8005ff0:	f107 0318 	add.w	r3, r7, #24
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f7fc fe0c 	bl	8002c14 <VL53L0X_GetSequenceStepEnables>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8006002:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006006:	2b00      	cmp	r3, #0
 8006008:	d002      	beq.n	8006010 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800600a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800600e:	e075      	b.n	80060fc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8006010:	7e3b      	ldrb	r3, [r7, #24]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d105      	bne.n	8006022 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8006016:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8006018:	2b00      	cmp	r3, #0
 800601a:	d102      	bne.n	8006022 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800601c:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800601e:	2b00      	cmp	r3, #0
 8006020:	d030      	beq.n	8006084 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8006022:	f107 0310 	add.w	r3, r7, #16
 8006026:	461a      	mov	r2, r3
 8006028:	2102      	movs	r1, #2
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f7ff fa46 	bl	80054bc <get_sequence_step_timeout>
 8006030:	4603      	mov	r3, r0
 8006032:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8006036:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800603a:	2b00      	cmp	r3, #0
 800603c:	d122      	bne.n	8006084 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800603e:	7e3b      	ldrb	r3, [r7, #24]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d007      	beq.n	8006054 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8006048:	6939      	ldr	r1, [r7, #16]
 800604a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800604e:	441a      	add	r2, r3
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8006054:	7ebb      	ldrb	r3, [r7, #26]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d009      	beq.n	800606e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800605e:	6939      	ldr	r1, [r7, #16]
 8006060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006062:	440b      	add	r3, r1
 8006064:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8006066:	441a      	add	r2, r3
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	601a      	str	r2, [r3, #0]
 800606c:	e00a      	b.n	8006084 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800606e:	7e7b      	ldrb	r3, [r7, #25]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d007      	beq.n	8006084 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8006078:	6939      	ldr	r1, [r7, #16]
 800607a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800607e:	441a      	add	r2, r3
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006084:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006088:	2b00      	cmp	r3, #0
 800608a:	d114      	bne.n	80060b6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800608c:	7efb      	ldrb	r3, [r7, #27]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d011      	beq.n	80060b6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8006092:	f107 030c 	add.w	r3, r7, #12
 8006096:	461a      	mov	r2, r3
 8006098:	2103      	movs	r1, #3
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f7ff fa0e 	bl	80054bc <get_sequence_step_timeout>
 80060a0:	4603      	mov	r3, r0
 80060a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 80060aa:	68f9      	ldr	r1, [r7, #12]
 80060ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ae:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 80060b0:	441a      	add	r2, r3
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80060b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d114      	bne.n	80060e8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 80060be:	7f3b      	ldrb	r3, [r7, #28]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d011      	beq.n	80060e8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 80060c4:	f107 0314 	add.w	r3, r7, #20
 80060c8:	461a      	mov	r2, r3
 80060ca:	2104      	movs	r1, #4
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f7ff f9f5 	bl	80054bc <get_sequence_step_timeout>
 80060d2:	4603      	mov	r3, r0
 80060d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 80060dc:	6979      	ldr	r1, [r7, #20]
 80060de:	6a3b      	ldr	r3, [r7, #32]
 80060e0:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 80060e2:	441a      	add	r2, r3
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80060e8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d103      	bne.n	80060f8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80060f8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3740      	adds	r7, #64	; 0x40
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b088      	sub	sp, #32
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800610e:	2300      	movs	r3, #0
 8006110:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8006112:	2300      	movs	r3, #0
 8006114:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8006116:	e0c6      	b.n	80062a6 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	683a      	ldr	r2, [r7, #0]
 800611c:	4413      	add	r3, r2
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	74fb      	strb	r3, [r7, #19]
		Index++;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	3301      	adds	r3, #1
 8006126:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8006128:	7cfb      	ldrb	r3, [r7, #19]
 800612a:	2bff      	cmp	r3, #255	; 0xff
 800612c:	f040 808d 	bne.w	800624a <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	683a      	ldr	r2, [r7, #0]
 8006134:	4413      	add	r3, r2
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	747b      	strb	r3, [r7, #17]
			Index++;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	3301      	adds	r3, #1
 800613e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8006140:	7c7b      	ldrb	r3, [r7, #17]
 8006142:	2b03      	cmp	r3, #3
 8006144:	d87e      	bhi.n	8006244 <VL53L0X_load_tuning_settings+0x140>
 8006146:	a201      	add	r2, pc, #4	; (adr r2, 800614c <VL53L0X_load_tuning_settings+0x48>)
 8006148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800614c:	0800615d 	.word	0x0800615d
 8006150:	08006197 	.word	0x08006197
 8006154:	080061d1 	.word	0x080061d1
 8006158:	0800620b 	.word	0x0800620b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	683a      	ldr	r2, [r7, #0]
 8006160:	4413      	add	r3, r2
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	743b      	strb	r3, [r7, #16]
				Index++;
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	3301      	adds	r3, #1
 800616a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	683a      	ldr	r2, [r7, #0]
 8006170:	4413      	add	r3, r2
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	3301      	adds	r3, #1
 800617a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800617c:	7c3b      	ldrb	r3, [r7, #16]
 800617e:	b29b      	uxth	r3, r3
 8006180:	021b      	lsls	r3, r3, #8
 8006182:	b29a      	uxth	r2, r3
 8006184:	7bfb      	ldrb	r3, [r7, #15]
 8006186:	b29b      	uxth	r3, r3
 8006188:	4413      	add	r3, r2
 800618a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	89ba      	ldrh	r2, [r7, #12]
 8006190:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8006194:	e087      	b.n	80062a6 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	683a      	ldr	r2, [r7, #0]
 800619a:	4413      	add	r3, r2
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	743b      	strb	r3, [r7, #16]
				Index++;
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	3301      	adds	r3, #1
 80061a4:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	683a      	ldr	r2, [r7, #0]
 80061aa:	4413      	add	r3, r2
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	73fb      	strb	r3, [r7, #15]
				Index++;
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	3301      	adds	r3, #1
 80061b4:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80061b6:	7c3b      	ldrb	r3, [r7, #16]
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	021b      	lsls	r3, r3, #8
 80061bc:	b29a      	uxth	r2, r3
 80061be:	7bfb      	ldrb	r3, [r7, #15]
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	4413      	add	r3, r2
 80061c4:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	89ba      	ldrh	r2, [r7, #12]
 80061ca:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 80061ce:	e06a      	b.n	80062a6 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	4413      	add	r3, r2
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	743b      	strb	r3, [r7, #16]
				Index++;
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	3301      	adds	r3, #1
 80061de:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	683a      	ldr	r2, [r7, #0]
 80061e4:	4413      	add	r3, r2
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	73fb      	strb	r3, [r7, #15]
				Index++;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	3301      	adds	r3, #1
 80061ee:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80061f0:	7c3b      	ldrb	r3, [r7, #16]
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	021b      	lsls	r3, r3, #8
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	7bfb      	ldrb	r3, [r7, #15]
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	4413      	add	r3, r2
 80061fe:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	89ba      	ldrh	r2, [r7, #12]
 8006204:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8006208:	e04d      	b.n	80062a6 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	683a      	ldr	r2, [r7, #0]
 800620e:	4413      	add	r3, r2
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	743b      	strb	r3, [r7, #16]
				Index++;
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	3301      	adds	r3, #1
 8006218:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	4413      	add	r3, r2
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	3301      	adds	r3, #1
 8006228:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800622a:	7c3b      	ldrb	r3, [r7, #16]
 800622c:	b29b      	uxth	r3, r3
 800622e:	021b      	lsls	r3, r3, #8
 8006230:	b29a      	uxth	r2, r3
 8006232:	7bfb      	ldrb	r3, [r7, #15]
 8006234:	b29b      	uxth	r3, r3
 8006236:	4413      	add	r3, r2
 8006238:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	89ba      	ldrh	r2, [r7, #12]
 800623e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 8006242:	e030      	b.n	80062a6 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006244:	23fc      	movs	r3, #252	; 0xfc
 8006246:	77fb      	strb	r3, [r7, #31]
 8006248:	e02d      	b.n	80062a6 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800624a:	7cfb      	ldrb	r3, [r7, #19]
 800624c:	2b04      	cmp	r3, #4
 800624e:	d828      	bhi.n	80062a2 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	683a      	ldr	r2, [r7, #0]
 8006254:	4413      	add	r3, r2
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	74bb      	strb	r3, [r7, #18]
			Index++;
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	3301      	adds	r3, #1
 800625e:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8006260:	2300      	movs	r3, #0
 8006262:	61bb      	str	r3, [r7, #24]
 8006264:	e00f      	b.n	8006286 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	683a      	ldr	r2, [r7, #0]
 800626a:	4413      	add	r3, r2
 800626c:	7819      	ldrb	r1, [r3, #0]
 800626e:	f107 0208 	add.w	r2, r7, #8
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	4413      	add	r3, r2
 8006276:	460a      	mov	r2, r1
 8006278:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	3301      	adds	r3, #1
 800627e:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	3301      	adds	r3, #1
 8006284:	61bb      	str	r3, [r7, #24]
 8006286:	7cfb      	ldrb	r3, [r7, #19]
 8006288:	69ba      	ldr	r2, [r7, #24]
 800628a:	429a      	cmp	r2, r3
 800628c:	dbeb      	blt.n	8006266 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800628e:	7cfb      	ldrb	r3, [r7, #19]
 8006290:	f107 0208 	add.w	r2, r7, #8
 8006294:	7cb9      	ldrb	r1, [r7, #18]
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 fdee 	bl	8006e78 <VL53L0X_WriteMulti>
 800629c:	4603      	mov	r3, r0
 800629e:	77fb      	strb	r3, [r7, #31]
 80062a0:	e001      	b.n	80062a6 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80062a2:	23fc      	movs	r3, #252	; 0xfc
 80062a4:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	683a      	ldr	r2, [r7, #0]
 80062aa:	4413      	add	r3, r2
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d004      	beq.n	80062bc <VL53L0X_load_tuning_settings+0x1b8>
 80062b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f43f af2e 	beq.w	8006118 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80062bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3720      	adds	r7, #32
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b088      	sub	sp, #32
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80062d4:	2300      	movs	r3, #0
 80062d6:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 80062de:	f107 0313 	add.w	r3, r7, #19
 80062e2:	4619      	mov	r1, r3
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f7fc fd21 	bl	8002d2c <VL53L0X_GetXTalkCompensationEnable>
 80062ea:	4603      	mov	r3, r0
 80062ec:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 80062ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d111      	bne.n	800631a <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 80062f6:	7cfb      	ldrb	r3, [r7, #19]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00e      	beq.n	800631a <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6a1b      	ldr	r3, [r3, #32]
 8006300:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	8a9b      	ldrh	r3, [r3, #20]
 8006306:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	fb02 f303 	mul.w	r3, r2, r3
 800630e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	3380      	adds	r3, #128	; 0x80
 8006314:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800631a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800631e:	4618      	mov	r0, r3
 8006320:	3720      	adds	r7, #32
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b086      	sub	sp, #24
 800632a:	af00      	add	r7, sp, #0
 800632c:	60f8      	str	r0, [r7, #12]
 800632e:	60b9      	str	r1, [r7, #8]
 8006330:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006332:	2300      	movs	r3, #0
 8006334:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800633e:	f107 0310 	add.w	r3, r7, #16
 8006342:	461a      	mov	r2, r3
 8006344:	68b9      	ldr	r1, [r7, #8]
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f7ff ffbe 	bl	80062c8 <VL53L0X_get_total_xtalk_rate>
 800634c:	4603      	mov	r3, r0
 800634e:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8006350:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d105      	bne.n	8006364 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	441a      	add	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	601a      	str	r2, [r3, #0]

	return Status;
 8006364:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006368:	4618      	mov	r0, r3
 800636a:	3718      	adds	r7, #24
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b09a      	sub	sp, #104	; 0x68
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	607a      	str	r2, [r7, #4]
 800637c:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800637e:	2312      	movs	r3, #18
 8006380:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8006382:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006386:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8006388:	2342      	movs	r3, #66	; 0x42
 800638a:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800638c:	2306      	movs	r3, #6
 800638e:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8006390:	2307      	movs	r3, #7
 8006392:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006394:	2300      	movs	r3, #0
 8006396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 80063a0:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80063a8:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 80063aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063ae:	fb02 f303 	mul.w	r3, r2, r3
 80063b2:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 80063b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b6:	3380      	adds	r3, #128	; 0x80
 80063b8:	0a1b      	lsrs	r3, r3, #8
 80063ba:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 80063bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80063c0:	fb02 f303 	mul.w	r3, r2, r3
 80063c4:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 80063c6:	2300      	movs	r3, #0
 80063c8:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d01a      	beq.n	8006406 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	029b      	lsls	r3, r3, #10
 80063d4:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 80063da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063dc:	4413      	add	r3, r2
 80063de:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 80063e0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e8:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 80063ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80063ec:	4613      	mov	r3, r2
 80063ee:	005b      	lsls	r3, r3, #1
 80063f0:	4413      	add	r3, r2
 80063f2:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 80063f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063f6:	fb03 f303 	mul.w	r3, r3, r3
 80063fa:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 80063fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063fe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006402:	0c1b      	lsrs	r3, r3, #16
 8006404:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800640a:	fb02 f303 	mul.w	r3, r2, r3
 800640e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8006410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006412:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006416:	0c1b      	lsrs	r3, r3, #16
 8006418:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800641a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641c:	fb03 f303 	mul.w	r3, r3, r3
 8006420:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8006422:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006424:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006428:	0c1b      	lsrs	r3, r3, #16
 800642a:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800642c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800642e:	085a      	lsrs	r2, r3, #1
 8006430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006432:	441a      	add	r2, r3
 8006434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006436:	fbb2 f3f3 	udiv	r3, r2, r3
 800643a:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800643c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006440:	fb02 f303 	mul.w	r3, r2, r3
 8006444:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8006446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800644c:	d302      	bcc.n	8006454 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800644e:	4b54      	ldr	r3, [pc, #336]	; (80065a0 <VL53L0X_calc_dmax+0x230>)
 8006450:	663b      	str	r3, [r7, #96]	; 0x60
 8006452:	e015      	b.n	8006480 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8006454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006456:	085a      	lsrs	r2, r3, #1
 8006458:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800645a:	441a      	add	r2, r3
 800645c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800645e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006462:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8006464:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006466:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006468:	fb02 f303 	mul.w	r3, r2, r3
 800646c:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800646e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006470:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006474:	0c1b      	lsrs	r3, r3, #16
 8006476:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8006478:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800647a:	fb03 f303 	mul.w	r3, r3, r3
 800647e:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8006480:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006482:	039b      	lsls	r3, r3, #14
 8006484:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006488:	4a46      	ldr	r2, [pc, #280]	; (80065a4 <VL53L0X_calc_dmax+0x234>)
 800648a:	fba2 2303 	umull	r2, r3, r2, r3
 800648e:	099b      	lsrs	r3, r3, #6
 8006490:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	fb03 f303 	mul.w	r3, r3, r3
 8006498:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800649a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800649c:	fb03 f303 	mul.w	r3, r3, r3
 80064a0:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 80064a2:	6a3b      	ldr	r3, [r7, #32]
 80064a4:	3308      	adds	r3, #8
 80064a6:	091b      	lsrs	r3, r3, #4
 80064a8:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 80064aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ac:	6a3b      	ldr	r3, [r7, #32]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 80064b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064b4:	4613      	mov	r3, r2
 80064b6:	005b      	lsls	r3, r3, #1
 80064b8:	4413      	add	r3, r2
 80064ba:	011b      	lsls	r3, r3, #4
 80064bc:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80064c4:	0b9b      	lsrs	r3, r3, #14
 80064c6:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 80064c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064cc:	4413      	add	r3, r2
 80064ce:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 80064d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064d2:	085b      	lsrs	r3, r3, #1
 80064d4:	69ba      	ldr	r2, [r7, #24]
 80064d6:	4413      	add	r3, r2
 80064d8:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 80064da:	69ba      	ldr	r2, [r7, #24]
 80064dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064de:	fbb2 f3f3 	udiv	r3, r2, r3
 80064e2:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	039b      	lsls	r3, r3, #14
 80064e8:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	085b      	lsrs	r3, r3, #1
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	4413      	add	r3, r2
 80064f2:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064fc:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006502:	fb02 f303 	mul.w	r3, r2, r3
 8006506:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800650e:	4a25      	ldr	r2, [pc, #148]	; (80065a4 <VL53L0X_calc_dmax+0x234>)
 8006510:	fba2 2303 	umull	r2, r3, r2, r3
 8006514:	099b      	lsrs	r3, r3, #6
 8006516:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	011b      	lsls	r3, r3, #4
 800651c:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006524:	4a1f      	ldr	r2, [pc, #124]	; (80065a4 <VL53L0X_calc_dmax+0x234>)
 8006526:	fba2 2303 	umull	r2, r3, r2, r3
 800652a:	099b      	lsrs	r3, r3, #6
 800652c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800652e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006530:	3380      	adds	r3, #128	; 0x80
 8006532:	0a1b      	lsrs	r3, r3, #8
 8006534:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d008      	beq.n	800654e <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	085a      	lsrs	r2, r3, #1
 8006540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006542:	441a      	add	r2, r3
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	fbb2 f3f3 	udiv	r3, r2, r3
 800654a:	65bb      	str	r3, [r7, #88]	; 0x58
 800654c:	e001      	b.n	8006552 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800654e:	2300      	movs	r3, #0
 8006550:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8006552:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006554:	f7fe f9ba 	bl	80048cc <VL53L0X_isqrt>
 8006558:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d008      	beq.n	8006572 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	085a      	lsrs	r2, r3, #1
 8006564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006566:	441a      	add	r2, r3
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	fbb2 f3f3 	udiv	r3, r2, r3
 800656e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006570:	e001      	b.n	8006576 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8006572:	2300      	movs	r3, #0
 8006574:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8006576:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8006578:	f7fe f9a8 	bl	80048cc <VL53L0X_isqrt>
 800657c:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800657e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006580:	693a      	ldr	r2, [r7, #16]
 8006582:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006588:	429a      	cmp	r2, r3
 800658a:	d902      	bls.n	8006592 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800658c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800658e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006590:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8006592:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8006596:	4618      	mov	r0, r3
 8006598:	3768      	adds	r7, #104	; 0x68
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	fff00000 	.word	0xfff00000
 80065a4:	10624dd3 	.word	0x10624dd3

080065a8 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b0b4      	sub	sp, #208	; 0xd0
 80065ac:	af04      	add	r7, sp, #16
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	607a      	str	r2, [r7, #4]
 80065b4:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 80065b6:	f44f 7348 	mov.w	r3, #800	; 0x320
 80065ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 80065be:	f44f 7316 	mov.w	r3, #600	; 0x258
 80065c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 80065c6:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 80065ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 80065ce:	f241 235c 	movw	r3, #4700	; 0x125c
 80065d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 80065d6:	4b9e      	ldr	r3, [pc, #632]	; (8006850 <VL53L0X_calc_sigma_estimate+0x2a8>)
 80065d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 80065dc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80065e0:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 80065e2:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 80065e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ee:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 80065f0:	4b98      	ldr	r3, [pc, #608]	; (8006854 <VL53L0X_calc_sigma_estimate+0x2ac>)
 80065f2:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 80065f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065f8:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 80065fa:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 80065fe:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8006600:	f240 6377 	movw	r3, #1655	; 0x677
 8006604:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006606:	2300      	movs	r3, #0
 8006608:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6a1b      	ldr	r3, [r3, #32]
 8006610:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800661a:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800661e:	0c1b      	lsrs	r3, r3, #16
 8006620:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8006628:	f107 0310 	add.w	r3, r7, #16
 800662c:	461a      	mov	r2, r3
 800662e:	68b9      	ldr	r1, [r7, #8]
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	f7ff fe78 	bl	8006326 <VL53L0X_get_total_signal_rate>
 8006636:	4603      	mov	r3, r0
 8006638:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800663c:	f107 0314 	add.w	r3, r7, #20
 8006640:	461a      	mov	r2, r3
 8006642:	68b9      	ldr	r1, [r7, #8]
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f7ff fe3f 	bl	80062c8 <VL53L0X_get_total_xtalk_rate>
 800664a:	4603      	mov	r3, r0
 800664c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006656:	fb02 f303 	mul.w	r3, r2, r3
 800665a:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800665c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800665e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006662:	0c1b      	lsrs	r3, r3, #16
 8006664:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800666c:	fb02 f303 	mul.w	r3, r2, r3
 8006670:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8006674:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8006678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800667a:	429a      	cmp	r2, r3
 800667c:	d902      	bls.n	8006684 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800667e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006680:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8006684:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8006688:	2b00      	cmp	r3, #0
 800668a:	d168      	bne.n	800675e <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006692:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800669c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80066a0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80066a4:	461a      	mov	r2, r3
 80066a6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f7fe feb2 	bl	8005414 <VL53L0X_calc_timeout_mclks>
 80066b0:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80066b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 80066c2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80066c6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80066ca:	461a      	mov	r2, r3
 80066cc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80066d0:	68f8      	ldr	r0, [r7, #12]
 80066d2:	f7fe fe9f 	bl	8005414 <VL53L0X_calc_timeout_mclks>
 80066d6:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 80066d8:	2303      	movs	r3, #3
 80066da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 80066de:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80066e2:	2b08      	cmp	r3, #8
 80066e4:	d102      	bne.n	80066ec <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 80066e6:	2302      	movs	r3, #2
 80066e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 80066ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066f0:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 80066f2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80066f6:	fb02 f303 	mul.w	r3, r2, r3
 80066fa:	02db      	lsls	r3, r3, #11
 80066fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8006700:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006704:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006708:	4a53      	ldr	r2, [pc, #332]	; (8006858 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800670a:	fba2 2303 	umull	r2, r3, r2, r3
 800670e:	099b      	lsrs	r3, r3, #6
 8006710:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8006714:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006718:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800671a:	fb02 f303 	mul.w	r3, r2, r3
 800671e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8006722:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006726:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800672a:	4a4b      	ldr	r2, [pc, #300]	; (8006858 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800672c:	fba2 2303 	umull	r2, r3, r2, r3
 8006730:	099b      	lsrs	r3, r3, #6
 8006732:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	3380      	adds	r3, #128	; 0x80
 800673a:	0a1b      	lsrs	r3, r3, #8
 800673c:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006744:	fb02 f303 	mul.w	r3, r2, r3
 8006748:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800674c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006750:	3380      	adds	r3, #128	; 0x80
 8006752:	0a1b      	lsrs	r3, r3, #8
 8006754:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	021b      	lsls	r3, r3, #8
 800675c:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800675e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8006762:	2b00      	cmp	r3, #0
 8006764:	d002      	beq.n	800676c <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 8006766:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800676a:	e15e      	b.n	8006a2a <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800676c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800676e:	2b00      	cmp	r3, #0
 8006770:	d10c      	bne.n	800678c <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006778:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006780:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	2200      	movs	r2, #0
 8006788:	601a      	str	r2, [r3, #0]
 800678a:	e14c      	b.n	8006a26 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800678c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006790:	2b00      	cmp	r3, #0
 8006792:	d102      	bne.n	800679a <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8006794:	2301      	movs	r3, #1
 8006796:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800679a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800679e:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 80067a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067a2:	041a      	lsls	r2, r3, #16
 80067a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 80067ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80067b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d902      	bls.n	80067be <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 80067b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 80067be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80067c2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80067c6:	fb02 f303 	mul.w	r3, r2, r3
 80067ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 80067ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80067d2:	4613      	mov	r3, r2
 80067d4:	005b      	lsls	r3, r3, #1
 80067d6:	4413      	add	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4618      	mov	r0, r3
 80067dc:	f7fe f876 	bl	80048cc <VL53L0X_isqrt>
 80067e0:	4603      	mov	r3, r0
 80067e2:	005b      	lsls	r3, r3, #1
 80067e4:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	891b      	ldrh	r3, [r3, #8]
 80067ea:	461a      	mov	r2, r3
 80067ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067ee:	fb02 f303 	mul.w	r3, r2, r3
 80067f2:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80067f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067f6:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 80067f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067fc:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80067fe:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8006800:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8006804:	4a14      	ldr	r2, [pc, #80]	; (8006858 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8006806:	fba2 2303 	umull	r2, r3, r2, r3
 800680a:	099b      	lsrs	r3, r3, #6
 800680c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800680e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006810:	041b      	lsls	r3, r3, #16
 8006812:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006816:	4a10      	ldr	r2, [pc, #64]	; (8006858 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8006818:	fba2 2303 	umull	r2, r3, r2, r3
 800681c:	099b      	lsrs	r3, r3, #6
 800681e:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8006820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006822:	021b      	lsls	r3, r3, #8
 8006824:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8006826:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682a:	fbb2 f3f3 	udiv	r3, r2, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	bfb8      	it	lt
 8006832:	425b      	neglt	r3, r3
 8006834:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8006836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006838:	021b      	lsls	r3, r3, #8
 800683a:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	7e1b      	ldrb	r3, [r3, #24]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00b      	beq.n	800685c <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 8006844:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006848:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800684c:	e033      	b.n	80068b6 <VL53L0X_calc_sigma_estimate+0x30e>
 800684e:	bf00      	nop
 8006850:	028f87ae 	.word	0x028f87ae
 8006854:	0006999a 	.word	0x0006999a
 8006858:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800685c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800685e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006862:	fbb2 f3f3 	udiv	r3, r2, r3
 8006866:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800686a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800686c:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8006870:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006874:	fb02 f303 	mul.w	r3, r2, r3
 8006878:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800687c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006880:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006882:	4413      	add	r3, r2
 8006884:	0c1b      	lsrs	r3, r3, #16
 8006886:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800688a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800688e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8006892:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 8006896:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800689a:	085b      	lsrs	r3, r3, #1
 800689c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 80068a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068a4:	fb03 f303 	mul.w	r3, r3, r3
 80068a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 80068ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068b0:	0b9b      	lsrs	r3, r3, #14
 80068b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 80068b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068bc:	fb02 f303 	mul.w	r3, r2, r3
 80068c0:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 80068c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80068c8:	0c1b      	lsrs	r3, r3, #16
 80068ca:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 80068cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ce:	fb03 f303 	mul.w	r3, r3, r3
 80068d2:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 80068d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80068d8:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 80068da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068dc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80068e0:	0c1b      	lsrs	r3, r3, #16
 80068e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 80068e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e6:	fb03 f303 	mul.w	r3, r3, r3
 80068ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 80068ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f0:	4413      	add	r3, r2
 80068f2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 80068f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068f6:	f7fd ffe9 	bl	80048cc <VL53L0X_isqrt>
 80068fa:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 80068fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fe:	041b      	lsls	r3, r3, #16
 8006900:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8006902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006904:	3332      	adds	r3, #50	; 0x32
 8006906:	4a4b      	ldr	r2, [pc, #300]	; (8006a34 <VL53L0X_calc_sigma_estimate+0x48c>)
 8006908:	fba2 2303 	umull	r2, r3, r2, r3
 800690c:	095a      	lsrs	r2, r3, #5
 800690e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006910:	fbb2 f3f3 	udiv	r3, r2, r3
 8006914:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8006918:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800691c:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8006920:	fb02 f303 	mul.w	r3, r2, r3
 8006924:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8006928:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800692c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006930:	3308      	adds	r3, #8
 8006932:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 8006936:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800693a:	4a3f      	ldr	r2, [pc, #252]	; (8006a38 <VL53L0X_calc_sigma_estimate+0x490>)
 800693c:	fba2 2303 	umull	r2, r3, r2, r3
 8006940:	0b5b      	lsrs	r3, r3, #13
 8006942:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8006946:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800694a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800694c:	429a      	cmp	r2, r3
 800694e:	d902      	bls.n	8006956 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8006950:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006952:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8006956:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800695a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800695e:	4413      	add	r3, r2
 8006960:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8006964:	4a35      	ldr	r2, [pc, #212]	; (8006a3c <VL53L0X_calc_sigma_estimate+0x494>)
 8006966:	fba2 2303 	umull	r2, r3, r2, r3
 800696a:	099b      	lsrs	r3, r3, #6
 800696c:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800696e:	6a3b      	ldr	r3, [r7, #32]
 8006970:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8006972:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006976:	441a      	add	r2, r3
 8006978:	6a3b      	ldr	r3, [r7, #32]
 800697a:	fbb2 f3f3 	udiv	r3, r2, r3
 800697e:	4618      	mov	r0, r3
 8006980:	f7fd ffa4 	bl	80048cc <VL53L0X_isqrt>
 8006984:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	021b      	lsls	r3, r3, #8
 800698a:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006992:	4a2a      	ldr	r2, [pc, #168]	; (8006a3c <VL53L0X_calc_sigma_estimate+0x494>)
 8006994:	fba2 2303 	umull	r2, r3, r2, r3
 8006998:	099b      	lsrs	r3, r3, #6
 800699a:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800699c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80069a0:	fb03 f303 	mul.w	r3, r3, r3
 80069a4:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	fb03 f303 	mul.w	r3, r3, r3
 80069ac:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 80069ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b2:	4413      	add	r3, r2
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7fd ff89 	bl	80048cc <VL53L0X_isqrt>
 80069ba:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80069c2:	fb02 f303 	mul.w	r3, r2, r3
 80069c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 80069ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d009      	beq.n	80069e4 <VL53L0X_calc_sigma_estimate+0x43c>
 80069d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d005      	beq.n	80069e4 <VL53L0X_calc_sigma_estimate+0x43c>
 80069d8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80069dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d903      	bls.n	80069ec <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 80069e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80069e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80069f2:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 80069fe:	6939      	ldr	r1, [r7, #16]
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	9303      	str	r3, [sp, #12]
 8006a04:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006a08:	9302      	str	r3, [sp, #8]
 8006a0a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006a0e:	9301      	str	r3, [sp, #4]
 8006a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a12:	9300      	str	r3, [sp, #0]
 8006a14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f7ff fca8 	bl	8006370 <VL53L0X_calc_dmax>
 8006a20:	4603      	mov	r3, r0
 8006a22:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006a26:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	37c0      	adds	r7, #192	; 0xc0
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	51eb851f 	.word	0x51eb851f
 8006a38:	d1b71759 	.word	0xd1b71759
 8006a3c:	10624dd3 	.word	0x10624dd3

08006a40 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b090      	sub	sp, #64	; 0x40
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	607a      	str	r2, [r7, #4]
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	72fb      	strb	r3, [r7, #11]
 8006a50:	4613      	mov	r3, r2
 8006a52:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a54:	2300      	movs	r3, #0
 8006a56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8006a60:	2300      	movs	r3, #0
 8006a62:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8006a66:	2300      	movs	r3, #0
 8006a68:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8006a72:	2300      	movs	r3, #0
 8006a74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8006a84:	2300      	movs	r3, #0
 8006a86:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8006a92:	7afb      	ldrb	r3, [r7, #11]
 8006a94:	10db      	asrs	r3, r3, #3
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	f003 030f 	and.w	r3, r3, #15
 8006a9c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8006aa0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d017      	beq.n	8006ad8 <VL53L0X_get_pal_range_status+0x98>
 8006aa8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006aac:	2b05      	cmp	r3, #5
 8006aae:	d013      	beq.n	8006ad8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8006ab0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006ab4:	2b07      	cmp	r3, #7
 8006ab6:	d00f      	beq.n	8006ad8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8006ab8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006abc:	2b0c      	cmp	r3, #12
 8006abe:	d00b      	beq.n	8006ad8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8006ac0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006ac4:	2b0d      	cmp	r3, #13
 8006ac6:	d007      	beq.n	8006ad8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8006ac8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006acc:	2b0e      	cmp	r3, #14
 8006ace:	d003      	beq.n	8006ad8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8006ad0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006ad4:	2b0f      	cmp	r3, #15
 8006ad6:	d103      	bne.n	8006ae0 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8006ade:	e002      	b.n	8006ae6 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8006ae6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d109      	bne.n	8006b02 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8006aee:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8006af2:	461a      	mov	r2, r3
 8006af4:	2100      	movs	r1, #0
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f7fc f9ec 	bl	8002ed4 <VL53L0X_GetLimitCheckEnable>
 8006afc:	4603      	mov	r3, r0
 8006afe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8006b02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d02e      	beq.n	8006b68 <VL53L0X_get_pal_range_status+0x128>
 8006b0a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d12a      	bne.n	8006b68 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8006b12:	f107 0310 	add.w	r3, r7, #16
 8006b16:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006b1a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f7ff fd43 	bl	80065a8 <VL53L0X_calc_sigma_estimate>
 8006b22:	4603      	mov	r3, r0
 8006b24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8006b28:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d103      	bne.n	8006b38 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b36:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8006b38:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d113      	bne.n	8006b68 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8006b40:	f107 0320 	add.w	r3, r7, #32
 8006b44:	461a      	mov	r2, r3
 8006b46:	2100      	movs	r1, #0
 8006b48:	68f8      	ldr	r0, [r7, #12]
 8006b4a:	f7fc fa49 	bl	8002fe0 <VL53L0X_GetLimitCheckValue>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8006b54:	6a3b      	ldr	r3, [r7, #32]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d006      	beq.n	8006b68 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 8006b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b5c:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d902      	bls.n	8006b68 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8006b62:	2301      	movs	r3, #1
 8006b64:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8006b68:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d109      	bne.n	8006b84 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8006b70:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8006b74:	461a      	mov	r2, r3
 8006b76:	2102      	movs	r1, #2
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f7fc f9ab 	bl	8002ed4 <VL53L0X_GetLimitCheckEnable>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8006b84:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d044      	beq.n	8006c16 <VL53L0X_get_pal_range_status+0x1d6>
 8006b8c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d140      	bne.n	8006c16 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8006b94:	f107 031c 	add.w	r3, r7, #28
 8006b98:	461a      	mov	r2, r3
 8006b9a:	2102      	movs	r1, #2
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f7fc fa1f 	bl	8002fe0 <VL53L0X_GetLimitCheckValue>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8006ba8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d107      	bne.n	8006bc0 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	21ff      	movs	r1, #255	; 0xff
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f000 f9bb 	bl	8006f30 <VL53L0X_WrByte>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8006bc0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d109      	bne.n	8006bdc <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8006bc8:	f107 0316 	add.w	r3, r7, #22
 8006bcc:	461a      	mov	r2, r3
 8006bce:	21b6      	movs	r1, #182	; 0xb6
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f000 fa59 	bl	8007088 <VL53L0X_RdWord>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8006bdc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d107      	bne.n	8006bf4 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006be4:	2200      	movs	r2, #0
 8006be6:	21ff      	movs	r1, #255	; 0xff
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f000 f9a1 	bl	8006f30 <VL53L0X_WrByte>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8006bf4:	8afb      	ldrh	r3, [r7, #22]
 8006bf6:	025b      	lsls	r3, r3, #9
 8006bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bfe:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d006      	beq.n	8006c16 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8006c08:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8006c0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d902      	bls.n	8006c16 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8006c10:	2301      	movs	r3, #1
 8006c12:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8006c16:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d109      	bne.n	8006c32 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8006c1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c22:	461a      	mov	r2, r3
 8006c24:	2103      	movs	r1, #3
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f7fc f954 	bl	8002ed4 <VL53L0X_GetLimitCheckEnable>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8006c32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d023      	beq.n	8006c82 <VL53L0X_get_pal_range_status+0x242>
 8006c3a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d11f      	bne.n	8006c82 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8006c42:	893b      	ldrh	r3, [r7, #8]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d102      	bne.n	8006c4e <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8006c4c:	e005      	b.n	8006c5a <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	021a      	lsls	r2, r3, #8
 8006c52:	893b      	ldrh	r3, [r7, #8]
 8006c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c58:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8006c5a:	f107 0318 	add.w	r3, r7, #24
 8006c5e:	461a      	mov	r2, r3
 8006c60:	2103      	movs	r1, #3
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	f7fc f9bc 	bl	8002fe0 <VL53L0X_GetLimitCheckValue>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d006      	beq.n	8006c82 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8006c74:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8006c76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d202      	bcs.n	8006c82 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006c82:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d14a      	bne.n	8006d20 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 8006c8a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d103      	bne.n	8006c9a <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8006c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c94:	22ff      	movs	r2, #255	; 0xff
 8006c96:	701a      	strb	r2, [r3, #0]
 8006c98:	e042      	b.n	8006d20 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 8006c9a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d007      	beq.n	8006cb2 <VL53L0X_get_pal_range_status+0x272>
 8006ca2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d003      	beq.n	8006cb2 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 8006caa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	d103      	bne.n	8006cba <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8006cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cb4:	2205      	movs	r2, #5
 8006cb6:	701a      	strb	r2, [r3, #0]
 8006cb8:	e032      	b.n	8006d20 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 8006cba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006cbe:	2b06      	cmp	r3, #6
 8006cc0:	d003      	beq.n	8006cca <VL53L0X_get_pal_range_status+0x28a>
 8006cc2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006cc6:	2b09      	cmp	r3, #9
 8006cc8:	d103      	bne.n	8006cd2 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8006cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ccc:	2204      	movs	r2, #4
 8006cce:	701a      	strb	r2, [r3, #0]
 8006cd0:	e026      	b.n	8006d20 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 8006cd2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006cd6:	2b08      	cmp	r3, #8
 8006cd8:	d007      	beq.n	8006cea <VL53L0X_get_pal_range_status+0x2aa>
 8006cda:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006cde:	2b0a      	cmp	r3, #10
 8006ce0:	d003      	beq.n	8006cea <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8006ce2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d103      	bne.n	8006cf2 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8006cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cec:	2203      	movs	r2, #3
 8006cee:	701a      	strb	r2, [r3, #0]
 8006cf0:	e016      	b.n	8006d20 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 8006cf2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006cf6:	2b04      	cmp	r3, #4
 8006cf8:	d003      	beq.n	8006d02 <VL53L0X_get_pal_range_status+0x2c2>
 8006cfa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d103      	bne.n	8006d0a <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8006d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d04:	2202      	movs	r2, #2
 8006d06:	701a      	strb	r2, [r3, #0]
 8006d08:	e00a      	b.n	8006d20 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 8006d0a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d103      	bne.n	8006d1a <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8006d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d14:	2201      	movs	r2, #1
 8006d16:	701a      	strb	r2, [r3, #0]
 8006d18:	e002      	b.n	8006d20 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8006d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8006d20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d102      	bne.n	8006d2e <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8006d28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8006d2e:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8006d32:	461a      	mov	r2, r3
 8006d34:	2101      	movs	r1, #1
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f7fc f8cc 	bl	8002ed4 <VL53L0X_GetLimitCheckEnable>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8006d42:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d14f      	bne.n	8006dea <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8006d4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d003      	beq.n	8006d5a <VL53L0X_get_pal_range_status+0x31a>
 8006d52:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d103      	bne.n	8006d62 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d60:	e002      	b.n	8006d68 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 8006d62:	2300      	movs	r3, #0
 8006d64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8006d6e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8006d72:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006d76:	2b04      	cmp	r3, #4
 8006d78:	d003      	beq.n	8006d82 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8006d7a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d103      	bne.n	8006d8a <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8006d82:	2301      	movs	r3, #1
 8006d84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d88:	e002      	b.n	8006d90 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8006d96:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8006d9a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d003      	beq.n	8006daa <VL53L0X_get_pal_range_status+0x36a>
 8006da2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d103      	bne.n	8006db2 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8006daa:	2301      	movs	r3, #1
 8006dac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006db0:	e002      	b.n	8006db8 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8006db2:	2300      	movs	r3, #0
 8006db4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8006dbe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8006dc2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d003      	beq.n	8006dd2 <VL53L0X_get_pal_range_status+0x392>
 8006dca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d103      	bne.n	8006dda <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dd8:	e002      	b.n	8006de0 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8006de6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006dea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3740      	adds	r7, #64	; 0x40
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b088      	sub	sp, #32
 8006dfa:	af02      	add	r7, sp, #8
 8006dfc:	60f8      	str	r0, [r7, #12]
 8006dfe:	60b9      	str	r1, [r7, #8]
 8006e00:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	330a      	adds	r3, #10
 8006e06:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8006e14:	b299      	uxth	r1, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	9300      	str	r3, [sp, #0]
 8006e1e:	4613      	mov	r3, r2
 8006e20:	68ba      	ldr	r2, [r7, #8]
 8006e22:	f002 f8d1 	bl	8008fc8 <HAL_I2C_Master_Transmit>
 8006e26:	4603      	mov	r3, r0
 8006e28:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8006e2a:	693b      	ldr	r3, [r7, #16]
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3718      	adds	r7, #24
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b088      	sub	sp, #32
 8006e38:	af02      	add	r7, sp, #8
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	330a      	adds	r3, #10
 8006e44:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8006e52:	f043 0301 	orr.w	r3, r3, #1
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	b299      	uxth	r1, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	9300      	str	r3, [sp, #0]
 8006e62:	4613      	mov	r3, r2
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	f002 f9ad 	bl	80091c4 <HAL_I2C_Master_Receive>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8006e6e:	693b      	ldr	r3, [r7, #16]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3718      	adds	r7, #24
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b086      	sub	sp, #24
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	607a      	str	r2, [r7, #4]
 8006e82:	603b      	str	r3, [r7, #0]
 8006e84:	460b      	mov	r3, r1
 8006e86:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	2b3f      	cmp	r3, #63	; 0x3f
 8006e90:	d902      	bls.n	8006e98 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8006e92:	f06f 0303 	mvn.w	r3, #3
 8006e96:	e016      	b.n	8006ec6 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8006e98:	4a0d      	ldr	r2, [pc, #52]	; (8006ed0 <VL53L0X_WriteMulti+0x58>)
 8006e9a:	7afb      	ldrb	r3, [r7, #11]
 8006e9c:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8006e9e:	683a      	ldr	r2, [r7, #0]
 8006ea0:	6879      	ldr	r1, [r7, #4]
 8006ea2:	480c      	ldr	r0, [pc, #48]	; (8006ed4 <VL53L0X_WriteMulti+0x5c>)
 8006ea4:	f005 fc32 	bl	800c70c <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	461a      	mov	r2, r3
 8006eae:	4908      	ldr	r1, [pc, #32]	; (8006ed0 <VL53L0X_WriteMulti+0x58>)
 8006eb0:	68f8      	ldr	r0, [r7, #12]
 8006eb2:	f7ff ffa0 	bl	8006df6 <_I2CWrite>
 8006eb6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006ebe:	23ec      	movs	r3, #236	; 0xec
 8006ec0:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8006ec2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3718      	adds	r7, #24
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	20000c90 	.word	0x20000c90
 8006ed4:	20000c91 	.word	0x20000c91

08006ed8 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b086      	sub	sp, #24
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	607a      	str	r2, [r7, #4]
 8006ee2:	603b      	str	r3, [r7, #0]
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8006eec:	f107 030b 	add.w	r3, r7, #11
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f7ff ff7e 	bl	8006df6 <_I2CWrite>
 8006efa:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d002      	beq.n	8006f08 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006f02:	23ec      	movs	r3, #236	; 0xec
 8006f04:	75fb      	strb	r3, [r7, #23]
        goto done;
 8006f06:	e00c      	b.n	8006f22 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8006f08:	683a      	ldr	r2, [r7, #0]
 8006f0a:	6879      	ldr	r1, [r7, #4]
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f7ff ff91 	bl	8006e34 <_I2CRead>
 8006f12:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d002      	beq.n	8006f20 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006f1a:	23ec      	movs	r3, #236	; 0xec
 8006f1c:	75fb      	strb	r3, [r7, #23]
 8006f1e:	e000      	b.n	8006f22 <VL53L0X_ReadMulti+0x4a>
    }
done:
 8006f20:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8006f22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3718      	adds	r7, #24
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
	...

08006f30 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	460b      	mov	r3, r1
 8006f3a:	70fb      	strb	r3, [r7, #3]
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f40:	2300      	movs	r3, #0
 8006f42:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8006f44:	4a0b      	ldr	r2, [pc, #44]	; (8006f74 <VL53L0X_WrByte+0x44>)
 8006f46:	78fb      	ldrb	r3, [r7, #3]
 8006f48:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8006f4a:	4a0a      	ldr	r2, [pc, #40]	; (8006f74 <VL53L0X_WrByte+0x44>)
 8006f4c:	78bb      	ldrb	r3, [r7, #2]
 8006f4e:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8006f50:	2202      	movs	r2, #2
 8006f52:	4908      	ldr	r1, [pc, #32]	; (8006f74 <VL53L0X_WrByte+0x44>)
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f7ff ff4e 	bl	8006df6 <_I2CWrite>
 8006f5a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d001      	beq.n	8006f66 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006f62:	23ec      	movs	r3, #236	; 0xec
 8006f64:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8006f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	20000c90 	.word	0x20000c90

08006f78 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	460b      	mov	r3, r1
 8006f82:	70fb      	strb	r3, [r7, #3]
 8006f84:	4613      	mov	r3, r2
 8006f86:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8006f8c:	4a0e      	ldr	r2, [pc, #56]	; (8006fc8 <VL53L0X_WrWord+0x50>)
 8006f8e:	78fb      	ldrb	r3, [r7, #3]
 8006f90:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8006f92:	883b      	ldrh	r3, [r7, #0]
 8006f94:	0a1b      	lsrs	r3, r3, #8
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	b2da      	uxtb	r2, r3
 8006f9a:	4b0b      	ldr	r3, [pc, #44]	; (8006fc8 <VL53L0X_WrWord+0x50>)
 8006f9c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8006f9e:	883b      	ldrh	r3, [r7, #0]
 8006fa0:	b2da      	uxtb	r2, r3
 8006fa2:	4b09      	ldr	r3, [pc, #36]	; (8006fc8 <VL53L0X_WrWord+0x50>)
 8006fa4:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8006fa6:	2203      	movs	r2, #3
 8006fa8:	4907      	ldr	r1, [pc, #28]	; (8006fc8 <VL53L0X_WrWord+0x50>)
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7ff ff23 	bl	8006df6 <_I2CWrite>
 8006fb0:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d001      	beq.n	8006fbc <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006fb8:	23ec      	movs	r3, #236	; 0xec
 8006fba:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8006fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	20000c90 	.word	0x20000c90

08006fcc <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	4608      	mov	r0, r1
 8006fd6:	4611      	mov	r1, r2
 8006fd8:	461a      	mov	r2, r3
 8006fda:	4603      	mov	r3, r0
 8006fdc:	70fb      	strb	r3, [r7, #3]
 8006fde:	460b      	mov	r3, r1
 8006fe0:	70bb      	strb	r3, [r7, #2]
 8006fe2:	4613      	mov	r3, r2
 8006fe4:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8006fea:	f107 020e 	add.w	r2, r7, #14
 8006fee:	78fb      	ldrb	r3, [r7, #3]
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 f81e 	bl	8007034 <VL53L0X_RdByte>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8006ffc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d110      	bne.n	8007026 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8007004:	7bba      	ldrb	r2, [r7, #14]
 8007006:	78bb      	ldrb	r3, [r7, #2]
 8007008:	4013      	ands	r3, r2
 800700a:	b2da      	uxtb	r2, r3
 800700c:	787b      	ldrb	r3, [r7, #1]
 800700e:	4313      	orrs	r3, r2
 8007010:	b2db      	uxtb	r3, r3
 8007012:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8007014:	7bba      	ldrb	r2, [r7, #14]
 8007016:	78fb      	ldrb	r3, [r7, #3]
 8007018:	4619      	mov	r1, r3
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f7ff ff88 	bl	8006f30 <VL53L0X_WrByte>
 8007020:	4603      	mov	r3, r0
 8007022:	73fb      	strb	r3, [r7, #15]
 8007024:	e000      	b.n	8007028 <VL53L0X_UpdateByte+0x5c>
        goto done;
 8007026:	bf00      	nop
done:
    return Status;
 8007028:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8007034:	b580      	push	{r7, lr}
 8007036:	b086      	sub	sp, #24
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	460b      	mov	r3, r1
 800703e:	607a      	str	r2, [r7, #4]
 8007040:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007042:	2300      	movs	r3, #0
 8007044:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8007046:	f107 030b 	add.w	r3, r7, #11
 800704a:	2201      	movs	r2, #1
 800704c:	4619      	mov	r1, r3
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f7ff fed1 	bl	8006df6 <_I2CWrite>
 8007054:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d002      	beq.n	8007062 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800705c:	23ec      	movs	r3, #236	; 0xec
 800705e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8007060:	e00c      	b.n	800707c <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8007062:	2201      	movs	r2, #1
 8007064:	6879      	ldr	r1, [r7, #4]
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	f7ff fee4 	bl	8006e34 <_I2CRead>
 800706c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d002      	beq.n	800707a <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007074:	23ec      	movs	r3, #236	; 0xec
 8007076:	75fb      	strb	r3, [r7, #23]
 8007078:	e000      	b.n	800707c <VL53L0X_RdByte+0x48>
    }
done:
 800707a:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800707c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007080:	4618      	mov	r0, r3
 8007082:	3718      	adds	r7, #24
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8007088:	b580      	push	{r7, lr}
 800708a:	b086      	sub	sp, #24
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	460b      	mov	r3, r1
 8007092:	607a      	str	r2, [r7, #4]
 8007094:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007096:	2300      	movs	r3, #0
 8007098:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800709a:	f107 030b 	add.w	r3, r7, #11
 800709e:	2201      	movs	r2, #1
 80070a0:	4619      	mov	r1, r3
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	f7ff fea7 	bl	8006df6 <_I2CWrite>
 80070a8:	6138      	str	r0, [r7, #16]

    if( status_int ){
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d002      	beq.n	80070b6 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80070b0:	23ec      	movs	r3, #236	; 0xec
 80070b2:	75fb      	strb	r3, [r7, #23]
        goto done;
 80070b4:	e017      	b.n	80070e6 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80070b6:	2202      	movs	r2, #2
 80070b8:	490e      	ldr	r1, [pc, #56]	; (80070f4 <VL53L0X_RdWord+0x6c>)
 80070ba:	68f8      	ldr	r0, [r7, #12]
 80070bc:	f7ff feba 	bl	8006e34 <_I2CRead>
 80070c0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d002      	beq.n	80070ce <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80070c8:	23ec      	movs	r3, #236	; 0xec
 80070ca:	75fb      	strb	r3, [r7, #23]
        goto done;
 80070cc:	e00b      	b.n	80070e6 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80070ce:	4b09      	ldr	r3, [pc, #36]	; (80070f4 <VL53L0X_RdWord+0x6c>)
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	021b      	lsls	r3, r3, #8
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	4b06      	ldr	r3, [pc, #24]	; (80070f4 <VL53L0X_RdWord+0x6c>)
 80070da:	785b      	ldrb	r3, [r3, #1]
 80070dc:	b29b      	uxth	r3, r3
 80070de:	4413      	add	r3, r2
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 80070e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3718      	adds	r7, #24
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	20000c90 	.word	0x20000c90

080070f8 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	460b      	mov	r3, r1
 8007102:	607a      	str	r2, [r7, #4]
 8007104:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007106:	2300      	movs	r3, #0
 8007108:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800710a:	f107 030b 	add.w	r3, r7, #11
 800710e:	2201      	movs	r2, #1
 8007110:	4619      	mov	r1, r3
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f7ff fe6f 	bl	8006df6 <_I2CWrite>
 8007118:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d002      	beq.n	8007126 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007120:	23ec      	movs	r3, #236	; 0xec
 8007122:	75fb      	strb	r3, [r7, #23]
        goto done;
 8007124:	e01b      	b.n	800715e <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8007126:	2204      	movs	r2, #4
 8007128:	4910      	ldr	r1, [pc, #64]	; (800716c <VL53L0X_RdDWord+0x74>)
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f7ff fe82 	bl	8006e34 <_I2CRead>
 8007130:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d002      	beq.n	800713e <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007138:	23ec      	movs	r3, #236	; 0xec
 800713a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800713c:	e00f      	b.n	800715e <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800713e:	4b0b      	ldr	r3, [pc, #44]	; (800716c <VL53L0X_RdDWord+0x74>)
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	061a      	lsls	r2, r3, #24
 8007144:	4b09      	ldr	r3, [pc, #36]	; (800716c <VL53L0X_RdDWord+0x74>)
 8007146:	785b      	ldrb	r3, [r3, #1]
 8007148:	041b      	lsls	r3, r3, #16
 800714a:	441a      	add	r2, r3
 800714c:	4b07      	ldr	r3, [pc, #28]	; (800716c <VL53L0X_RdDWord+0x74>)
 800714e:	789b      	ldrb	r3, [r3, #2]
 8007150:	021b      	lsls	r3, r3, #8
 8007152:	4413      	add	r3, r2
 8007154:	4a05      	ldr	r2, [pc, #20]	; (800716c <VL53L0X_RdDWord+0x74>)
 8007156:	78d2      	ldrb	r2, [r2, #3]
 8007158:	441a      	add	r2, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800715e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007162:	4618      	mov	r0, r3
 8007164:	3718      	adds	r7, #24
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	20000c90 	.word	0x20000c90

08007170 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007178:	2300      	movs	r3, #0
 800717a:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800717c:	2002      	movs	r0, #2
 800717e:	f000 faa3 	bl	80076c8 <HAL_Delay>
    return status;
 8007182:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007186:	4618      	mov	r0, r3
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
	...

08007190 <HandleError>:
 * Handle Error
 *
 * Set err on display and loop forever
 * @param err Error case code
 */
void HandleError(int err){
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
    char msg[16];
    sprintf(msg,"JMEr%d", err);
 8007198:	f107 0308 	add.w	r3, r7, #8
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	4905      	ldr	r1, [pc, #20]	; (80071b4 <HandleError+0x24>)
 80071a0:	4618      	mov	r0, r3
 80071a2:	f005 ff33 	bl	800d00c <siprintf>
    F411_SetDisplayString(msg);
 80071a6:	f107 0308 	add.w	r3, r7, #8
 80071aa:	4618      	mov	r0, r3
 80071ac:	f000 f824 	bl	80071f8 <F411_SetDisplayString>
    while(1){};
 80071b0:	e7fe      	b.n	80071b0 <HandleError+0x20>
 80071b2:	bf00      	nop
 80071b4:	0800f5f0 	.word	0x0800f5f0

080071b8 <VL53L0X_ResetId>:





int VL53L0X_ResetId(int DevNo, int state) {
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
    int status=0;
 80071c2:	2300      	movs	r3, #0
 80071c4:	60fb      	str	r3, [r7, #12]
/// AFAIRE RESET


    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 80071c6:	2200      	movs	r2, #0
 80071c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80071cc:	4809      	ldr	r0, [pc, #36]	; (80071f4 <VL53L0X_ResetId+0x3c>)
 80071ce:	f001 fd9d 	bl	8008d0c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80071d2:	2064      	movs	r0, #100	; 0x64
 80071d4:	f000 fa78 	bl	80076c8 <HAL_Delay>
    if( state )
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d005      	beq.n	80071ea <VL53L0X_ResetId+0x32>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 80071de:	2201      	movs	r2, #1
 80071e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80071e4:	4803      	ldr	r0, [pc, #12]	; (80071f4 <VL53L0X_ResetId+0x3c>)
 80071e6:	f001 fd91 	bl	8008d0c <HAL_GPIO_WritePin>

    return status;
 80071ea:	68fb      	ldr	r3, [r7, #12]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	40020000 	.word	0x40020000

080071f8 <F411_SetDisplayString>:

extern UART_HandleTypeDef huart2;

int F411_SetDisplayString(const char *str) {
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]

	int status=1;
 8007200:	2301      	movs	r3, #1
 8007202:	60fb      	str	r3, [r7, #12]
	 HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 0xFFFF);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f7f8 ffeb 	bl	80001e0 <strlen>
 800720a:	4603      	mov	r3, r0
 800720c:	b29a      	uxth	r2, r3
 800720e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007212:	6879      	ldr	r1, [r7, #4]
 8007214:	4803      	ldr	r0, [pc, #12]	; (8007224 <F411_SetDisplayString+0x2c>)
 8007216:	f004 fa24 	bl	800b662 <HAL_UART_Transmit>

    return status;
 800721a:	68fb      	ldr	r3, [r7, #12]
}
 800721c:	4618      	mov	r0, r3
 800721e:	3710      	adds	r7, #16
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	200007f0 	.word	0x200007f0

08007228 <DetectSensors>:





int DetectSensors(int SetDisplay) {
 8007228:	b580      	push	{r7, lr}
 800722a:	b088      	sub	sp, #32
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
    int status;
    int FinalAddress;

    debug_printf("Detect Sensor");
    /* Reset all */
    nDevPresent = 0;
 8007230:	4b4c      	ldr	r3, [pc, #304]	; (8007364 <DetectSensors+0x13c>)
 8007232:	2200      	movs	r2, #0
 8007234:	601a      	str	r2, [r3, #0]


        status = VL53L0X_ResetId(0, 0);
 8007236:	2100      	movs	r1, #0
 8007238:	2000      	movs	r0, #0
 800723a:	f7ff ffbd 	bl	80071b8 <VL53L0X_ResetId>
 800723e:	61f8      	str	r0, [r7, #28]


i =0;
 8007240:	2300      	movs	r3, #0
 8007242:	61bb      	str	r3, [r7, #24]
    /* detect all sensors (even on-board)*/
  //  for (i = 0; i < 1; i++) {
        VL53L0X_Dev_t *pDev;
        pDev = &VL53L0XDevs[i];
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800724a:	fb02 f303 	mul.w	r3, r2, r3
 800724e:	4a46      	ldr	r2, [pc, #280]	; (8007368 <DetectSensors+0x140>)
 8007250:	4413      	add	r3, r2
 8007252:	617b      	str	r3, [r7, #20]
        pDev->I2cDevAddr = 0x52;
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	2252      	movs	r2, #82	; 0x52
 8007258:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
        pDev->Present = 0;
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	2200      	movs	r2, #0
 8007260:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
        status = 0;  // // FAIRE FONCTION RESET
 8007264:	2300      	movs	r3, #0
 8007266:	61fb      	str	r3, [r7, #28]
        VL53L0X_ResetId( pDev->Id, 1);        HAL_Delay(2);
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800726e:	2101      	movs	r1, #1
 8007270:	4618      	mov	r0, r3
 8007272:	f7ff ffa1 	bl	80071b8 <VL53L0X_ResetId>
 8007276:	2002      	movs	r0, #2
 8007278:	f000 fa26 	bl	80076c8 <HAL_Delay>
        FinalAddress=0x52+(i+1+1)*2;
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	332b      	adds	r3, #43	; 0x2b
 8007280:	005b      	lsls	r3, r3, #1
 8007282:	613b      	str	r3, [r7, #16]

        do {
        	/* Set I2C standard mode (400 KHz) before doing the first register access */
        	if (status == VL53L0X_ERROR_NONE)
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d106      	bne.n	8007298 <DetectSensors+0x70>
        		status = VL53L0X_WrByte(pDev, 0x88, 0x00);
 800728a:	2200      	movs	r2, #0
 800728c:	2188      	movs	r1, #136	; 0x88
 800728e:	6978      	ldr	r0, [r7, #20]
 8007290:	f7ff fe4e 	bl	8006f30 <VL53L0X_WrByte>
 8007294:	4603      	mov	r3, r0
 8007296:	61fb      	str	r3, [r7, #28]

        	/* Try to read one register using default 0x52 address */
            status = VL53L0X_RdWord(pDev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id);
 8007298:	f107 030e 	add.w	r3, r7, #14
 800729c:	461a      	mov	r2, r3
 800729e:	21c0      	movs	r1, #192	; 0xc0
 80072a0:	6978      	ldr	r0, [r7, #20]
 80072a2:	f7ff fef1 	bl	8007088 <VL53L0X_RdWord>
 80072a6:	4603      	mov	r3, r0
 80072a8:	61fb      	str	r3, [r7, #28]
            if (status) {
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d142      	bne.n	8007336 <DetectSensors+0x10e>
                debug_printf("#%d Read id fail\n", i);
                break;
            }
            if (Id == 0xEEAA) {
 80072b0:	89fb      	ldrh	r3, [r7, #14]
 80072b2:	f64e 62aa 	movw	r2, #61098	; 0xeeaa
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d13a      	bne.n	8007330 <DetectSensors+0x108>
				/* Sensor is found => Change its I2C address to final one */
                status = VL53L0X_SetDeviceAddress(pDev,FinalAddress);
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	4619      	mov	r1, r3
 80072c0:	6978      	ldr	r0, [r7, #20]
 80072c2:	f7fa ff71 	bl	80021a8 <VL53L0X_SetDeviceAddress>
 80072c6:	4603      	mov	r3, r0
 80072c8:	61fb      	str	r3, [r7, #28]
                if (status != 0) {
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d134      	bne.n	800733a <DetectSensors+0x112>
                    debug_printf("#i VL53L0X_SetDeviceAddress fail\n", i);
                    break;
                }
                pDev->I2cDevAddr = FinalAddress;
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
                /* Check all is OK with the new I2C address and initialize the sensor */
                status = VL53L0X_RdWord(pDev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id);
 80072da:	f107 030e 	add.w	r3, r7, #14
 80072de:	461a      	mov	r2, r3
 80072e0:	21c0      	movs	r1, #192	; 0xc0
 80072e2:	6978      	ldr	r0, [r7, #20]
 80072e4:	f7ff fed0 	bl	8007088 <VL53L0X_RdWord>
 80072e8:	4603      	mov	r3, r0
 80072ea:	61fb      	str	r3, [r7, #28]
                if (status != 0) {
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d125      	bne.n	800733e <DetectSensors+0x116>
					debug_printf("#i VL53L0X_RdWord fail\n", i);
					break;
				}

                status = VL53L0X_DataInit(pDev);
 80072f2:	6978      	ldr	r0, [r7, #20]
 80072f4:	f7fa ff70 	bl	80021d8 <VL53L0X_DataInit>
 80072f8:	4603      	mov	r3, r0
 80072fa:	61fb      	str	r3, [r7, #28]
                if( status == 0 ){
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d11f      	bne.n	8007342 <DetectSensors+0x11a>
                    pDev->Present = 1;
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	2201      	movs	r2, #1
 8007306:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
                else{
                    debug_printf("VL53L0X_DataInit %d fail\n", i);
                    break;
                }
                trace_printf("VL53L0X %d Present and initiated to final 0x%x\n", pDev->Id, pDev->I2cDevAddr);
                nDevPresent++;
 800730a:	4b16      	ldr	r3, [pc, #88]	; (8007364 <DetectSensors+0x13c>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	3301      	adds	r3, #1
 8007310:	4a14      	ldr	r2, [pc, #80]	; (8007364 <DetectSensors+0x13c>)
 8007312:	6013      	str	r3, [r2, #0]
                nDevMask |= 1 << (i+1);
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	3301      	adds	r3, #1
 8007318:	2201      	movs	r2, #1
 800731a:	409a      	lsls	r2, r3
 800731c:	4b13      	ldr	r3, [pc, #76]	; (800736c <DetectSensors+0x144>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4313      	orrs	r3, r2
 8007322:	4a12      	ldr	r2, [pc, #72]	; (800736c <DetectSensors+0x144>)
 8007324:	6013      	str	r3, [r2, #0]
                pDev->Present = 1;
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	2201      	movs	r2, #1
 800732a:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 800732e:	e009      	b.n	8007344 <DetectSensors+0x11c>
            }
            else {
                debug_printf("#%d unknown ID %x\n", i, Id);
                status = 1;
 8007330:	2301      	movs	r3, #1
 8007332:	61fb      	str	r3, [r7, #28]
 8007334:	e006      	b.n	8007344 <DetectSensors+0x11c>
                break;
 8007336:	bf00      	nop
 8007338:	e004      	b.n	8007344 <DetectSensors+0x11c>
                    break;
 800733a:	bf00      	nop
 800733c:	e002      	b.n	8007344 <DetectSensors+0x11c>
					break;
 800733e:	bf00      	nop
 8007340:	e000      	b.n	8007344 <DetectSensors+0x11c>
                    break;
 8007342:	bf00      	nop
            }
        } while (0);
        /* if fail r can't use for any reason then put the  device back to reset */
        if (status) {
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d005      	beq.n	8007356 <DetectSensors+0x12e>
            VL53L0X_ResetId(i+1, 0);
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	3301      	adds	r3, #1
 800734e:	2100      	movs	r1, #0
 8007350:	4618      	mov	r0, r3
 8007352:	f7ff ff31 	bl	80071b8 <VL53L0X_ResetId>
        }
    //}
    return nDevPresent;
 8007356:	4b03      	ldr	r3, [pc, #12]	; (8007364 <DetectSensors+0x13c>)
 8007358:	681b      	ldr	r3, [r3, #0]
}
 800735a:	4618      	mov	r0, r3
 800735c:	3720      	adds	r7, #32
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	20000cd0 	.word	0x20000cd0
 8007368:	200002e0 	.word	0x200002e0
 800736c:	20000d44 	.word	0x20000d44

08007370 <SetupSingleShot>:

/**
 *  Setup all detected sensors for single shot mode and setup ranging configuration
 */
void SetupSingleShot(RangingConfig_e rangingConfig){
 8007370:	b580      	push	{r7, lr}
 8007372:	b08c      	sub	sp, #48	; 0x30
 8007374:	af00      	add	r7, sp, #0
 8007376:	4603      	mov	r3, r0
 8007378:	71fb      	strb	r3, [r7, #7]
    int status;
    uint8_t VhvSettings;
    uint8_t PhaseCal;
    uint32_t refSpadCount;
	uint8_t isApertureSpads;
	FixPoint1616_t signalLimit = (FixPoint1616_t)(0.25*65536);
 800737a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800737e:	62fb      	str	r3, [r7, #44]	; 0x2c
	FixPoint1616_t sigmaLimit = (FixPoint1616_t)(18*65536);
 8007380:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8007384:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t timingBudget = 33000;
 8007386:	f248 03e8 	movw	r3, #33000	; 0x80e8
 800738a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t preRangeVcselPeriod = 14;
 800738c:	230e      	movs	r3, #14
 800738e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t finalRangeVcselPeriod = 10;
 8007392:	230a      	movs	r3, #10
 8007394:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

 //   for( i=0; i<3; i++){
	i=0;
 8007398:	2300      	movs	r3, #0
 800739a:	61fb      	str	r3, [r7, #28]
        if( VL53L0XDevs[i].Present){
 800739c:	4a80      	ldr	r2, [pc, #512]	; (80075a0 <SetupSingleShot+0x230>)
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80073a4:	fb01 f303 	mul.w	r3, r1, r3
 80073a8:	4413      	add	r3, r2
 80073aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f000 80f0 	beq.w	8007596 <SetupSingleShot+0x226>
            status=VL53L0X_StaticInit(&VL53L0XDevs[i]);
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80073bc:	fb02 f303 	mul.w	r3, r2, r3
 80073c0:	4a77      	ldr	r2, [pc, #476]	; (80075a0 <SetupSingleShot+0x230>)
 80073c2:	4413      	add	r3, r2
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7fb f86b 	bl	80024a0 <VL53L0X_StaticInit>
 80073ca:	4603      	mov	r3, r0
 80073cc:	61bb      	str	r3, [r7, #24]
            if( status ){
                debug_printf("VL53L0X_StaticInit %d failed\n",i);
            }

            status = VL53L0X_PerformRefCalibration(&VL53L0XDevs[i], &VhvSettings, &PhaseCal);
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80073d4:	fb02 f303 	mul.w	r3, r2, r3
 80073d8:	4a71      	ldr	r2, [pc, #452]	; (80075a0 <SetupSingleShot+0x230>)
 80073da:	4413      	add	r3, r2
 80073dc:	f107 0216 	add.w	r2, r7, #22
 80073e0:	f107 0117 	add.w	r1, r7, #23
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7fb feef 	bl	80031c8 <VL53L0X_PerformRefCalibration>
 80073ea:	4603      	mov	r3, r0
 80073ec:	61bb      	str	r3, [r7, #24]
			if( status ){
			   debug_printf("VL53L0X_PerformRefCalibration failed\n");
			}

			status = VL53L0X_PerformRefSpadManagement(&VL53L0XDevs[i], &refSpadCount, &isApertureSpads);
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80073f4:	fb02 f303 	mul.w	r3, r2, r3
 80073f8:	4a69      	ldr	r2, [pc, #420]	; (80075a0 <SetupSingleShot+0x230>)
 80073fa:	4413      	add	r3, r2
 80073fc:	f107 020f 	add.w	r2, r7, #15
 8007400:	f107 0110 	add.w	r1, r7, #16
 8007404:	4618      	mov	r0, r3
 8007406:	f7fc fb6d 	bl	8003ae4 <VL53L0X_PerformRefSpadManagement>
 800740a:	4603      	mov	r3, r0
 800740c:	61bb      	str	r3, [r7, #24]
			if( status ){
			   debug_printf("VL53L0X_PerformRefSpadManagement failed\n");
			}

            status = VL53L0X_SetDeviceMode(&VL53L0XDevs[i], VL53L0X_DEVICEMODE_SINGLE_RANGING); // Setup in single ranging mode
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007414:	fb02 f303 	mul.w	r3, r2, r3
 8007418:	4a61      	ldr	r2, [pc, #388]	; (80075a0 <SetupSingleShot+0x230>)
 800741a:	4413      	add	r3, r2
 800741c:	2100      	movs	r1, #0
 800741e:	4618      	mov	r0, r3
 8007420:	f7fb fa50 	bl	80028c4 <VL53L0X_SetDeviceMode>
 8007424:	4603      	mov	r3, r0
 8007426:	61bb      	str	r3, [r7, #24]
            if( status ){
               debug_printf("VL53L0X_SetDeviceMode failed\n");
            }

            status = VL53L0X_SetLimitCheckEnable(&VL53L0XDevs[i], VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1); // Enable Sigma limit
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800742e:	fb02 f303 	mul.w	r3, r2, r3
 8007432:	4a5b      	ldr	r2, [pc, #364]	; (80075a0 <SetupSingleShot+0x230>)
 8007434:	4413      	add	r3, r2
 8007436:	2201      	movs	r2, #1
 8007438:	2100      	movs	r1, #0
 800743a:	4618      	mov	r0, r3
 800743c:	f7fb fcbe 	bl	8002dbc <VL53L0X_SetLimitCheckEnable>
 8007440:	4603      	mov	r3, r0
 8007442:	61bb      	str	r3, [r7, #24]
			if( status ){
			   debug_printf("VL53L0X_SetLimitCheckEnable failed\n");
			}

			status = VL53L0X_SetLimitCheckEnable(&VL53L0XDevs[i], VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1); // Enable Signa limit
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800744a:	fb02 f303 	mul.w	r3, r2, r3
 800744e:	4a54      	ldr	r2, [pc, #336]	; (80075a0 <SetupSingleShot+0x230>)
 8007450:	4413      	add	r3, r2
 8007452:	2201      	movs	r2, #1
 8007454:	2101      	movs	r1, #1
 8007456:	4618      	mov	r0, r3
 8007458:	f7fb fcb0 	bl	8002dbc <VL53L0X_SetLimitCheckEnable>
 800745c:	4603      	mov	r3, r0
 800745e:	61bb      	str	r3, [r7, #24]
			if( status ){
			   debug_printf("VL53L0X_SetLimitCheckEnable failed\n");
			}
			/* Ranging configuration */
            switch(rangingConfig) {
 8007460:	79fb      	ldrb	r3, [r7, #7]
 8007462:	2b02      	cmp	r3, #2
 8007464:	d016      	beq.n	8007494 <SetupSingleShot+0x124>
 8007466:	2b02      	cmp	r3, #2
 8007468:	dc33      	bgt.n	80074d2 <SetupSingleShot+0x162>
 800746a:	2b00      	cmp	r3, #0
 800746c:	d002      	beq.n	8007474 <SetupSingleShot+0x104>
 800746e:	2b01      	cmp	r3, #1
 8007470:	d01f      	beq.n	80074b2 <SetupSingleShot+0x142>
 8007472:	e02e      	b.n	80074d2 <SetupSingleShot+0x162>
            case LONG_RANGE:
            	signalLimit = (FixPoint1616_t)(0.1*65536);
 8007474:	f641 1399 	movw	r3, #6553	; 0x1999
 8007478:	62fb      	str	r3, [r7, #44]	; 0x2c
            	sigmaLimit = (FixPoint1616_t)(60*65536);
 800747a:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800747e:	62bb      	str	r3, [r7, #40]	; 0x28
            	timingBudget = 33000;
 8007480:	f248 03e8 	movw	r3, #33000	; 0x80e8
 8007484:	627b      	str	r3, [r7, #36]	; 0x24
            	preRangeVcselPeriod = 18;
 8007486:	2312      	movs	r3, #18
 8007488:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            	finalRangeVcselPeriod = 14;
 800748c:	230e      	movs	r3, #14
 800748e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            	break;
 8007492:	e01e      	b.n	80074d2 <SetupSingleShot+0x162>
            case HIGH_ACCURACY:
				signalLimit = (FixPoint1616_t)(0.25*65536);
 8007494:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007498:	62fb      	str	r3, [r7, #44]	; 0x2c
				sigmaLimit = (FixPoint1616_t)(18*65536);
 800749a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800749e:	62bb      	str	r3, [r7, #40]	; 0x28
				timingBudget = 200000;
 80074a0:	4b40      	ldr	r3, [pc, #256]	; (80075a4 <SetupSingleShot+0x234>)
 80074a2:	627b      	str	r3, [r7, #36]	; 0x24
				preRangeVcselPeriod = 14;
 80074a4:	230e      	movs	r3, #14
 80074a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				finalRangeVcselPeriod = 10;
 80074aa:	230a      	movs	r3, #10
 80074ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				break;
 80074b0:	e00f      	b.n	80074d2 <SetupSingleShot+0x162>
            case HIGH_SPEED:
				signalLimit = (FixPoint1616_t)(0.25*65536);
 80074b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80074b6:	62fb      	str	r3, [r7, #44]	; 0x2c
				sigmaLimit = (FixPoint1616_t)(32*65536);
 80074b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80074bc:	62bb      	str	r3, [r7, #40]	; 0x28
				timingBudget = 20000;
 80074be:	f644 6320 	movw	r3, #20000	; 0x4e20
 80074c2:	627b      	str	r3, [r7, #36]	; 0x24
				preRangeVcselPeriod = 14;
 80074c4:	230e      	movs	r3, #14
 80074c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				finalRangeVcselPeriod = 10;
 80074ca:	230a      	movs	r3, #10
 80074cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				break;
 80074d0:	bf00      	nop
            default:
            	debug_printf("Not Supported");
            }

            status = VL53L0X_SetLimitCheckValue(&VL53L0XDevs[i],  VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80074d8:	fb02 f303 	mul.w	r3, r2, r3
 80074dc:	4a30      	ldr	r2, [pc, #192]	; (80075a0 <SetupSingleShot+0x230>)
 80074de:	4413      	add	r3, r2
 80074e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074e2:	2101      	movs	r1, #1
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7fb fd19 	bl	8002f1c <VL53L0X_SetLimitCheckValue>
 80074ea:	4603      	mov	r3, r0
 80074ec:	61bb      	str	r3, [r7, #24]
			if( status ){
			   debug_printf("VL53L0X_SetLimitCheckValue failed\n");
			}

			status = VL53L0X_SetLimitCheckValue(&VL53L0XDevs[i],  VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80074f4:	fb02 f303 	mul.w	r3, r2, r3
 80074f8:	4a29      	ldr	r2, [pc, #164]	; (80075a0 <SetupSingleShot+0x230>)
 80074fa:	4413      	add	r3, r2
 80074fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074fe:	2100      	movs	r1, #0
 8007500:	4618      	mov	r0, r3
 8007502:	f7fb fd0b 	bl	8002f1c <VL53L0X_SetLimitCheckValue>
 8007506:	4603      	mov	r3, r0
 8007508:	61bb      	str	r3, [r7, #24]
			if( status ){
			   debug_printf("VL53L0X_SetLimitCheckValue failed\n");
			}

            status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(&VL53L0XDevs[i],  timingBudget);
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007510:	fb02 f303 	mul.w	r3, r2, r3
 8007514:	4a22      	ldr	r2, [pc, #136]	; (80075a0 <SetupSingleShot+0x230>)
 8007516:	4413      	add	r3, r2
 8007518:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800751a:	4618      	mov	r0, r3
 800751c:	f7fb fa30 	bl	8002980 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8007520:	4603      	mov	r3, r0
 8007522:	61bb      	str	r3, [r7, #24]
            if( status ){
               debug_printf("VL53L0X_SetMeasurementTimingBudgetMicroSeconds failed\n");
            }

            status = VL53L0X_SetVcselPulsePeriod(&VL53L0XDevs[i],  VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800752a:	fb02 f303 	mul.w	r3, r2, r3
 800752e:	4a1c      	ldr	r2, [pc, #112]	; (80075a0 <SetupSingleShot+0x230>)
 8007530:	4413      	add	r3, r2
 8007532:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8007536:	2100      	movs	r1, #0
 8007538:	4618      	mov	r0, r3
 800753a:	f7fb fa47 	bl	80029cc <VL53L0X_SetVcselPulsePeriod>
 800753e:	4603      	mov	r3, r0
 8007540:	61bb      	str	r3, [r7, #24]
			if( status ){
			   debug_printf("VL53L0X_SetVcselPulsePeriod failed\n");
			}

            status = VL53L0X_SetVcselPulsePeriod(&VL53L0XDevs[i],  VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007548:	fb02 f303 	mul.w	r3, r2, r3
 800754c:	4a14      	ldr	r2, [pc, #80]	; (80075a0 <SetupSingleShot+0x230>)
 800754e:	4413      	add	r3, r2
 8007550:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007554:	2101      	movs	r1, #1
 8007556:	4618      	mov	r0, r3
 8007558:	f7fb fa38 	bl	80029cc <VL53L0X_SetVcselPulsePeriod>
 800755c:	4603      	mov	r3, r0
 800755e:	61bb      	str	r3, [r7, #24]
			if( status ){
			   debug_printf("VL53L0X_SetVcselPulsePeriod failed\n");
			}

			status = VL53L0X_PerformRefCalibration(&VL53L0XDevs[i], &VhvSettings, &PhaseCal);
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007566:	fb02 f303 	mul.w	r3, r2, r3
 800756a:	4a0d      	ldr	r2, [pc, #52]	; (80075a0 <SetupSingleShot+0x230>)
 800756c:	4413      	add	r3, r2
 800756e:	f107 0216 	add.w	r2, r7, #22
 8007572:	f107 0117 	add.w	r1, r7, #23
 8007576:	4618      	mov	r0, r3
 8007578:	f7fb fe26 	bl	80031c8 <VL53L0X_PerformRefCalibration>
 800757c:	4603      	mov	r3, r0
 800757e:	61bb      	str	r3, [r7, #24]
			if( status ){
			   debug_printf("VL53L0X_PerformRefCalibration  failed\n");
			}

            VL53L0XDevs[i].LeakyFirst=1;
 8007580:	4a07      	ldr	r2, [pc, #28]	; (80075a0 <SetupSingleShot+0x230>)
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007588:	fb01 f303 	mul.w	r3, r1, r3
 800758c:	4413      	add	r3, r2
 800758e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007592:	2201      	movs	r2, #1
 8007594:	601a      	str	r2, [r3, #0]
        }

}
 8007596:	bf00      	nop
 8007598:	3730      	adds	r7, #48	; 0x30
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	200002e0 	.word	0x200002e0
 80075a4:	00030d40 	.word	0x00030d40

080075a8 <ResetAndDetectSensor>:





void ResetAndDetectSensor(int SetDisplay){
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
    int nSensor;
    nSensor = DetectSensors(SetDisplay);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f7ff fe39 	bl	8007228 <DetectSensors>
 80075b6:	60f8      	str	r0, [r7, #12]
    /* at least one sensor and if one it must be the built-in one  */
    if( (nSensor <=0) ||  (nSensor ==1 && VL53L0XDevs[0].Present==0) ){
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	dd07      	ble.n	80075ce <ResetAndDetectSensor+0x26>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d108      	bne.n	80075d6 <ResetAndDetectSensor+0x2e>
 80075c4:	4b06      	ldr	r3, [pc, #24]	; (80075e0 <ResetAndDetectSensor+0x38>)
 80075c6:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d103      	bne.n	80075d6 <ResetAndDetectSensor+0x2e>
        HandleError(ERR_DETECT);
 80075ce:	f04f 30ff 	mov.w	r0, #4294967295
 80075d2:	f7ff fddd 	bl	8007190 <HandleError>
    }
}
 80075d6:	bf00      	nop
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	200002e0 	.word	0x200002e0

080075e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80075e8:	4b0e      	ldr	r3, [pc, #56]	; (8007624 <HAL_Init+0x40>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a0d      	ldr	r2, [pc, #52]	; (8007624 <HAL_Init+0x40>)
 80075ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80075f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80075f4:	4b0b      	ldr	r3, [pc, #44]	; (8007624 <HAL_Init+0x40>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a0a      	ldr	r2, [pc, #40]	; (8007624 <HAL_Init+0x40>)
 80075fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80075fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007600:	4b08      	ldr	r3, [pc, #32]	; (8007624 <HAL_Init+0x40>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a07      	ldr	r2, [pc, #28]	; (8007624 <HAL_Init+0x40>)
 8007606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800760a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800760c:	2003      	movs	r0, #3
 800760e:	f000 fe3b 	bl	8008288 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007612:	2000      	movs	r0, #0
 8007614:	f000 f808 	bl	8007628 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007618:	f7fa faaa 	bl	8001b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	40023c00 	.word	0x40023c00

08007628 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007630:	4b12      	ldr	r3, [pc, #72]	; (800767c <HAL_InitTick+0x54>)
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	4b12      	ldr	r3, [pc, #72]	; (8007680 <HAL_InitTick+0x58>)
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	4619      	mov	r1, r3
 800763a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800763e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007642:	fbb2 f3f3 	udiv	r3, r2, r3
 8007646:	4618      	mov	r0, r3
 8007648:	f000 fe53 	bl	80082f2 <HAL_SYSTICK_Config>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d001      	beq.n	8007656 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e00e      	b.n	8007674 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2b0f      	cmp	r3, #15
 800765a:	d80a      	bhi.n	8007672 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800765c:	2200      	movs	r2, #0
 800765e:	6879      	ldr	r1, [r7, #4]
 8007660:	f04f 30ff 	mov.w	r0, #4294967295
 8007664:	f000 fe1b 	bl	800829e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007668:	4a06      	ldr	r2, [pc, #24]	; (8007684 <HAL_InitTick+0x5c>)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800766e:	2300      	movs	r3, #0
 8007670:	e000      	b.n	8007674 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
}
 8007674:	4618      	mov	r0, r3
 8007676:	3708      	adds	r7, #8
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}
 800767c:	20000020 	.word	0x20000020
 8007680:	20000474 	.word	0x20000474
 8007684:	20000470 	.word	0x20000470

08007688 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007688:	b480      	push	{r7}
 800768a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800768c:	4b06      	ldr	r3, [pc, #24]	; (80076a8 <HAL_IncTick+0x20>)
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	461a      	mov	r2, r3
 8007692:	4b06      	ldr	r3, [pc, #24]	; (80076ac <HAL_IncTick+0x24>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4413      	add	r3, r2
 8007698:	4a04      	ldr	r2, [pc, #16]	; (80076ac <HAL_IncTick+0x24>)
 800769a:	6013      	str	r3, [r2, #0]
}
 800769c:	bf00      	nop
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr
 80076a6:	bf00      	nop
 80076a8:	20000474 	.word	0x20000474
 80076ac:	20000d48 	.word	0x20000d48

080076b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80076b0:	b480      	push	{r7}
 80076b2:	af00      	add	r7, sp, #0
  return uwTick;
 80076b4:	4b03      	ldr	r3, [pc, #12]	; (80076c4 <HAL_GetTick+0x14>)
 80076b6:	681b      	ldr	r3, [r3, #0]
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	20000d48 	.word	0x20000d48

080076c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80076d0:	f7ff ffee 	bl	80076b0 <HAL_GetTick>
 80076d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076e0:	d005      	beq.n	80076ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80076e2:	4b0a      	ldr	r3, [pc, #40]	; (800770c <HAL_Delay+0x44>)
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	461a      	mov	r2, r3
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	4413      	add	r3, r2
 80076ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80076ee:	bf00      	nop
 80076f0:	f7ff ffde 	bl	80076b0 <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d8f7      	bhi.n	80076f0 <HAL_Delay+0x28>
  {
  }
}
 8007700:	bf00      	nop
 8007702:	bf00      	nop
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	20000474 	.word	0x20000474

08007710 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007718:	2300      	movs	r3, #0
 800771a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d101      	bne.n	8007726 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e033      	b.n	800778e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772a:	2b00      	cmp	r3, #0
 800772c:	d109      	bne.n	8007742 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f7fa fa46 	bl	8001bc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007746:	f003 0310 	and.w	r3, r3, #16
 800774a:	2b00      	cmp	r3, #0
 800774c:	d118      	bne.n	8007780 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007752:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007756:	f023 0302 	bic.w	r3, r3, #2
 800775a:	f043 0202 	orr.w	r2, r3, #2
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fbba 	bl	8007edc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007772:	f023 0303 	bic.w	r3, r3, #3
 8007776:	f043 0201 	orr.w	r2, r3, #1
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	641a      	str	r2, [r3, #64]	; 0x40
 800777e:	e001      	b.n	8007784 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800778c:	7bfb      	ldrb	r3, [r7, #15]
}
 800778e:	4618      	mov	r0, r3
 8007790:	3710      	adds	r7, #16
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
	...

08007798 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80077a0:	2300      	movs	r3, #0
 80077a2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d101      	bne.n	80077b2 <HAL_ADC_Start+0x1a>
 80077ae:	2302      	movs	r3, #2
 80077b0:	e097      	b.n	80078e2 <HAL_ADC_Start+0x14a>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2201      	movs	r2, #1
 80077b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	f003 0301 	and.w	r3, r3, #1
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d018      	beq.n	80077fa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	689a      	ldr	r2, [r3, #8]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f042 0201 	orr.w	r2, r2, #1
 80077d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80077d8:	4b45      	ldr	r3, [pc, #276]	; (80078f0 <HAL_ADC_Start+0x158>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a45      	ldr	r2, [pc, #276]	; (80078f4 <HAL_ADC_Start+0x15c>)
 80077de:	fba2 2303 	umull	r2, r3, r2, r3
 80077e2:	0c9a      	lsrs	r2, r3, #18
 80077e4:	4613      	mov	r3, r2
 80077e6:	005b      	lsls	r3, r3, #1
 80077e8:	4413      	add	r3, r2
 80077ea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80077ec:	e002      	b.n	80077f4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	3b01      	subs	r3, #1
 80077f2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d1f9      	bne.n	80077ee <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	f003 0301 	and.w	r3, r3, #1
 8007804:	2b01      	cmp	r3, #1
 8007806:	d15f      	bne.n	80078c8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007810:	f023 0301 	bic.w	r3, r3, #1
 8007814:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007826:	2b00      	cmp	r3, #0
 8007828:	d007      	beq.n	800783a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007832:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007846:	d106      	bne.n	8007856 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800784c:	f023 0206 	bic.w	r2, r3, #6
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	645a      	str	r2, [r3, #68]	; 0x44
 8007854:	e002      	b.n	800785c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007864:	4b24      	ldr	r3, [pc, #144]	; (80078f8 <HAL_ADC_Start+0x160>)
 8007866:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007870:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	f003 031f 	and.w	r3, r3, #31
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10f      	bne.n	800789e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007888:	2b00      	cmp	r3, #0
 800788a:	d129      	bne.n	80078e0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	689a      	ldr	r2, [r3, #8]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800789a:	609a      	str	r2, [r3, #8]
 800789c:	e020      	b.n	80078e0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a16      	ldr	r2, [pc, #88]	; (80078fc <HAL_ADC_Start+0x164>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d11b      	bne.n	80078e0 <HAL_ADC_Start+0x148>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d114      	bne.n	80078e0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	689a      	ldr	r2, [r3, #8]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80078c4:	609a      	str	r2, [r3, #8]
 80078c6:	e00b      	b.n	80078e0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078cc:	f043 0210 	orr.w	r2, r3, #16
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078d8:	f043 0201 	orr.w	r2, r3, #1
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3714      	adds	r7, #20
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	20000020 	.word	0x20000020
 80078f4:	431bde83 	.word	0x431bde83
 80078f8:	40012300 	.word	0x40012300
 80078fc:	40012000 	.word	0x40012000

08007900 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800790a:	2300      	movs	r3, #0
 800790c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800791c:	d113      	bne.n	8007946 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800792c:	d10b      	bne.n	8007946 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007932:	f043 0220 	orr.w	r2, r3, #32
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e063      	b.n	8007a0e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8007946:	f7ff feb3 	bl	80076b0 <HAL_GetTick>
 800794a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800794c:	e021      	b.n	8007992 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007954:	d01d      	beq.n	8007992 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d007      	beq.n	800796c <HAL_ADC_PollForConversion+0x6c>
 800795c:	f7ff fea8 	bl	80076b0 <HAL_GetTick>
 8007960:	4602      	mov	r2, r0
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	683a      	ldr	r2, [r7, #0]
 8007968:	429a      	cmp	r2, r3
 800796a:	d212      	bcs.n	8007992 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f003 0302 	and.w	r3, r3, #2
 8007976:	2b02      	cmp	r3, #2
 8007978:	d00b      	beq.n	8007992 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797e:	f043 0204 	orr.w	r2, r3, #4
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800798e:	2303      	movs	r3, #3
 8007990:	e03d      	b.n	8007a0e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 0302 	and.w	r3, r3, #2
 800799c:	2b02      	cmp	r3, #2
 800799e:	d1d6      	bne.n	800794e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f06f 0212 	mvn.w	r2, #18
 80079a8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d123      	bne.n	8007a0c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d11f      	bne.n	8007a0c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d006      	beq.n	80079e8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d111      	bne.n	8007a0c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d105      	bne.n	8007a0c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a04:	f043 0201 	orr.w	r2, r3, #1
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b086      	sub	sp, #24
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	617b      	str	r3, [r7, #20]
 8007a22:	2300      	movs	r3, #0
 8007a24:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f003 0302 	and.w	r3, r3, #2
 8007a3c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	f003 0320 	and.w	r3, r3, #32
 8007a44:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d049      	beq.n	8007ae0 <HAL_ADC_IRQHandler+0xca>
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d046      	beq.n	8007ae0 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a56:	f003 0310 	and.w	r3, r3, #16
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d105      	bne.n	8007a6a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a62:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d12b      	bne.n	8007ad0 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d127      	bne.n	8007ad0 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a86:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d006      	beq.n	8007a9c <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d119      	bne.n	8007ad0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	685a      	ldr	r2, [r3, #4]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f022 0220 	bic.w	r2, r2, #32
 8007aaa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007abc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d105      	bne.n	8007ad0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac8:	f043 0201 	orr.w	r2, r3, #1
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f7f9 ff61 	bl	8001998 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f06f 0212 	mvn.w	r2, #18
 8007ade:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f003 0304 	and.w	r3, r3, #4
 8007ae6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aee:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d057      	beq.n	8007ba6 <HAL_ADC_IRQHandler+0x190>
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d054      	beq.n	8007ba6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b00:	f003 0310 	and.w	r3, r3, #16
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d105      	bne.n	8007b14 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d139      	bne.n	8007b96 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b28:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d006      	beq.n	8007b3e <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d12b      	bne.n	8007b96 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d124      	bne.n	8007b96 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d11d      	bne.n	8007b96 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d119      	bne.n	8007b96 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	685a      	ldr	r2, [r3, #4]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b70:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d105      	bne.n	8007b96 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8e:	f043 0201 	orr.w	r2, r3, #1
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fa9c 	bl	80080d4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f06f 020c 	mvn.w	r2, #12
 8007ba4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f003 0301 	and.w	r3, r3, #1
 8007bac:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bb4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d017      	beq.n	8007bec <HAL_ADC_IRQHandler+0x1d6>
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d014      	beq.n	8007bec <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 0301 	and.w	r3, r3, #1
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d10d      	bne.n	8007bec <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 f837 	bl	8007c50 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f06f 0201 	mvn.w	r2, #1
 8007bea:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f003 0320 	and.w	r3, r3, #32
 8007bf2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007bfa:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d015      	beq.n	8007c2e <HAL_ADC_IRQHandler+0x218>
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d012      	beq.n	8007c2e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c0c:	f043 0202 	orr.w	r2, r3, #2
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f06f 0220 	mvn.w	r2, #32
 8007c1c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 f820 	bl	8007c64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f06f 0220 	mvn.w	r2, #32
 8007c2c:	601a      	str	r2, [r3, #0]
  }
}
 8007c2e:	bf00      	nop
 8007c30:	3718      	adds	r7, #24
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8007c36:	b480      	push	{r7}
 8007c38:	b083      	sub	sp, #12
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8007c58:	bf00      	nop
 8007c5a:	370c      	adds	r7, #12
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007c6c:	bf00      	nop
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b085      	sub	sp, #20
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007c82:	2300      	movs	r3, #0
 8007c84:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d101      	bne.n	8007c94 <HAL_ADC_ConfigChannel+0x1c>
 8007c90:	2302      	movs	r3, #2
 8007c92:	e113      	b.n	8007ebc <HAL_ADC_ConfigChannel+0x244>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2b09      	cmp	r3, #9
 8007ca2:	d925      	bls.n	8007cf0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68d9      	ldr	r1, [r3, #12]
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	005b      	lsls	r3, r3, #1
 8007cb6:	4413      	add	r3, r2
 8007cb8:	3b1e      	subs	r3, #30
 8007cba:	2207      	movs	r2, #7
 8007cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc0:	43da      	mvns	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	400a      	ands	r2, r1
 8007cc8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	68d9      	ldr	r1, [r3, #12]
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	689a      	ldr	r2, [r3, #8]
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	4618      	mov	r0, r3
 8007cdc:	4603      	mov	r3, r0
 8007cde:	005b      	lsls	r3, r3, #1
 8007ce0:	4403      	add	r3, r0
 8007ce2:	3b1e      	subs	r3, #30
 8007ce4:	409a      	lsls	r2, r3
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	430a      	orrs	r2, r1
 8007cec:	60da      	str	r2, [r3, #12]
 8007cee:	e022      	b.n	8007d36 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	6919      	ldr	r1, [r3, #16]
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	4613      	mov	r3, r2
 8007d00:	005b      	lsls	r3, r3, #1
 8007d02:	4413      	add	r3, r2
 8007d04:	2207      	movs	r2, #7
 8007d06:	fa02 f303 	lsl.w	r3, r2, r3
 8007d0a:	43da      	mvns	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	400a      	ands	r2, r1
 8007d12:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	6919      	ldr	r1, [r3, #16]
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	689a      	ldr	r2, [r3, #8]
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	4618      	mov	r0, r3
 8007d26:	4603      	mov	r3, r0
 8007d28:	005b      	lsls	r3, r3, #1
 8007d2a:	4403      	add	r3, r0
 8007d2c:	409a      	lsls	r2, r3
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	430a      	orrs	r2, r1
 8007d34:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	2b06      	cmp	r3, #6
 8007d3c:	d824      	bhi.n	8007d88 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	685a      	ldr	r2, [r3, #4]
 8007d48:	4613      	mov	r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	4413      	add	r3, r2
 8007d4e:	3b05      	subs	r3, #5
 8007d50:	221f      	movs	r2, #31
 8007d52:	fa02 f303 	lsl.w	r3, r2, r3
 8007d56:	43da      	mvns	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	400a      	ands	r2, r1
 8007d5e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	685a      	ldr	r2, [r3, #4]
 8007d72:	4613      	mov	r3, r2
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	4413      	add	r3, r2
 8007d78:	3b05      	subs	r3, #5
 8007d7a:	fa00 f203 	lsl.w	r2, r0, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	430a      	orrs	r2, r1
 8007d84:	635a      	str	r2, [r3, #52]	; 0x34
 8007d86:	e04c      	b.n	8007e22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	2b0c      	cmp	r3, #12
 8007d8e:	d824      	bhi.n	8007dda <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	685a      	ldr	r2, [r3, #4]
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	4413      	add	r3, r2
 8007da0:	3b23      	subs	r3, #35	; 0x23
 8007da2:	221f      	movs	r2, #31
 8007da4:	fa02 f303 	lsl.w	r3, r2, r3
 8007da8:	43da      	mvns	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	400a      	ands	r2, r1
 8007db0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	685a      	ldr	r2, [r3, #4]
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	4413      	add	r3, r2
 8007dca:	3b23      	subs	r3, #35	; 0x23
 8007dcc:	fa00 f203 	lsl.w	r2, r0, r3
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	430a      	orrs	r2, r1
 8007dd6:	631a      	str	r2, [r3, #48]	; 0x30
 8007dd8:	e023      	b.n	8007e22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	4613      	mov	r3, r2
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	4413      	add	r3, r2
 8007dea:	3b41      	subs	r3, #65	; 0x41
 8007dec:	221f      	movs	r2, #31
 8007dee:	fa02 f303 	lsl.w	r3, r2, r3
 8007df2:	43da      	mvns	r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	400a      	ands	r2, r1
 8007dfa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	4618      	mov	r0, r3
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	685a      	ldr	r2, [r3, #4]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	4413      	add	r3, r2
 8007e14:	3b41      	subs	r3, #65	; 0x41
 8007e16:	fa00 f203 	lsl.w	r2, r0, r3
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007e22:	4b29      	ldr	r3, [pc, #164]	; (8007ec8 <HAL_ADC_ConfigChannel+0x250>)
 8007e24:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a28      	ldr	r2, [pc, #160]	; (8007ecc <HAL_ADC_ConfigChannel+0x254>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d10f      	bne.n	8007e50 <HAL_ADC_ConfigChannel+0x1d8>
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2b12      	cmp	r3, #18
 8007e36:	d10b      	bne.n	8007e50 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a1d      	ldr	r2, [pc, #116]	; (8007ecc <HAL_ADC_ConfigChannel+0x254>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d12b      	bne.n	8007eb2 <HAL_ADC_ConfigChannel+0x23a>
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a1c      	ldr	r2, [pc, #112]	; (8007ed0 <HAL_ADC_ConfigChannel+0x258>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d003      	beq.n	8007e6c <HAL_ADC_ConfigChannel+0x1f4>
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2b11      	cmp	r3, #17
 8007e6a:	d122      	bne.n	8007eb2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a11      	ldr	r2, [pc, #68]	; (8007ed0 <HAL_ADC_ConfigChannel+0x258>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d111      	bne.n	8007eb2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007e8e:	4b11      	ldr	r3, [pc, #68]	; (8007ed4 <HAL_ADC_ConfigChannel+0x25c>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a11      	ldr	r2, [pc, #68]	; (8007ed8 <HAL_ADC_ConfigChannel+0x260>)
 8007e94:	fba2 2303 	umull	r2, r3, r2, r3
 8007e98:	0c9a      	lsrs	r2, r3, #18
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	4413      	add	r3, r2
 8007ea0:	005b      	lsls	r3, r3, #1
 8007ea2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007ea4:	e002      	b.n	8007eac <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	3b01      	subs	r3, #1
 8007eaa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d1f9      	bne.n	8007ea6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3714      	adds	r7, #20
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr
 8007ec8:	40012300 	.word	0x40012300
 8007ecc:	40012000 	.word	0x40012000
 8007ed0:	10000012 	.word	0x10000012
 8007ed4:	20000020 	.word	0x20000020
 8007ed8:	431bde83 	.word	0x431bde83

08007edc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007ee4:	4b79      	ldr	r3, [pc, #484]	; (80080cc <ADC_Init+0x1f0>)
 8007ee6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	685a      	ldr	r2, [r3, #4]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	431a      	orrs	r2, r3
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	685a      	ldr	r2, [r3, #4]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	6859      	ldr	r1, [r3, #4]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	021a      	lsls	r2, r3, #8
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	430a      	orrs	r2, r1
 8007f24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	685a      	ldr	r2, [r3, #4]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007f34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	6859      	ldr	r1, [r3, #4]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	689a      	ldr	r2, [r3, #8]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	430a      	orrs	r2, r1
 8007f46:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	689a      	ldr	r2, [r3, #8]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	6899      	ldr	r1, [r3, #8]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	68da      	ldr	r2, [r3, #12]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	430a      	orrs	r2, r1
 8007f68:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f6e:	4a58      	ldr	r2, [pc, #352]	; (80080d0 <ADC_Init+0x1f4>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d022      	beq.n	8007fba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	689a      	ldr	r2, [r3, #8]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007f82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	6899      	ldr	r1, [r3, #8]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	430a      	orrs	r2, r1
 8007f94:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	689a      	ldr	r2, [r3, #8]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007fa4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	6899      	ldr	r1, [r3, #8]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	430a      	orrs	r2, r1
 8007fb6:	609a      	str	r2, [r3, #8]
 8007fb8:	e00f      	b.n	8007fda <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	689a      	ldr	r2, [r3, #8]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007fc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	689a      	ldr	r2, [r3, #8]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007fd8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	689a      	ldr	r2, [r3, #8]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f022 0202 	bic.w	r2, r2, #2
 8007fe8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	6899      	ldr	r1, [r3, #8]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	7e1b      	ldrb	r3, [r3, #24]
 8007ff4:	005a      	lsls	r2, r3, #1
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	430a      	orrs	r2, r1
 8007ffc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d01b      	beq.n	8008040 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	685a      	ldr	r2, [r3, #4]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008016:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	685a      	ldr	r2, [r3, #4]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8008026:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	6859      	ldr	r1, [r3, #4]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008032:	3b01      	subs	r3, #1
 8008034:	035a      	lsls	r2, r3, #13
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	430a      	orrs	r2, r1
 800803c:	605a      	str	r2, [r3, #4]
 800803e:	e007      	b.n	8008050 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	685a      	ldr	r2, [r3, #4]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800804e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800805e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	69db      	ldr	r3, [r3, #28]
 800806a:	3b01      	subs	r3, #1
 800806c:	051a      	lsls	r2, r3, #20
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	430a      	orrs	r2, r1
 8008074:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	689a      	ldr	r2, [r3, #8]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008084:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	6899      	ldr	r1, [r3, #8]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008092:	025a      	lsls	r2, r3, #9
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	430a      	orrs	r2, r1
 800809a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	689a      	ldr	r2, [r3, #8]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6899      	ldr	r1, [r3, #8]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	695b      	ldr	r3, [r3, #20]
 80080b6:	029a      	lsls	r2, r3, #10
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	430a      	orrs	r2, r1
 80080be:	609a      	str	r2, [r3, #8]
}
 80080c0:	bf00      	nop
 80080c2:	3714      	adds	r7, #20
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr
 80080cc:	40012300 	.word	0x40012300
 80080d0:	0f000001 	.word	0x0f000001

080080d4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80080dc:	bf00      	nop
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f003 0307 	and.w	r3, r3, #7
 80080f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80080f8:	4b0c      	ldr	r3, [pc, #48]	; (800812c <__NVIC_SetPriorityGrouping+0x44>)
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80080fe:	68ba      	ldr	r2, [r7, #8]
 8008100:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008104:	4013      	ands	r3, r2
 8008106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008110:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800811a:	4a04      	ldr	r2, [pc, #16]	; (800812c <__NVIC_SetPriorityGrouping+0x44>)
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	60d3      	str	r3, [r2, #12]
}
 8008120:	bf00      	nop
 8008122:	3714      	adds	r7, #20
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr
 800812c:	e000ed00 	.word	0xe000ed00

08008130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008130:	b480      	push	{r7}
 8008132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008134:	4b04      	ldr	r3, [pc, #16]	; (8008148 <__NVIC_GetPriorityGrouping+0x18>)
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	0a1b      	lsrs	r3, r3, #8
 800813a:	f003 0307 	and.w	r3, r3, #7
}
 800813e:	4618      	mov	r0, r3
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr
 8008148:	e000ed00 	.word	0xe000ed00

0800814c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	4603      	mov	r3, r0
 8008154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800815a:	2b00      	cmp	r3, #0
 800815c:	db0b      	blt.n	8008176 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800815e:	79fb      	ldrb	r3, [r7, #7]
 8008160:	f003 021f 	and.w	r2, r3, #31
 8008164:	4907      	ldr	r1, [pc, #28]	; (8008184 <__NVIC_EnableIRQ+0x38>)
 8008166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800816a:	095b      	lsrs	r3, r3, #5
 800816c:	2001      	movs	r0, #1
 800816e:	fa00 f202 	lsl.w	r2, r0, r2
 8008172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008176:	bf00      	nop
 8008178:	370c      	adds	r7, #12
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop
 8008184:	e000e100 	.word	0xe000e100

08008188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	4603      	mov	r3, r0
 8008190:	6039      	str	r1, [r7, #0]
 8008192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008198:	2b00      	cmp	r3, #0
 800819a:	db0a      	blt.n	80081b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	b2da      	uxtb	r2, r3
 80081a0:	490c      	ldr	r1, [pc, #48]	; (80081d4 <__NVIC_SetPriority+0x4c>)
 80081a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081a6:	0112      	lsls	r2, r2, #4
 80081a8:	b2d2      	uxtb	r2, r2
 80081aa:	440b      	add	r3, r1
 80081ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80081b0:	e00a      	b.n	80081c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	b2da      	uxtb	r2, r3
 80081b6:	4908      	ldr	r1, [pc, #32]	; (80081d8 <__NVIC_SetPriority+0x50>)
 80081b8:	79fb      	ldrb	r3, [r7, #7]
 80081ba:	f003 030f 	and.w	r3, r3, #15
 80081be:	3b04      	subs	r3, #4
 80081c0:	0112      	lsls	r2, r2, #4
 80081c2:	b2d2      	uxtb	r2, r2
 80081c4:	440b      	add	r3, r1
 80081c6:	761a      	strb	r2, [r3, #24]
}
 80081c8:	bf00      	nop
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr
 80081d4:	e000e100 	.word	0xe000e100
 80081d8:	e000ed00 	.word	0xe000ed00

080081dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80081dc:	b480      	push	{r7}
 80081de:	b089      	sub	sp, #36	; 0x24
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f003 0307 	and.w	r3, r3, #7
 80081ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	f1c3 0307 	rsb	r3, r3, #7
 80081f6:	2b04      	cmp	r3, #4
 80081f8:	bf28      	it	cs
 80081fa:	2304      	movcs	r3, #4
 80081fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	3304      	adds	r3, #4
 8008202:	2b06      	cmp	r3, #6
 8008204:	d902      	bls.n	800820c <NVIC_EncodePriority+0x30>
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	3b03      	subs	r3, #3
 800820a:	e000      	b.n	800820e <NVIC_EncodePriority+0x32>
 800820c:	2300      	movs	r3, #0
 800820e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008210:	f04f 32ff 	mov.w	r2, #4294967295
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	fa02 f303 	lsl.w	r3, r2, r3
 800821a:	43da      	mvns	r2, r3
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	401a      	ands	r2, r3
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008224:	f04f 31ff 	mov.w	r1, #4294967295
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	fa01 f303 	lsl.w	r3, r1, r3
 800822e:	43d9      	mvns	r1, r3
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008234:	4313      	orrs	r3, r2
         );
}
 8008236:	4618      	mov	r0, r3
 8008238:	3724      	adds	r7, #36	; 0x24
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr
	...

08008244 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	3b01      	subs	r3, #1
 8008250:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008254:	d301      	bcc.n	800825a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008256:	2301      	movs	r3, #1
 8008258:	e00f      	b.n	800827a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800825a:	4a0a      	ldr	r2, [pc, #40]	; (8008284 <SysTick_Config+0x40>)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	3b01      	subs	r3, #1
 8008260:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008262:	210f      	movs	r1, #15
 8008264:	f04f 30ff 	mov.w	r0, #4294967295
 8008268:	f7ff ff8e 	bl	8008188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800826c:	4b05      	ldr	r3, [pc, #20]	; (8008284 <SysTick_Config+0x40>)
 800826e:	2200      	movs	r2, #0
 8008270:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008272:	4b04      	ldr	r3, [pc, #16]	; (8008284 <SysTick_Config+0x40>)
 8008274:	2207      	movs	r2, #7
 8008276:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3708      	adds	r7, #8
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	e000e010 	.word	0xe000e010

08008288 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f7ff ff29 	bl	80080e8 <__NVIC_SetPriorityGrouping>
}
 8008296:	bf00      	nop
 8008298:	3708      	adds	r7, #8
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800829e:	b580      	push	{r7, lr}
 80082a0:	b086      	sub	sp, #24
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	4603      	mov	r3, r0
 80082a6:	60b9      	str	r1, [r7, #8]
 80082a8:	607a      	str	r2, [r7, #4]
 80082aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80082ac:	2300      	movs	r3, #0
 80082ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80082b0:	f7ff ff3e 	bl	8008130 <__NVIC_GetPriorityGrouping>
 80082b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	68b9      	ldr	r1, [r7, #8]
 80082ba:	6978      	ldr	r0, [r7, #20]
 80082bc:	f7ff ff8e 	bl	80081dc <NVIC_EncodePriority>
 80082c0:	4602      	mov	r2, r0
 80082c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082c6:	4611      	mov	r1, r2
 80082c8:	4618      	mov	r0, r3
 80082ca:	f7ff ff5d 	bl	8008188 <__NVIC_SetPriority>
}
 80082ce:	bf00      	nop
 80082d0:	3718      	adds	r7, #24
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}

080082d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80082d6:	b580      	push	{r7, lr}
 80082d8:	b082      	sub	sp, #8
 80082da:	af00      	add	r7, sp, #0
 80082dc:	4603      	mov	r3, r0
 80082de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80082e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082e4:	4618      	mov	r0, r3
 80082e6:	f7ff ff31 	bl	800814c <__NVIC_EnableIRQ>
}
 80082ea:	bf00      	nop
 80082ec:	3708      	adds	r7, #8
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80082f2:	b580      	push	{r7, lr}
 80082f4:	b082      	sub	sp, #8
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f7ff ffa2 	bl	8008244 <SysTick_Config>
 8008300:	4603      	mov	r3, r0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3708      	adds	r7, #8
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
	...

0800830c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b086      	sub	sp, #24
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008314:	2300      	movs	r3, #0
 8008316:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008318:	f7ff f9ca 	bl	80076b0 <HAL_GetTick>
 800831c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d101      	bne.n	8008328 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	e099      	b.n	800845c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2202      	movs	r2, #2
 800832c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f022 0201 	bic.w	r2, r2, #1
 8008346:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008348:	e00f      	b.n	800836a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800834a:	f7ff f9b1 	bl	80076b0 <HAL_GetTick>
 800834e:	4602      	mov	r2, r0
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	1ad3      	subs	r3, r2, r3
 8008354:	2b05      	cmp	r3, #5
 8008356:	d908      	bls.n	800836a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2220      	movs	r2, #32
 800835c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2203      	movs	r2, #3
 8008362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008366:	2303      	movs	r3, #3
 8008368:	e078      	b.n	800845c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 0301 	and.w	r3, r3, #1
 8008374:	2b00      	cmp	r3, #0
 8008376:	d1e8      	bne.n	800834a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008380:	697a      	ldr	r2, [r7, #20]
 8008382:	4b38      	ldr	r3, [pc, #224]	; (8008464 <HAL_DMA_Init+0x158>)
 8008384:	4013      	ands	r3, r2
 8008386:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	685a      	ldr	r2, [r3, #4]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008396:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	691b      	ldr	r3, [r3, #16]
 800839c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80083a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	699b      	ldr	r3, [r3, #24]
 80083a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80083ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a1b      	ldr	r3, [r3, #32]
 80083b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80083b6:	697a      	ldr	r2, [r7, #20]
 80083b8:	4313      	orrs	r3, r2
 80083ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c0:	2b04      	cmp	r3, #4
 80083c2:	d107      	bne.n	80083d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083cc:	4313      	orrs	r3, r2
 80083ce:	697a      	ldr	r2, [r7, #20]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	697a      	ldr	r2, [r7, #20]
 80083da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	695b      	ldr	r3, [r3, #20]
 80083e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	f023 0307 	bic.w	r3, r3, #7
 80083ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f0:	697a      	ldr	r2, [r7, #20]
 80083f2:	4313      	orrs	r3, r2
 80083f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fa:	2b04      	cmp	r3, #4
 80083fc:	d117      	bne.n	800842e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008402:	697a      	ldr	r2, [r7, #20]
 8008404:	4313      	orrs	r3, r2
 8008406:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800840c:	2b00      	cmp	r3, #0
 800840e:	d00e      	beq.n	800842e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 fa7b 	bl	800890c <DMA_CheckFifoParam>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d008      	beq.n	800842e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2240      	movs	r2, #64	; 0x40
 8008420:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2201      	movs	r2, #1
 8008426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800842a:	2301      	movs	r3, #1
 800842c:	e016      	b.n	800845c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	697a      	ldr	r2, [r7, #20]
 8008434:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 fa32 	bl	80088a0 <DMA_CalcBaseAndBitshift>
 800843c:	4603      	mov	r3, r0
 800843e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008444:	223f      	movs	r2, #63	; 0x3f
 8008446:	409a      	lsls	r2, r3
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2201      	movs	r2, #1
 8008456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	3718      	adds	r7, #24
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	f010803f 	.word	0xf010803f

08008468 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008474:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008476:	f7ff f91b 	bl	80076b0 <HAL_GetTick>
 800847a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008482:	b2db      	uxtb	r3, r3
 8008484:	2b02      	cmp	r3, #2
 8008486:	d008      	beq.n	800849a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2280      	movs	r2, #128	; 0x80
 800848c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e052      	b.n	8008540 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f022 0216 	bic.w	r2, r2, #22
 80084a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	695a      	ldr	r2, [r3, #20]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d103      	bne.n	80084ca <HAL_DMA_Abort+0x62>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d007      	beq.n	80084da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f022 0208 	bic.w	r2, r2, #8
 80084d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f022 0201 	bic.w	r2, r2, #1
 80084e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80084ea:	e013      	b.n	8008514 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80084ec:	f7ff f8e0 	bl	80076b0 <HAL_GetTick>
 80084f0:	4602      	mov	r2, r0
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	2b05      	cmp	r3, #5
 80084f8:	d90c      	bls.n	8008514 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2220      	movs	r2, #32
 80084fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2203      	movs	r2, #3
 8008504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8008510:	2303      	movs	r3, #3
 8008512:	e015      	b.n	8008540 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f003 0301 	and.w	r3, r3, #1
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1e4      	bne.n	80084ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008526:	223f      	movs	r2, #63	; 0x3f
 8008528:	409a      	lsls	r2, r3
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2201      	movs	r2, #1
 8008532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800853e:	2300      	movs	r3, #0
}
 8008540:	4618      	mov	r0, r3
 8008542:	3710      	adds	r7, #16
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008556:	b2db      	uxtb	r3, r3
 8008558:	2b02      	cmp	r3, #2
 800855a:	d004      	beq.n	8008566 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2280      	movs	r2, #128	; 0x80
 8008560:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008562:	2301      	movs	r3, #1
 8008564:	e00c      	b.n	8008580 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2205      	movs	r2, #5
 800856a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f022 0201 	bic.w	r2, r2, #1
 800857c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800857e:	2300      	movs	r3, #0
}
 8008580:	4618      	mov	r0, r3
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b086      	sub	sp, #24
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008594:	2300      	movs	r3, #0
 8008596:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008598:	4b8e      	ldr	r3, [pc, #568]	; (80087d4 <HAL_DMA_IRQHandler+0x248>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a8e      	ldr	r2, [pc, #568]	; (80087d8 <HAL_DMA_IRQHandler+0x24c>)
 800859e:	fba2 2303 	umull	r2, r3, r2, r3
 80085a2:	0a9b      	lsrs	r3, r3, #10
 80085a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085b6:	2208      	movs	r2, #8
 80085b8:	409a      	lsls	r2, r3
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	4013      	ands	r3, r2
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d01a      	beq.n	80085f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f003 0304 	and.w	r3, r3, #4
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d013      	beq.n	80085f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f022 0204 	bic.w	r2, r2, #4
 80085de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085e4:	2208      	movs	r2, #8
 80085e6:	409a      	lsls	r2, r3
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085f0:	f043 0201 	orr.w	r2, r3, #1
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085fc:	2201      	movs	r2, #1
 80085fe:	409a      	lsls	r2, r3
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	4013      	ands	r3, r2
 8008604:	2b00      	cmp	r3, #0
 8008606:	d012      	beq.n	800862e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	695b      	ldr	r3, [r3, #20]
 800860e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008612:	2b00      	cmp	r3, #0
 8008614:	d00b      	beq.n	800862e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800861a:	2201      	movs	r2, #1
 800861c:	409a      	lsls	r2, r3
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008626:	f043 0202 	orr.w	r2, r3, #2
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008632:	2204      	movs	r2, #4
 8008634:	409a      	lsls	r2, r3
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	4013      	ands	r3, r2
 800863a:	2b00      	cmp	r3, #0
 800863c:	d012      	beq.n	8008664 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f003 0302 	and.w	r3, r3, #2
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00b      	beq.n	8008664 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008650:	2204      	movs	r2, #4
 8008652:	409a      	lsls	r2, r3
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800865c:	f043 0204 	orr.w	r2, r3, #4
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008668:	2210      	movs	r2, #16
 800866a:	409a      	lsls	r2, r3
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	4013      	ands	r3, r2
 8008670:	2b00      	cmp	r3, #0
 8008672:	d043      	beq.n	80086fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f003 0308 	and.w	r3, r3, #8
 800867e:	2b00      	cmp	r3, #0
 8008680:	d03c      	beq.n	80086fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008686:	2210      	movs	r2, #16
 8008688:	409a      	lsls	r2, r3
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008698:	2b00      	cmp	r3, #0
 800869a:	d018      	beq.n	80086ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d108      	bne.n	80086bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d024      	beq.n	80086fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	4798      	blx	r3
 80086ba:	e01f      	b.n	80086fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d01b      	beq.n	80086fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	4798      	blx	r3
 80086cc:	e016      	b.n	80086fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d107      	bne.n	80086ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f022 0208 	bic.w	r2, r2, #8
 80086ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d003      	beq.n	80086fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008700:	2220      	movs	r2, #32
 8008702:	409a      	lsls	r2, r3
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	4013      	ands	r3, r2
 8008708:	2b00      	cmp	r3, #0
 800870a:	f000 808f 	beq.w	800882c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f003 0310 	and.w	r3, r3, #16
 8008718:	2b00      	cmp	r3, #0
 800871a:	f000 8087 	beq.w	800882c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008722:	2220      	movs	r2, #32
 8008724:	409a      	lsls	r2, r3
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008730:	b2db      	uxtb	r3, r3
 8008732:	2b05      	cmp	r3, #5
 8008734:	d136      	bne.n	80087a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f022 0216 	bic.w	r2, r2, #22
 8008744:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	695a      	ldr	r2, [r3, #20]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008754:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800875a:	2b00      	cmp	r3, #0
 800875c:	d103      	bne.n	8008766 <HAL_DMA_IRQHandler+0x1da>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008762:	2b00      	cmp	r3, #0
 8008764:	d007      	beq.n	8008776 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f022 0208 	bic.w	r2, r2, #8
 8008774:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800877a:	223f      	movs	r2, #63	; 0x3f
 800877c:	409a      	lsls	r2, r3
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2201      	movs	r2, #1
 8008786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008796:	2b00      	cmp	r3, #0
 8008798:	d07e      	beq.n	8008898 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	4798      	blx	r3
        }
        return;
 80087a2:	e079      	b.n	8008898 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d01d      	beq.n	80087ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d10d      	bne.n	80087dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d031      	beq.n	800882c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	4798      	blx	r3
 80087d0:	e02c      	b.n	800882c <HAL_DMA_IRQHandler+0x2a0>
 80087d2:	bf00      	nop
 80087d4:	20000020 	.word	0x20000020
 80087d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d023      	beq.n	800882c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	4798      	blx	r3
 80087ec:	e01e      	b.n	800882c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d10f      	bne.n	800881c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f022 0210 	bic.w	r2, r2, #16
 800880a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008820:	2b00      	cmp	r3, #0
 8008822:	d003      	beq.n	800882c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008830:	2b00      	cmp	r3, #0
 8008832:	d032      	beq.n	800889a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008838:	f003 0301 	and.w	r3, r3, #1
 800883c:	2b00      	cmp	r3, #0
 800883e:	d022      	beq.n	8008886 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2205      	movs	r2, #5
 8008844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f022 0201 	bic.w	r2, r2, #1
 8008856:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	3301      	adds	r3, #1
 800885c:	60bb      	str	r3, [r7, #8]
 800885e:	697a      	ldr	r2, [r7, #20]
 8008860:	429a      	cmp	r2, r3
 8008862:	d307      	bcc.n	8008874 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f003 0301 	and.w	r3, r3, #1
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1f2      	bne.n	8008858 <HAL_DMA_IRQHandler+0x2cc>
 8008872:	e000      	b.n	8008876 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008874:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2201      	movs	r2, #1
 800887a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800888a:	2b00      	cmp	r3, #0
 800888c:	d005      	beq.n	800889a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	4798      	blx	r3
 8008896:	e000      	b.n	800889a <HAL_DMA_IRQHandler+0x30e>
        return;
 8008898:	bf00      	nop
    }
  }
}
 800889a:	3718      	adds	r7, #24
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b085      	sub	sp, #20
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	3b10      	subs	r3, #16
 80088b0:	4a14      	ldr	r2, [pc, #80]	; (8008904 <DMA_CalcBaseAndBitshift+0x64>)
 80088b2:	fba2 2303 	umull	r2, r3, r2, r3
 80088b6:	091b      	lsrs	r3, r3, #4
 80088b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80088ba:	4a13      	ldr	r2, [pc, #76]	; (8008908 <DMA_CalcBaseAndBitshift+0x68>)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	4413      	add	r3, r2
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	461a      	mov	r2, r3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2b03      	cmp	r3, #3
 80088cc:	d909      	bls.n	80088e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80088d6:	f023 0303 	bic.w	r3, r3, #3
 80088da:	1d1a      	adds	r2, r3, #4
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	659a      	str	r2, [r3, #88]	; 0x58
 80088e0:	e007      	b.n	80088f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80088ea:	f023 0303 	bic.w	r3, r3, #3
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3714      	adds	r7, #20
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	aaaaaaab 	.word	0xaaaaaaab
 8008908:	0800f624 	.word	0x0800f624

0800890c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008914:	2300      	movs	r3, #0
 8008916:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800891c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	699b      	ldr	r3, [r3, #24]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d11f      	bne.n	8008966 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	2b03      	cmp	r3, #3
 800892a:	d856      	bhi.n	80089da <DMA_CheckFifoParam+0xce>
 800892c:	a201      	add	r2, pc, #4	; (adr r2, 8008934 <DMA_CheckFifoParam+0x28>)
 800892e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008932:	bf00      	nop
 8008934:	08008945 	.word	0x08008945
 8008938:	08008957 	.word	0x08008957
 800893c:	08008945 	.word	0x08008945
 8008940:	080089db 	.word	0x080089db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008948:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800894c:	2b00      	cmp	r3, #0
 800894e:	d046      	beq.n	80089de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008954:	e043      	b.n	80089de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800895e:	d140      	bne.n	80089e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008964:	e03d      	b.n	80089e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	699b      	ldr	r3, [r3, #24]
 800896a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800896e:	d121      	bne.n	80089b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	2b03      	cmp	r3, #3
 8008974:	d837      	bhi.n	80089e6 <DMA_CheckFifoParam+0xda>
 8008976:	a201      	add	r2, pc, #4	; (adr r2, 800897c <DMA_CheckFifoParam+0x70>)
 8008978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800897c:	0800898d 	.word	0x0800898d
 8008980:	08008993 	.word	0x08008993
 8008984:	0800898d 	.word	0x0800898d
 8008988:	080089a5 	.word	0x080089a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800898c:	2301      	movs	r3, #1
 800898e:	73fb      	strb	r3, [r7, #15]
      break;
 8008990:	e030      	b.n	80089f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008996:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800899a:	2b00      	cmp	r3, #0
 800899c:	d025      	beq.n	80089ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80089a2:	e022      	b.n	80089ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80089ac:	d11f      	bne.n	80089ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80089ae:	2301      	movs	r3, #1
 80089b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80089b2:	e01c      	b.n	80089ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	2b02      	cmp	r3, #2
 80089b8:	d903      	bls.n	80089c2 <DMA_CheckFifoParam+0xb6>
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	2b03      	cmp	r3, #3
 80089be:	d003      	beq.n	80089c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80089c0:	e018      	b.n	80089f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	73fb      	strb	r3, [r7, #15]
      break;
 80089c6:	e015      	b.n	80089f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d00e      	beq.n	80089f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	73fb      	strb	r3, [r7, #15]
      break;
 80089d8:	e00b      	b.n	80089f2 <DMA_CheckFifoParam+0xe6>
      break;
 80089da:	bf00      	nop
 80089dc:	e00a      	b.n	80089f4 <DMA_CheckFifoParam+0xe8>
      break;
 80089de:	bf00      	nop
 80089e0:	e008      	b.n	80089f4 <DMA_CheckFifoParam+0xe8>
      break;
 80089e2:	bf00      	nop
 80089e4:	e006      	b.n	80089f4 <DMA_CheckFifoParam+0xe8>
      break;
 80089e6:	bf00      	nop
 80089e8:	e004      	b.n	80089f4 <DMA_CheckFifoParam+0xe8>
      break;
 80089ea:	bf00      	nop
 80089ec:	e002      	b.n	80089f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80089ee:	bf00      	nop
 80089f0:	e000      	b.n	80089f4 <DMA_CheckFifoParam+0xe8>
      break;
 80089f2:	bf00      	nop
    }
  } 
  
  return status; 
 80089f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3714      	adds	r7, #20
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr
 8008a02:	bf00      	nop

08008a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b089      	sub	sp, #36	; 0x24
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008a12:	2300      	movs	r3, #0
 8008a14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008a16:	2300      	movs	r3, #0
 8008a18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	61fb      	str	r3, [r7, #28]
 8008a1e:	e159      	b.n	8008cd4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008a20:	2201      	movs	r2, #1
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	fa02 f303 	lsl.w	r3, r2, r3
 8008a28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	4013      	ands	r3, r2
 8008a32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008a34:	693a      	ldr	r2, [r7, #16]
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	f040 8148 	bne.w	8008cce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	f003 0303 	and.w	r3, r3, #3
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d005      	beq.n	8008a56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008a52:	2b02      	cmp	r3, #2
 8008a54:	d130      	bne.n	8008ab8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	005b      	lsls	r3, r3, #1
 8008a60:	2203      	movs	r2, #3
 8008a62:	fa02 f303 	lsl.w	r3, r2, r3
 8008a66:	43db      	mvns	r3, r3
 8008a68:	69ba      	ldr	r2, [r7, #24]
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	68da      	ldr	r2, [r3, #12]
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	005b      	lsls	r3, r3, #1
 8008a76:	fa02 f303 	lsl.w	r3, r2, r3
 8008a7a:	69ba      	ldr	r2, [r7, #24]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	69ba      	ldr	r2, [r7, #24]
 8008a84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	fa02 f303 	lsl.w	r3, r2, r3
 8008a94:	43db      	mvns	r3, r3
 8008a96:	69ba      	ldr	r2, [r7, #24]
 8008a98:	4013      	ands	r3, r2
 8008a9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	091b      	lsrs	r3, r3, #4
 8008aa2:	f003 0201 	and.w	r2, r3, #1
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8008aac:	69ba      	ldr	r2, [r7, #24]
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	69ba      	ldr	r2, [r7, #24]
 8008ab6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	f003 0303 	and.w	r3, r3, #3
 8008ac0:	2b03      	cmp	r3, #3
 8008ac2:	d017      	beq.n	8008af4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	005b      	lsls	r3, r3, #1
 8008ace:	2203      	movs	r2, #3
 8008ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ad4:	43db      	mvns	r3, r3
 8008ad6:	69ba      	ldr	r2, [r7, #24]
 8008ad8:	4013      	ands	r3, r2
 8008ada:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	689a      	ldr	r2, [r3, #8]
 8008ae0:	69fb      	ldr	r3, [r7, #28]
 8008ae2:	005b      	lsls	r3, r3, #1
 8008ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ae8:	69ba      	ldr	r2, [r7, #24]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	69ba      	ldr	r2, [r7, #24]
 8008af2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	f003 0303 	and.w	r3, r3, #3
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	d123      	bne.n	8008b48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	08da      	lsrs	r2, r3, #3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	3208      	adds	r2, #8
 8008b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	f003 0307 	and.w	r3, r3, #7
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	220f      	movs	r2, #15
 8008b18:	fa02 f303 	lsl.w	r3, r2, r3
 8008b1c:	43db      	mvns	r3, r3
 8008b1e:	69ba      	ldr	r2, [r7, #24]
 8008b20:	4013      	ands	r3, r2
 8008b22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	691a      	ldr	r2, [r3, #16]
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	f003 0307 	and.w	r3, r3, #7
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	fa02 f303 	lsl.w	r3, r2, r3
 8008b34:	69ba      	ldr	r2, [r7, #24]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	08da      	lsrs	r2, r3, #3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	3208      	adds	r2, #8
 8008b42:	69b9      	ldr	r1, [r7, #24]
 8008b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	005b      	lsls	r3, r3, #1
 8008b52:	2203      	movs	r2, #3
 8008b54:	fa02 f303 	lsl.w	r3, r2, r3
 8008b58:	43db      	mvns	r3, r3
 8008b5a:	69ba      	ldr	r2, [r7, #24]
 8008b5c:	4013      	ands	r3, r2
 8008b5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	f003 0203 	and.w	r2, r3, #3
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	005b      	lsls	r3, r3, #1
 8008b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b70:	69ba      	ldr	r2, [r7, #24]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	69ba      	ldr	r2, [r7, #24]
 8008b7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f000 80a2 	beq.w	8008cce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	60fb      	str	r3, [r7, #12]
 8008b8e:	4b57      	ldr	r3, [pc, #348]	; (8008cec <HAL_GPIO_Init+0x2e8>)
 8008b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b92:	4a56      	ldr	r2, [pc, #344]	; (8008cec <HAL_GPIO_Init+0x2e8>)
 8008b94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008b98:	6453      	str	r3, [r2, #68]	; 0x44
 8008b9a:	4b54      	ldr	r3, [pc, #336]	; (8008cec <HAL_GPIO_Init+0x2e8>)
 8008b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ba2:	60fb      	str	r3, [r7, #12]
 8008ba4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008ba6:	4a52      	ldr	r2, [pc, #328]	; (8008cf0 <HAL_GPIO_Init+0x2ec>)
 8008ba8:	69fb      	ldr	r3, [r7, #28]
 8008baa:	089b      	lsrs	r3, r3, #2
 8008bac:	3302      	adds	r3, #2
 8008bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	f003 0303 	and.w	r3, r3, #3
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	220f      	movs	r2, #15
 8008bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc2:	43db      	mvns	r3, r3
 8008bc4:	69ba      	ldr	r2, [r7, #24]
 8008bc6:	4013      	ands	r3, r2
 8008bc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4a49      	ldr	r2, [pc, #292]	; (8008cf4 <HAL_GPIO_Init+0x2f0>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d019      	beq.n	8008c06 <HAL_GPIO_Init+0x202>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4a48      	ldr	r2, [pc, #288]	; (8008cf8 <HAL_GPIO_Init+0x2f4>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d013      	beq.n	8008c02 <HAL_GPIO_Init+0x1fe>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4a47      	ldr	r2, [pc, #284]	; (8008cfc <HAL_GPIO_Init+0x2f8>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d00d      	beq.n	8008bfe <HAL_GPIO_Init+0x1fa>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a46      	ldr	r2, [pc, #280]	; (8008d00 <HAL_GPIO_Init+0x2fc>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d007      	beq.n	8008bfa <HAL_GPIO_Init+0x1f6>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a45      	ldr	r2, [pc, #276]	; (8008d04 <HAL_GPIO_Init+0x300>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d101      	bne.n	8008bf6 <HAL_GPIO_Init+0x1f2>
 8008bf2:	2304      	movs	r3, #4
 8008bf4:	e008      	b.n	8008c08 <HAL_GPIO_Init+0x204>
 8008bf6:	2307      	movs	r3, #7
 8008bf8:	e006      	b.n	8008c08 <HAL_GPIO_Init+0x204>
 8008bfa:	2303      	movs	r3, #3
 8008bfc:	e004      	b.n	8008c08 <HAL_GPIO_Init+0x204>
 8008bfe:	2302      	movs	r3, #2
 8008c00:	e002      	b.n	8008c08 <HAL_GPIO_Init+0x204>
 8008c02:	2301      	movs	r3, #1
 8008c04:	e000      	b.n	8008c08 <HAL_GPIO_Init+0x204>
 8008c06:	2300      	movs	r3, #0
 8008c08:	69fa      	ldr	r2, [r7, #28]
 8008c0a:	f002 0203 	and.w	r2, r2, #3
 8008c0e:	0092      	lsls	r2, r2, #2
 8008c10:	4093      	lsls	r3, r2
 8008c12:	69ba      	ldr	r2, [r7, #24]
 8008c14:	4313      	orrs	r3, r2
 8008c16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008c18:	4935      	ldr	r1, [pc, #212]	; (8008cf0 <HAL_GPIO_Init+0x2ec>)
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	089b      	lsrs	r3, r3, #2
 8008c1e:	3302      	adds	r3, #2
 8008c20:	69ba      	ldr	r2, [r7, #24]
 8008c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008c26:	4b38      	ldr	r3, [pc, #224]	; (8008d08 <HAL_GPIO_Init+0x304>)
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	43db      	mvns	r3, r3
 8008c30:	69ba      	ldr	r2, [r7, #24]
 8008c32:	4013      	ands	r3, r2
 8008c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d003      	beq.n	8008c4a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8008c42:	69ba      	ldr	r2, [r7, #24]
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	4313      	orrs	r3, r2
 8008c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008c4a:	4a2f      	ldr	r2, [pc, #188]	; (8008d08 <HAL_GPIO_Init+0x304>)
 8008c4c:	69bb      	ldr	r3, [r7, #24]
 8008c4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008c50:	4b2d      	ldr	r3, [pc, #180]	; (8008d08 <HAL_GPIO_Init+0x304>)
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	43db      	mvns	r3, r3
 8008c5a:	69ba      	ldr	r2, [r7, #24]
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d003      	beq.n	8008c74 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8008c6c:	69ba      	ldr	r2, [r7, #24]
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008c74:	4a24      	ldr	r2, [pc, #144]	; (8008d08 <HAL_GPIO_Init+0x304>)
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008c7a:	4b23      	ldr	r3, [pc, #140]	; (8008d08 <HAL_GPIO_Init+0x304>)
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	43db      	mvns	r3, r3
 8008c84:	69ba      	ldr	r2, [r7, #24]
 8008c86:	4013      	ands	r3, r2
 8008c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d003      	beq.n	8008c9e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8008c96:	69ba      	ldr	r2, [r7, #24]
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008c9e:	4a1a      	ldr	r2, [pc, #104]	; (8008d08 <HAL_GPIO_Init+0x304>)
 8008ca0:	69bb      	ldr	r3, [r7, #24]
 8008ca2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008ca4:	4b18      	ldr	r3, [pc, #96]	; (8008d08 <HAL_GPIO_Init+0x304>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	43db      	mvns	r3, r3
 8008cae:	69ba      	ldr	r2, [r7, #24]
 8008cb0:	4013      	ands	r3, r2
 8008cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d003      	beq.n	8008cc8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8008cc0:	69ba      	ldr	r2, [r7, #24]
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008cc8:	4a0f      	ldr	r2, [pc, #60]	; (8008d08 <HAL_GPIO_Init+0x304>)
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008cce:	69fb      	ldr	r3, [r7, #28]
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	61fb      	str	r3, [r7, #28]
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	2b0f      	cmp	r3, #15
 8008cd8:	f67f aea2 	bls.w	8008a20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008cdc:	bf00      	nop
 8008cde:	bf00      	nop
 8008ce0:	3724      	adds	r7, #36	; 0x24
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr
 8008cea:	bf00      	nop
 8008cec:	40023800 	.word	0x40023800
 8008cf0:	40013800 	.word	0x40013800
 8008cf4:	40020000 	.word	0x40020000
 8008cf8:	40020400 	.word	0x40020400
 8008cfc:	40020800 	.word	0x40020800
 8008d00:	40020c00 	.word	0x40020c00
 8008d04:	40021000 	.word	0x40021000
 8008d08:	40013c00 	.word	0x40013c00

08008d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	460b      	mov	r3, r1
 8008d16:	807b      	strh	r3, [r7, #2]
 8008d18:	4613      	mov	r3, r2
 8008d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008d1c:	787b      	ldrb	r3, [r7, #1]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d003      	beq.n	8008d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008d22:	887a      	ldrh	r2, [r7, #2]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008d28:	e003      	b.n	8008d32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008d2a:	887b      	ldrh	r3, [r7, #2]
 8008d2c:	041a      	lsls	r2, r3, #16
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	619a      	str	r2, [r3, #24]
}
 8008d32:	bf00      	nop
 8008d34:	370c      	adds	r7, #12
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr
	...

08008d40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d101      	bne.n	8008d52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e12b      	b.n	8008faa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d106      	bne.n	8008d6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f7f8 ffaa 	bl	8001cc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2224      	movs	r2, #36	; 0x24
 8008d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f022 0201 	bic.w	r2, r2, #1
 8008d82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008da2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008da4:	f001 fbd2 	bl	800a54c <HAL_RCC_GetPCLK1Freq>
 8008da8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	4a81      	ldr	r2, [pc, #516]	; (8008fb4 <HAL_I2C_Init+0x274>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d807      	bhi.n	8008dc4 <HAL_I2C_Init+0x84>
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	4a80      	ldr	r2, [pc, #512]	; (8008fb8 <HAL_I2C_Init+0x278>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	bf94      	ite	ls
 8008dbc:	2301      	movls	r3, #1
 8008dbe:	2300      	movhi	r3, #0
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	e006      	b.n	8008dd2 <HAL_I2C_Init+0x92>
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	4a7d      	ldr	r2, [pc, #500]	; (8008fbc <HAL_I2C_Init+0x27c>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	bf94      	ite	ls
 8008dcc:	2301      	movls	r3, #1
 8008dce:	2300      	movhi	r3, #0
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d001      	beq.n	8008dda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e0e7      	b.n	8008faa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	4a78      	ldr	r2, [pc, #480]	; (8008fc0 <HAL_I2C_Init+0x280>)
 8008dde:	fba2 2303 	umull	r2, r3, r2, r3
 8008de2:	0c9b      	lsrs	r3, r3, #18
 8008de4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	68ba      	ldr	r2, [r7, #8]
 8008df6:	430a      	orrs	r2, r1
 8008df8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	6a1b      	ldr	r3, [r3, #32]
 8008e00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	4a6a      	ldr	r2, [pc, #424]	; (8008fb4 <HAL_I2C_Init+0x274>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d802      	bhi.n	8008e14 <HAL_I2C_Init+0xd4>
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	3301      	adds	r3, #1
 8008e12:	e009      	b.n	8008e28 <HAL_I2C_Init+0xe8>
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008e1a:	fb02 f303 	mul.w	r3, r2, r3
 8008e1e:	4a69      	ldr	r2, [pc, #420]	; (8008fc4 <HAL_I2C_Init+0x284>)
 8008e20:	fba2 2303 	umull	r2, r3, r2, r3
 8008e24:	099b      	lsrs	r3, r3, #6
 8008e26:	3301      	adds	r3, #1
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	6812      	ldr	r2, [r2, #0]
 8008e2c:	430b      	orrs	r3, r1
 8008e2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	69db      	ldr	r3, [r3, #28]
 8008e36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008e3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	495c      	ldr	r1, [pc, #368]	; (8008fb4 <HAL_I2C_Init+0x274>)
 8008e44:	428b      	cmp	r3, r1
 8008e46:	d819      	bhi.n	8008e7c <HAL_I2C_Init+0x13c>
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	1e59      	subs	r1, r3, #1
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	005b      	lsls	r3, r3, #1
 8008e52:	fbb1 f3f3 	udiv	r3, r1, r3
 8008e56:	1c59      	adds	r1, r3, #1
 8008e58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008e5c:	400b      	ands	r3, r1
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d00a      	beq.n	8008e78 <HAL_I2C_Init+0x138>
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	1e59      	subs	r1, r3, #1
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	005b      	lsls	r3, r3, #1
 8008e6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008e70:	3301      	adds	r3, #1
 8008e72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e76:	e051      	b.n	8008f1c <HAL_I2C_Init+0x1dc>
 8008e78:	2304      	movs	r3, #4
 8008e7a:	e04f      	b.n	8008f1c <HAL_I2C_Init+0x1dc>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d111      	bne.n	8008ea8 <HAL_I2C_Init+0x168>
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	1e58      	subs	r0, r3, #1
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6859      	ldr	r1, [r3, #4]
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	005b      	lsls	r3, r3, #1
 8008e90:	440b      	add	r3, r1
 8008e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8008e96:	3301      	adds	r3, #1
 8008e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	bf0c      	ite	eq
 8008ea0:	2301      	moveq	r3, #1
 8008ea2:	2300      	movne	r3, #0
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	e012      	b.n	8008ece <HAL_I2C_Init+0x18e>
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	1e58      	subs	r0, r3, #1
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6859      	ldr	r1, [r3, #4]
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	440b      	add	r3, r1
 8008eb6:	0099      	lsls	r1, r3, #2
 8008eb8:	440b      	add	r3, r1
 8008eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	bf0c      	ite	eq
 8008ec8:	2301      	moveq	r3, #1
 8008eca:	2300      	movne	r3, #0
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d001      	beq.n	8008ed6 <HAL_I2C_Init+0x196>
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e022      	b.n	8008f1c <HAL_I2C_Init+0x1dc>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d10e      	bne.n	8008efc <HAL_I2C_Init+0x1bc>
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	1e58      	subs	r0, r3, #1
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6859      	ldr	r1, [r3, #4]
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	005b      	lsls	r3, r3, #1
 8008eea:	440b      	add	r3, r1
 8008eec:	fbb0 f3f3 	udiv	r3, r0, r3
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008efa:	e00f      	b.n	8008f1c <HAL_I2C_Init+0x1dc>
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	1e58      	subs	r0, r3, #1
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6859      	ldr	r1, [r3, #4]
 8008f04:	460b      	mov	r3, r1
 8008f06:	009b      	lsls	r3, r3, #2
 8008f08:	440b      	add	r3, r1
 8008f0a:	0099      	lsls	r1, r3, #2
 8008f0c:	440b      	add	r3, r1
 8008f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f12:	3301      	adds	r3, #1
 8008f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008f1c:	6879      	ldr	r1, [r7, #4]
 8008f1e:	6809      	ldr	r1, [r1, #0]
 8008f20:	4313      	orrs	r3, r2
 8008f22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	69da      	ldr	r2, [r3, #28]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6a1b      	ldr	r3, [r3, #32]
 8008f36:	431a      	orrs	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	430a      	orrs	r2, r1
 8008f3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	689b      	ldr	r3, [r3, #8]
 8008f46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008f4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	6911      	ldr	r1, [r2, #16]
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	68d2      	ldr	r2, [r2, #12]
 8008f56:	4311      	orrs	r1, r2
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	6812      	ldr	r2, [r2, #0]
 8008f5c:	430b      	orrs	r3, r1
 8008f5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	695a      	ldr	r2, [r3, #20]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	699b      	ldr	r3, [r3, #24]
 8008f72:	431a      	orrs	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	430a      	orrs	r2, r1
 8008f7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f042 0201 	orr.w	r2, r2, #1
 8008f8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2220      	movs	r2, #32
 8008f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008fa8:	2300      	movs	r3, #0
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	000186a0 	.word	0x000186a0
 8008fb8:	001e847f 	.word	0x001e847f
 8008fbc:	003d08ff 	.word	0x003d08ff
 8008fc0:	431bde83 	.word	0x431bde83
 8008fc4:	10624dd3 	.word	0x10624dd3

08008fc8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b088      	sub	sp, #32
 8008fcc:	af02      	add	r7, sp, #8
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	607a      	str	r2, [r7, #4]
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	817b      	strh	r3, [r7, #10]
 8008fd8:	4613      	mov	r3, r2
 8008fda:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008fdc:	f7fe fb68 	bl	80076b0 <HAL_GetTick>
 8008fe0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	2b20      	cmp	r3, #32
 8008fec:	f040 80e0 	bne.w	80091b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	9300      	str	r3, [sp, #0]
 8008ff4:	2319      	movs	r3, #25
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	4970      	ldr	r1, [pc, #448]	; (80091bc <HAL_I2C_Master_Transmit+0x1f4>)
 8008ffa:	68f8      	ldr	r0, [r7, #12]
 8008ffc:	f000 fc58 	bl	80098b0 <I2C_WaitOnFlagUntilTimeout>
 8009000:	4603      	mov	r3, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	d001      	beq.n	800900a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009006:	2302      	movs	r3, #2
 8009008:	e0d3      	b.n	80091b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009010:	2b01      	cmp	r3, #1
 8009012:	d101      	bne.n	8009018 <HAL_I2C_Master_Transmit+0x50>
 8009014:	2302      	movs	r3, #2
 8009016:	e0cc      	b.n	80091b2 <HAL_I2C_Master_Transmit+0x1ea>
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f003 0301 	and.w	r3, r3, #1
 800902a:	2b01      	cmp	r3, #1
 800902c:	d007      	beq.n	800903e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	681a      	ldr	r2, [r3, #0]
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f042 0201 	orr.w	r2, r2, #1
 800903c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800904c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2221      	movs	r2, #33	; 0x21
 8009052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2210      	movs	r2, #16
 800905a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2200      	movs	r2, #0
 8009062:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	893a      	ldrh	r2, [r7, #8]
 800906e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009074:	b29a      	uxth	r2, r3
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	4a50      	ldr	r2, [pc, #320]	; (80091c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800907e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009080:	8979      	ldrh	r1, [r7, #10]
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	6a3a      	ldr	r2, [r7, #32]
 8009086:	68f8      	ldr	r0, [r7, #12]
 8009088:	f000 fac2 	bl	8009610 <I2C_MasterRequestWrite>
 800908c:	4603      	mov	r3, r0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d001      	beq.n	8009096 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009092:	2301      	movs	r3, #1
 8009094:	e08d      	b.n	80091b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009096:	2300      	movs	r3, #0
 8009098:	613b      	str	r3, [r7, #16]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	695b      	ldr	r3, [r3, #20]
 80090a0:	613b      	str	r3, [r7, #16]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	699b      	ldr	r3, [r3, #24]
 80090a8:	613b      	str	r3, [r7, #16]
 80090aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80090ac:	e066      	b.n	800917c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090ae:	697a      	ldr	r2, [r7, #20]
 80090b0:	6a39      	ldr	r1, [r7, #32]
 80090b2:	68f8      	ldr	r0, [r7, #12]
 80090b4:	f000 fcd2 	bl	8009a5c <I2C_WaitOnTXEFlagUntilTimeout>
 80090b8:	4603      	mov	r3, r0
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d00d      	beq.n	80090da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c2:	2b04      	cmp	r3, #4
 80090c4:	d107      	bne.n	80090d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80090d6:	2301      	movs	r3, #1
 80090d8:	e06b      	b.n	80091b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090de:	781a      	ldrb	r2, [r3, #0]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ea:	1c5a      	adds	r2, r3, #1
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	3b01      	subs	r3, #1
 80090f8:	b29a      	uxth	r2, r3
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009102:	3b01      	subs	r3, #1
 8009104:	b29a      	uxth	r2, r3
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	695b      	ldr	r3, [r3, #20]
 8009110:	f003 0304 	and.w	r3, r3, #4
 8009114:	2b04      	cmp	r3, #4
 8009116:	d11b      	bne.n	8009150 <HAL_I2C_Master_Transmit+0x188>
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800911c:	2b00      	cmp	r3, #0
 800911e:	d017      	beq.n	8009150 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009124:	781a      	ldrb	r2, [r3, #0]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009130:	1c5a      	adds	r2, r3, #1
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800913a:	b29b      	uxth	r3, r3
 800913c:	3b01      	subs	r3, #1
 800913e:	b29a      	uxth	r2, r3
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009148:	3b01      	subs	r3, #1
 800914a:	b29a      	uxth	r2, r3
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009150:	697a      	ldr	r2, [r7, #20]
 8009152:	6a39      	ldr	r1, [r7, #32]
 8009154:	68f8      	ldr	r0, [r7, #12]
 8009156:	f000 fcc2 	bl	8009ade <I2C_WaitOnBTFFlagUntilTimeout>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d00d      	beq.n	800917c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009164:	2b04      	cmp	r3, #4
 8009166:	d107      	bne.n	8009178 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009176:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009178:	2301      	movs	r3, #1
 800917a:	e01a      	b.n	80091b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009180:	2b00      	cmp	r3, #0
 8009182:	d194      	bne.n	80090ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009192:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2220      	movs	r2, #32
 8009198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2200      	movs	r2, #0
 80091a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80091ac:	2300      	movs	r3, #0
 80091ae:	e000      	b.n	80091b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80091b0:	2302      	movs	r3, #2
  }
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3718      	adds	r7, #24
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	00100002 	.word	0x00100002
 80091c0:	ffff0000 	.word	0xffff0000

080091c4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b08c      	sub	sp, #48	; 0x30
 80091c8:	af02      	add	r7, sp, #8
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	607a      	str	r2, [r7, #4]
 80091ce:	461a      	mov	r2, r3
 80091d0:	460b      	mov	r3, r1
 80091d2:	817b      	strh	r3, [r7, #10]
 80091d4:	4613      	mov	r3, r2
 80091d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80091d8:	f7fe fa6a 	bl	80076b0 <HAL_GetTick>
 80091dc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	2b20      	cmp	r3, #32
 80091e8:	f040 820b 	bne.w	8009602 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80091ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ee:	9300      	str	r3, [sp, #0]
 80091f0:	2319      	movs	r3, #25
 80091f2:	2201      	movs	r2, #1
 80091f4:	497c      	ldr	r1, [pc, #496]	; (80093e8 <HAL_I2C_Master_Receive+0x224>)
 80091f6:	68f8      	ldr	r0, [r7, #12]
 80091f8:	f000 fb5a 	bl	80098b0 <I2C_WaitOnFlagUntilTimeout>
 80091fc:	4603      	mov	r3, r0
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d001      	beq.n	8009206 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8009202:	2302      	movs	r3, #2
 8009204:	e1fe      	b.n	8009604 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800920c:	2b01      	cmp	r3, #1
 800920e:	d101      	bne.n	8009214 <HAL_I2C_Master_Receive+0x50>
 8009210:	2302      	movs	r3, #2
 8009212:	e1f7      	b.n	8009604 <HAL_I2C_Master_Receive+0x440>
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2201      	movs	r2, #1
 8009218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f003 0301 	and.w	r3, r3, #1
 8009226:	2b01      	cmp	r3, #1
 8009228:	d007      	beq.n	800923a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f042 0201 	orr.w	r2, r2, #1
 8009238:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009248:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2222      	movs	r2, #34	; 0x22
 800924e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2210      	movs	r2, #16
 8009256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2200      	movs	r2, #0
 800925e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	893a      	ldrh	r2, [r7, #8]
 800926a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009270:	b29a      	uxth	r2, r3
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	4a5c      	ldr	r2, [pc, #368]	; (80093ec <HAL_I2C_Master_Receive+0x228>)
 800927a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800927c:	8979      	ldrh	r1, [r7, #10]
 800927e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009282:	68f8      	ldr	r0, [r7, #12]
 8009284:	f000 fa46 	bl	8009714 <I2C_MasterRequestRead>
 8009288:	4603      	mov	r3, r0
 800928a:	2b00      	cmp	r3, #0
 800928c:	d001      	beq.n	8009292 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	e1b8      	b.n	8009604 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009296:	2b00      	cmp	r3, #0
 8009298:	d113      	bne.n	80092c2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800929a:	2300      	movs	r3, #0
 800929c:	623b      	str	r3, [r7, #32]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	695b      	ldr	r3, [r3, #20]
 80092a4:	623b      	str	r3, [r7, #32]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	699b      	ldr	r3, [r3, #24]
 80092ac:	623b      	str	r3, [r7, #32]
 80092ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092be:	601a      	str	r2, [r3, #0]
 80092c0:	e18c      	b.n	80095dc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d11b      	bne.n	8009302 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	681a      	ldr	r2, [r3, #0]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092da:	2300      	movs	r3, #0
 80092dc:	61fb      	str	r3, [r7, #28]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	695b      	ldr	r3, [r3, #20]
 80092e4:	61fb      	str	r3, [r7, #28]
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	699b      	ldr	r3, [r3, #24]
 80092ec:	61fb      	str	r3, [r7, #28]
 80092ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092fe:	601a      	str	r2, [r3, #0]
 8009300:	e16c      	b.n	80095dc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009306:	2b02      	cmp	r3, #2
 8009308:	d11b      	bne.n	8009342 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009318:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009328:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800932a:	2300      	movs	r3, #0
 800932c:	61bb      	str	r3, [r7, #24]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	695b      	ldr	r3, [r3, #20]
 8009334:	61bb      	str	r3, [r7, #24]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	699b      	ldr	r3, [r3, #24]
 800933c:	61bb      	str	r3, [r7, #24]
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	e14c      	b.n	80095dc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009350:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009352:	2300      	movs	r3, #0
 8009354:	617b      	str	r3, [r7, #20]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	695b      	ldr	r3, [r3, #20]
 800935c:	617b      	str	r3, [r7, #20]
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	699b      	ldr	r3, [r3, #24]
 8009364:	617b      	str	r3, [r7, #20]
 8009366:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009368:	e138      	b.n	80095dc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800936e:	2b03      	cmp	r3, #3
 8009370:	f200 80f1 	bhi.w	8009556 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009378:	2b01      	cmp	r3, #1
 800937a:	d123      	bne.n	80093c4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800937c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800937e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	f000 fbed 	bl	8009b60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d001      	beq.n	8009390 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	e139      	b.n	8009604 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	691a      	ldr	r2, [r3, #16]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800939a:	b2d2      	uxtb	r2, r2
 800939c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a2:	1c5a      	adds	r2, r3, #1
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093ac:	3b01      	subs	r3, #1
 80093ae:	b29a      	uxth	r2, r3
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	3b01      	subs	r3, #1
 80093bc:	b29a      	uxth	r2, r3
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80093c2:	e10b      	b.n	80095dc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093c8:	2b02      	cmp	r3, #2
 80093ca:	d14e      	bne.n	800946a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80093cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ce:	9300      	str	r3, [sp, #0]
 80093d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d2:	2200      	movs	r2, #0
 80093d4:	4906      	ldr	r1, [pc, #24]	; (80093f0 <HAL_I2C_Master_Receive+0x22c>)
 80093d6:	68f8      	ldr	r0, [r7, #12]
 80093d8:	f000 fa6a 	bl	80098b0 <I2C_WaitOnFlagUntilTimeout>
 80093dc:	4603      	mov	r3, r0
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d008      	beq.n	80093f4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80093e2:	2301      	movs	r3, #1
 80093e4:	e10e      	b.n	8009604 <HAL_I2C_Master_Receive+0x440>
 80093e6:	bf00      	nop
 80093e8:	00100002 	.word	0x00100002
 80093ec:	ffff0000 	.word	0xffff0000
 80093f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009402:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	691a      	ldr	r2, [r3, #16]
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800940e:	b2d2      	uxtb	r2, r2
 8009410:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009416:	1c5a      	adds	r2, r3, #1
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009420:	3b01      	subs	r3, #1
 8009422:	b29a      	uxth	r2, r3
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800942c:	b29b      	uxth	r3, r3
 800942e:	3b01      	subs	r3, #1
 8009430:	b29a      	uxth	r2, r3
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	691a      	ldr	r2, [r3, #16]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009440:	b2d2      	uxtb	r2, r2
 8009442:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009448:	1c5a      	adds	r2, r3, #1
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009452:	3b01      	subs	r3, #1
 8009454:	b29a      	uxth	r2, r3
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800945e:	b29b      	uxth	r3, r3
 8009460:	3b01      	subs	r3, #1
 8009462:	b29a      	uxth	r2, r3
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009468:	e0b8      	b.n	80095dc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800946a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946c:	9300      	str	r3, [sp, #0]
 800946e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009470:	2200      	movs	r2, #0
 8009472:	4966      	ldr	r1, [pc, #408]	; (800960c <HAL_I2C_Master_Receive+0x448>)
 8009474:	68f8      	ldr	r0, [r7, #12]
 8009476:	f000 fa1b 	bl	80098b0 <I2C_WaitOnFlagUntilTimeout>
 800947a:	4603      	mov	r3, r0
 800947c:	2b00      	cmp	r3, #0
 800947e:	d001      	beq.n	8009484 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8009480:	2301      	movs	r3, #1
 8009482:	e0bf      	b.n	8009604 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009492:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	691a      	ldr	r2, [r3, #16]
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800949e:	b2d2      	uxtb	r2, r2
 80094a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a6:	1c5a      	adds	r2, r3, #1
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094b0:	3b01      	subs	r3, #1
 80094b2:	b29a      	uxth	r2, r3
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094bc:	b29b      	uxth	r3, r3
 80094be:	3b01      	subs	r3, #1
 80094c0:	b29a      	uxth	r2, r3
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80094c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c8:	9300      	str	r3, [sp, #0]
 80094ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094cc:	2200      	movs	r2, #0
 80094ce:	494f      	ldr	r1, [pc, #316]	; (800960c <HAL_I2C_Master_Receive+0x448>)
 80094d0:	68f8      	ldr	r0, [r7, #12]
 80094d2:	f000 f9ed 	bl	80098b0 <I2C_WaitOnFlagUntilTimeout>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d001      	beq.n	80094e0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80094dc:	2301      	movs	r3, #1
 80094de:	e091      	b.n	8009604 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	691a      	ldr	r2, [r3, #16]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fa:	b2d2      	uxtb	r2, r2
 80094fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009502:	1c5a      	adds	r2, r3, #1
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800950c:	3b01      	subs	r3, #1
 800950e:	b29a      	uxth	r2, r3
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009518:	b29b      	uxth	r3, r3
 800951a:	3b01      	subs	r3, #1
 800951c:	b29a      	uxth	r2, r3
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	691a      	ldr	r2, [r3, #16]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952c:	b2d2      	uxtb	r2, r2
 800952e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009534:	1c5a      	adds	r2, r3, #1
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800953e:	3b01      	subs	r3, #1
 8009540:	b29a      	uxth	r2, r3
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800954a:	b29b      	uxth	r3, r3
 800954c:	3b01      	subs	r3, #1
 800954e:	b29a      	uxth	r2, r3
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009554:	e042      	b.n	80095dc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009558:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800955a:	68f8      	ldr	r0, [r7, #12]
 800955c:	f000 fb00 	bl	8009b60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009560:	4603      	mov	r3, r0
 8009562:	2b00      	cmp	r3, #0
 8009564:	d001      	beq.n	800956a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8009566:	2301      	movs	r3, #1
 8009568:	e04c      	b.n	8009604 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	691a      	ldr	r2, [r3, #16]
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009574:	b2d2      	uxtb	r2, r2
 8009576:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800957c:	1c5a      	adds	r2, r3, #1
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009586:	3b01      	subs	r3, #1
 8009588:	b29a      	uxth	r2, r3
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009592:	b29b      	uxth	r3, r3
 8009594:	3b01      	subs	r3, #1
 8009596:	b29a      	uxth	r2, r3
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	695b      	ldr	r3, [r3, #20]
 80095a2:	f003 0304 	and.w	r3, r3, #4
 80095a6:	2b04      	cmp	r3, #4
 80095a8:	d118      	bne.n	80095dc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	691a      	ldr	r2, [r3, #16]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b4:	b2d2      	uxtb	r2, r2
 80095b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095bc:	1c5a      	adds	r2, r3, #1
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095c6:	3b01      	subs	r3, #1
 80095c8:	b29a      	uxth	r2, r3
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	3b01      	subs	r3, #1
 80095d6:	b29a      	uxth	r2, r3
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	f47f aec2 	bne.w	800936a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2220      	movs	r2, #32
 80095ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2200      	movs	r2, #0
 80095f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2200      	movs	r2, #0
 80095fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80095fe:	2300      	movs	r3, #0
 8009600:	e000      	b.n	8009604 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8009602:	2302      	movs	r3, #2
  }
}
 8009604:	4618      	mov	r0, r3
 8009606:	3728      	adds	r7, #40	; 0x28
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}
 800960c:	00010004 	.word	0x00010004

08009610 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b088      	sub	sp, #32
 8009614:	af02      	add	r7, sp, #8
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	607a      	str	r2, [r7, #4]
 800961a:	603b      	str	r3, [r7, #0]
 800961c:	460b      	mov	r3, r1
 800961e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009624:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	2b08      	cmp	r3, #8
 800962a:	d006      	beq.n	800963a <I2C_MasterRequestWrite+0x2a>
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	2b01      	cmp	r3, #1
 8009630:	d003      	beq.n	800963a <I2C_MasterRequestWrite+0x2a>
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009638:	d108      	bne.n	800964c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009648:	601a      	str	r2, [r3, #0]
 800964a:	e00b      	b.n	8009664 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009650:	2b12      	cmp	r3, #18
 8009652:	d107      	bne.n	8009664 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	681a      	ldr	r2, [r3, #0]
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009662:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	9300      	str	r3, [sp, #0]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009670:	68f8      	ldr	r0, [r7, #12]
 8009672:	f000 f91d 	bl	80098b0 <I2C_WaitOnFlagUntilTimeout>
 8009676:	4603      	mov	r3, r0
 8009678:	2b00      	cmp	r3, #0
 800967a:	d00d      	beq.n	8009698 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800968a:	d103      	bne.n	8009694 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009692:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009694:	2303      	movs	r3, #3
 8009696:	e035      	b.n	8009704 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	691b      	ldr	r3, [r3, #16]
 800969c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096a0:	d108      	bne.n	80096b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80096a2:	897b      	ldrh	r3, [r7, #10]
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	461a      	mov	r2, r3
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80096b0:	611a      	str	r2, [r3, #16]
 80096b2:	e01b      	b.n	80096ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80096b4:	897b      	ldrh	r3, [r7, #10]
 80096b6:	11db      	asrs	r3, r3, #7
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	f003 0306 	and.w	r3, r3, #6
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	f063 030f 	orn	r3, r3, #15
 80096c4:	b2da      	uxtb	r2, r3
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	490e      	ldr	r1, [pc, #56]	; (800970c <I2C_MasterRequestWrite+0xfc>)
 80096d2:	68f8      	ldr	r0, [r7, #12]
 80096d4:	f000 f943 	bl	800995e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80096d8:	4603      	mov	r3, r0
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d001      	beq.n	80096e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80096de:	2301      	movs	r3, #1
 80096e0:	e010      	b.n	8009704 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80096e2:	897b      	ldrh	r3, [r7, #10]
 80096e4:	b2da      	uxtb	r2, r3
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	4907      	ldr	r1, [pc, #28]	; (8009710 <I2C_MasterRequestWrite+0x100>)
 80096f2:	68f8      	ldr	r0, [r7, #12]
 80096f4:	f000 f933 	bl	800995e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80096f8:	4603      	mov	r3, r0
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d001      	beq.n	8009702 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80096fe:	2301      	movs	r3, #1
 8009700:	e000      	b.n	8009704 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009702:	2300      	movs	r3, #0
}
 8009704:	4618      	mov	r0, r3
 8009706:	3718      	adds	r7, #24
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}
 800970c:	00010008 	.word	0x00010008
 8009710:	00010002 	.word	0x00010002

08009714 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b088      	sub	sp, #32
 8009718:	af02      	add	r7, sp, #8
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	607a      	str	r2, [r7, #4]
 800971e:	603b      	str	r3, [r7, #0]
 8009720:	460b      	mov	r3, r1
 8009722:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009728:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009738:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	2b08      	cmp	r3, #8
 800973e:	d006      	beq.n	800974e <I2C_MasterRequestRead+0x3a>
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	2b01      	cmp	r3, #1
 8009744:	d003      	beq.n	800974e <I2C_MasterRequestRead+0x3a>
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800974c:	d108      	bne.n	8009760 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800975c:	601a      	str	r2, [r3, #0]
 800975e:	e00b      	b.n	8009778 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009764:	2b11      	cmp	r3, #17
 8009766:	d107      	bne.n	8009778 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009776:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	9300      	str	r3, [sp, #0]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009784:	68f8      	ldr	r0, [r7, #12]
 8009786:	f000 f893 	bl	80098b0 <I2C_WaitOnFlagUntilTimeout>
 800978a:	4603      	mov	r3, r0
 800978c:	2b00      	cmp	r3, #0
 800978e:	d00d      	beq.n	80097ac <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800979a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800979e:	d103      	bne.n	80097a8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80097a8:	2303      	movs	r3, #3
 80097aa:	e079      	b.n	80098a0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	691b      	ldr	r3, [r3, #16]
 80097b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097b4:	d108      	bne.n	80097c8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80097b6:	897b      	ldrh	r3, [r7, #10]
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	f043 0301 	orr.w	r3, r3, #1
 80097be:	b2da      	uxtb	r2, r3
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	611a      	str	r2, [r3, #16]
 80097c6:	e05f      	b.n	8009888 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80097c8:	897b      	ldrh	r3, [r7, #10]
 80097ca:	11db      	asrs	r3, r3, #7
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	f003 0306 	and.w	r3, r3, #6
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	f063 030f 	orn	r3, r3, #15
 80097d8:	b2da      	uxtb	r2, r3
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	4930      	ldr	r1, [pc, #192]	; (80098a8 <I2C_MasterRequestRead+0x194>)
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	f000 f8b9 	bl	800995e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d001      	beq.n	80097f6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	e054      	b.n	80098a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80097f6:	897b      	ldrh	r3, [r7, #10]
 80097f8:	b2da      	uxtb	r2, r3
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	4929      	ldr	r1, [pc, #164]	; (80098ac <I2C_MasterRequestRead+0x198>)
 8009806:	68f8      	ldr	r0, [r7, #12]
 8009808:	f000 f8a9 	bl	800995e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800980c:	4603      	mov	r3, r0
 800980e:	2b00      	cmp	r3, #0
 8009810:	d001      	beq.n	8009816 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	e044      	b.n	80098a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009816:	2300      	movs	r3, #0
 8009818:	613b      	str	r3, [r7, #16]
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	695b      	ldr	r3, [r3, #20]
 8009820:	613b      	str	r3, [r7, #16]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	699b      	ldr	r3, [r3, #24]
 8009828:	613b      	str	r3, [r7, #16]
 800982a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800983a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	9300      	str	r3, [sp, #0]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009848:	68f8      	ldr	r0, [r7, #12]
 800984a:	f000 f831 	bl	80098b0 <I2C_WaitOnFlagUntilTimeout>
 800984e:	4603      	mov	r3, r0
 8009850:	2b00      	cmp	r3, #0
 8009852:	d00d      	beq.n	8009870 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800985e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009862:	d103      	bne.n	800986c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f44f 7200 	mov.w	r2, #512	; 0x200
 800986a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800986c:	2303      	movs	r3, #3
 800986e:	e017      	b.n	80098a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009870:	897b      	ldrh	r3, [r7, #10]
 8009872:	11db      	asrs	r3, r3, #7
 8009874:	b2db      	uxtb	r3, r3
 8009876:	f003 0306 	and.w	r3, r3, #6
 800987a:	b2db      	uxtb	r3, r3
 800987c:	f063 030e 	orn	r3, r3, #14
 8009880:	b2da      	uxtb	r2, r3
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	4907      	ldr	r1, [pc, #28]	; (80098ac <I2C_MasterRequestRead+0x198>)
 800988e:	68f8      	ldr	r0, [r7, #12]
 8009890:	f000 f865 	bl	800995e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009894:	4603      	mov	r3, r0
 8009896:	2b00      	cmp	r3, #0
 8009898:	d001      	beq.n	800989e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	e000      	b.n	80098a0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800989e:	2300      	movs	r3, #0
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3718      	adds	r7, #24
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}
 80098a8:	00010008 	.word	0x00010008
 80098ac:	00010002 	.word	0x00010002

080098b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	603b      	str	r3, [r7, #0]
 80098bc:	4613      	mov	r3, r2
 80098be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80098c0:	e025      	b.n	800990e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098c8:	d021      	beq.n	800990e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098ca:	f7fd fef1 	bl	80076b0 <HAL_GetTick>
 80098ce:	4602      	mov	r2, r0
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	1ad3      	subs	r3, r2, r3
 80098d4:	683a      	ldr	r2, [r7, #0]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d302      	bcc.n	80098e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d116      	bne.n	800990e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2200      	movs	r2, #0
 80098e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2220      	movs	r2, #32
 80098ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2200      	movs	r2, #0
 80098f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098fa:	f043 0220 	orr.w	r2, r3, #32
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2200      	movs	r2, #0
 8009906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	e023      	b.n	8009956 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	0c1b      	lsrs	r3, r3, #16
 8009912:	b2db      	uxtb	r3, r3
 8009914:	2b01      	cmp	r3, #1
 8009916:	d10d      	bne.n	8009934 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	695b      	ldr	r3, [r3, #20]
 800991e:	43da      	mvns	r2, r3
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	4013      	ands	r3, r2
 8009924:	b29b      	uxth	r3, r3
 8009926:	2b00      	cmp	r3, #0
 8009928:	bf0c      	ite	eq
 800992a:	2301      	moveq	r3, #1
 800992c:	2300      	movne	r3, #0
 800992e:	b2db      	uxtb	r3, r3
 8009930:	461a      	mov	r2, r3
 8009932:	e00c      	b.n	800994e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	699b      	ldr	r3, [r3, #24]
 800993a:	43da      	mvns	r2, r3
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	4013      	ands	r3, r2
 8009940:	b29b      	uxth	r3, r3
 8009942:	2b00      	cmp	r3, #0
 8009944:	bf0c      	ite	eq
 8009946:	2301      	moveq	r3, #1
 8009948:	2300      	movne	r3, #0
 800994a:	b2db      	uxtb	r3, r3
 800994c:	461a      	mov	r2, r3
 800994e:	79fb      	ldrb	r3, [r7, #7]
 8009950:	429a      	cmp	r2, r3
 8009952:	d0b6      	beq.n	80098c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009954:	2300      	movs	r3, #0
}
 8009956:	4618      	mov	r0, r3
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800995e:	b580      	push	{r7, lr}
 8009960:	b084      	sub	sp, #16
 8009962:	af00      	add	r7, sp, #0
 8009964:	60f8      	str	r0, [r7, #12]
 8009966:	60b9      	str	r1, [r7, #8]
 8009968:	607a      	str	r2, [r7, #4]
 800996a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800996c:	e051      	b.n	8009a12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	695b      	ldr	r3, [r3, #20]
 8009974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800997c:	d123      	bne.n	80099c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800998c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009996:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2200      	movs	r2, #0
 800999c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2220      	movs	r2, #32
 80099a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2200      	movs	r2, #0
 80099aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099b2:	f043 0204 	orr.w	r2, r3, #4
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2200      	movs	r2, #0
 80099be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80099c2:	2301      	movs	r3, #1
 80099c4:	e046      	b.n	8009a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099cc:	d021      	beq.n	8009a12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099ce:	f7fd fe6f 	bl	80076b0 <HAL_GetTick>
 80099d2:	4602      	mov	r2, r0
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	1ad3      	subs	r3, r2, r3
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	429a      	cmp	r2, r3
 80099dc:	d302      	bcc.n	80099e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d116      	bne.n	8009a12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2200      	movs	r2, #0
 80099e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2220      	movs	r2, #32
 80099ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2200      	movs	r2, #0
 80099f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099fe:	f043 0220 	orr.w	r2, r3, #32
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	e020      	b.n	8009a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	0c1b      	lsrs	r3, r3, #16
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d10c      	bne.n	8009a36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	695b      	ldr	r3, [r3, #20]
 8009a22:	43da      	mvns	r2, r3
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	4013      	ands	r3, r2
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	bf14      	ite	ne
 8009a2e:	2301      	movne	r3, #1
 8009a30:	2300      	moveq	r3, #0
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	e00b      	b.n	8009a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	699b      	ldr	r3, [r3, #24]
 8009a3c:	43da      	mvns	r2, r3
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	4013      	ands	r3, r2
 8009a42:	b29b      	uxth	r3, r3
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	bf14      	ite	ne
 8009a48:	2301      	movne	r3, #1
 8009a4a:	2300      	moveq	r3, #0
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d18d      	bne.n	800996e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009a52:	2300      	movs	r3, #0
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3710      	adds	r7, #16
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009a68:	e02d      	b.n	8009ac6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009a6a:	68f8      	ldr	r0, [r7, #12]
 8009a6c:	f000 f8ce 	bl	8009c0c <I2C_IsAcknowledgeFailed>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d001      	beq.n	8009a7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009a76:	2301      	movs	r3, #1
 8009a78:	e02d      	b.n	8009ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a80:	d021      	beq.n	8009ac6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a82:	f7fd fe15 	bl	80076b0 <HAL_GetTick>
 8009a86:	4602      	mov	r2, r0
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	1ad3      	subs	r3, r2, r3
 8009a8c:	68ba      	ldr	r2, [r7, #8]
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d302      	bcc.n	8009a98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d116      	bne.n	8009ac6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2220      	movs	r2, #32
 8009aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab2:	f043 0220 	orr.w	r2, r3, #32
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2200      	movs	r2, #0
 8009abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e007      	b.n	8009ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	695b      	ldr	r3, [r3, #20]
 8009acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ad0:	2b80      	cmp	r3, #128	; 0x80
 8009ad2:	d1ca      	bne.n	8009a6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009ad4:	2300      	movs	r3, #0
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3710      	adds	r7, #16
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}

08009ade <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009ade:	b580      	push	{r7, lr}
 8009ae0:	b084      	sub	sp, #16
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	60f8      	str	r0, [r7, #12]
 8009ae6:	60b9      	str	r1, [r7, #8]
 8009ae8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009aea:	e02d      	b.n	8009b48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009aec:	68f8      	ldr	r0, [r7, #12]
 8009aee:	f000 f88d 	bl	8009c0c <I2C_IsAcknowledgeFailed>
 8009af2:	4603      	mov	r3, r0
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d001      	beq.n	8009afc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009af8:	2301      	movs	r3, #1
 8009afa:	e02d      	b.n	8009b58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b02:	d021      	beq.n	8009b48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b04:	f7fd fdd4 	bl	80076b0 <HAL_GetTick>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	1ad3      	subs	r3, r2, r3
 8009b0e:	68ba      	ldr	r2, [r7, #8]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d302      	bcc.n	8009b1a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d116      	bne.n	8009b48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2220      	movs	r2, #32
 8009b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b34:	f043 0220 	orr.w	r2, r3, #32
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009b44:	2301      	movs	r3, #1
 8009b46:	e007      	b.n	8009b58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	695b      	ldr	r3, [r3, #20]
 8009b4e:	f003 0304 	and.w	r3, r3, #4
 8009b52:	2b04      	cmp	r3, #4
 8009b54:	d1ca      	bne.n	8009aec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009b56:	2300      	movs	r3, #0
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3710      	adds	r7, #16
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	60f8      	str	r0, [r7, #12]
 8009b68:	60b9      	str	r1, [r7, #8]
 8009b6a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009b6c:	e042      	b.n	8009bf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	695b      	ldr	r3, [r3, #20]
 8009b74:	f003 0310 	and.w	r3, r3, #16
 8009b78:	2b10      	cmp	r3, #16
 8009b7a:	d119      	bne.n	8009bb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f06f 0210 	mvn.w	r2, #16
 8009b84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2220      	movs	r2, #32
 8009b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2200      	movs	r2, #0
 8009b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009bac:	2301      	movs	r3, #1
 8009bae:	e029      	b.n	8009c04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bb0:	f7fd fd7e 	bl	80076b0 <HAL_GetTick>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	1ad3      	subs	r3, r2, r3
 8009bba:	68ba      	ldr	r2, [r7, #8]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d302      	bcc.n	8009bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d116      	bne.n	8009bf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2220      	movs	r2, #32
 8009bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009be0:	f043 0220 	orr.w	r2, r3, #32
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2200      	movs	r2, #0
 8009bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	e007      	b.n	8009c04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	695b      	ldr	r3, [r3, #20]
 8009bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bfe:	2b40      	cmp	r3, #64	; 0x40
 8009c00:	d1b5      	bne.n	8009b6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009c02:	2300      	movs	r3, #0
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3710      	adds	r7, #16
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	695b      	ldr	r3, [r3, #20]
 8009c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c22:	d11b      	bne.n	8009c5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009c2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2200      	movs	r2, #0
 8009c32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2220      	movs	r2, #32
 8009c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c48:	f043 0204 	orr.w	r2, r3, #4
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2200      	movs	r2, #0
 8009c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	e000      	b.n	8009c5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009c5c:	2300      	movs	r3, #0
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	370c      	adds	r7, #12
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr
	...

08009c6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b086      	sub	sp, #24
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d101      	bne.n	8009c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e267      	b.n	800a14e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f003 0301 	and.w	r3, r3, #1
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d075      	beq.n	8009d76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009c8a:	4b88      	ldr	r3, [pc, #544]	; (8009eac <HAL_RCC_OscConfig+0x240>)
 8009c8c:	689b      	ldr	r3, [r3, #8]
 8009c8e:	f003 030c 	and.w	r3, r3, #12
 8009c92:	2b04      	cmp	r3, #4
 8009c94:	d00c      	beq.n	8009cb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009c96:	4b85      	ldr	r3, [pc, #532]	; (8009eac <HAL_RCC_OscConfig+0x240>)
 8009c98:	689b      	ldr	r3, [r3, #8]
 8009c9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009c9e:	2b08      	cmp	r3, #8
 8009ca0:	d112      	bne.n	8009cc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009ca2:	4b82      	ldr	r3, [pc, #520]	; (8009eac <HAL_RCC_OscConfig+0x240>)
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009caa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009cae:	d10b      	bne.n	8009cc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009cb0:	4b7e      	ldr	r3, [pc, #504]	; (8009eac <HAL_RCC_OscConfig+0x240>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d05b      	beq.n	8009d74 <HAL_RCC_OscConfig+0x108>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d157      	bne.n	8009d74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	e242      	b.n	800a14e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cd0:	d106      	bne.n	8009ce0 <HAL_RCC_OscConfig+0x74>
 8009cd2:	4b76      	ldr	r3, [pc, #472]	; (8009eac <HAL_RCC_OscConfig+0x240>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a75      	ldr	r2, [pc, #468]	; (8009eac <HAL_RCC_OscConfig+0x240>)
 8009cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009cdc:	6013      	str	r3, [r2, #0]
 8009cde:	e01d      	b.n	8009d1c <HAL_RCC_OscConfig+0xb0>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ce8:	d10c      	bne.n	8009d04 <HAL_RCC_OscConfig+0x98>
 8009cea:	4b70      	ldr	r3, [pc, #448]	; (8009eac <HAL_RCC_OscConfig+0x240>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a6f      	ldr	r2, [pc, #444]	; (8009eac <HAL_RCC_OscConfig+0x240>)
 8009cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009cf4:	6013      	str	r3, [r2, #0]
 8009cf6:	4b6d      	ldr	r3, [pc, #436]	; (8009eac <HAL_RCC_OscConfig+0x240>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a6c      	ldr	r2, [pc, #432]	; (8009eac <HAL_RCC_OscConfig+0x240>)
 8009cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d00:	6013      	str	r3, [r2, #0]
 8009d02:	e00b      	b.n	8009d1c <HAL_RCC_OscConfig+0xb0>
 8009d04:	4b69      	ldr	r3, [pc, #420]	; (8009eac <HAL_RCC_OscConfig+0x240>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a68      	ldr	r2, [pc, #416]	; (8009eac <HAL_RCC_OscConfig+0x240>)
 8009d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d0e:	6013      	str	r3, [r2, #0]
 8009d10:	4b66      	ldr	r3, [pc, #408]	; (8009eac <HAL_RCC_OscConfig+0x240>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a65      	ldr	r2, [pc, #404]	; (8009eac <HAL_RCC_OscConfig+0x240>)
 8009d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009d1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d013      	beq.n	8009d4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d24:	f7fd fcc4 	bl	80076b0 <HAL_GetTick>
 8009d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d2a:	e008      	b.n	8009d3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009d2c:	f7fd fcc0 	bl	80076b0 <HAL_GetTick>
 8009d30:	4602      	mov	r2, r0
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	1ad3      	subs	r3, r2, r3
 8009d36:	2b64      	cmp	r3, #100	; 0x64
 8009d38:	d901      	bls.n	8009d3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009d3a:	2303      	movs	r3, #3
 8009d3c:	e207      	b.n	800a14e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d3e:	4b5b      	ldr	r3, [pc, #364]	; (8009eac <HAL_RCC_OscConfig+0x240>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d0f0      	beq.n	8009d2c <HAL_RCC_OscConfig+0xc0>
 8009d4a:	e014      	b.n	8009d76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d4c:	f7fd fcb0 	bl	80076b0 <HAL_GetTick>
 8009d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009d52:	e008      	b.n	8009d66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009d54:	f7fd fcac 	bl	80076b0 <HAL_GetTick>
 8009d58:	4602      	mov	r2, r0
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	1ad3      	subs	r3, r2, r3
 8009d5e:	2b64      	cmp	r3, #100	; 0x64
 8009d60:	d901      	bls.n	8009d66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009d62:	2303      	movs	r3, #3
 8009d64:	e1f3      	b.n	800a14e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009d66:	4b51      	ldr	r3, [pc, #324]	; (8009eac <HAL_RCC_OscConfig+0x240>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d1f0      	bne.n	8009d54 <HAL_RCC_OscConfig+0xe8>
 8009d72:	e000      	b.n	8009d76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f003 0302 	and.w	r3, r3, #2
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d063      	beq.n	8009e4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009d82:	4b4a      	ldr	r3, [pc, #296]	; (8009eac <HAL_RCC_OscConfig+0x240>)
 8009d84:	689b      	ldr	r3, [r3, #8]
 8009d86:	f003 030c 	and.w	r3, r3, #12
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00b      	beq.n	8009da6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009d8e:	4b47      	ldr	r3, [pc, #284]	; (8009eac <HAL_RCC_OscConfig+0x240>)
 8009d90:	689b      	ldr	r3, [r3, #8]
 8009d92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009d96:	2b08      	cmp	r3, #8
 8009d98:	d11c      	bne.n	8009dd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009d9a:	4b44      	ldr	r3, [pc, #272]	; (8009eac <HAL_RCC_OscConfig+0x240>)
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d116      	bne.n	8009dd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009da6:	4b41      	ldr	r3, [pc, #260]	; (8009eac <HAL_RCC_OscConfig+0x240>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f003 0302 	and.w	r3, r3, #2
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d005      	beq.n	8009dbe <HAL_RCC_OscConfig+0x152>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	68db      	ldr	r3, [r3, #12]
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d001      	beq.n	8009dbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	e1c7      	b.n	800a14e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009dbe:	4b3b      	ldr	r3, [pc, #236]	; (8009eac <HAL_RCC_OscConfig+0x240>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	691b      	ldr	r3, [r3, #16]
 8009dca:	00db      	lsls	r3, r3, #3
 8009dcc:	4937      	ldr	r1, [pc, #220]	; (8009eac <HAL_RCC_OscConfig+0x240>)
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009dd2:	e03a      	b.n	8009e4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	68db      	ldr	r3, [r3, #12]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d020      	beq.n	8009e1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009ddc:	4b34      	ldr	r3, [pc, #208]	; (8009eb0 <HAL_RCC_OscConfig+0x244>)
 8009dde:	2201      	movs	r2, #1
 8009de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009de2:	f7fd fc65 	bl	80076b0 <HAL_GetTick>
 8009de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009de8:	e008      	b.n	8009dfc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009dea:	f7fd fc61 	bl	80076b0 <HAL_GetTick>
 8009dee:	4602      	mov	r2, r0
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	1ad3      	subs	r3, r2, r3
 8009df4:	2b02      	cmp	r3, #2
 8009df6:	d901      	bls.n	8009dfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009df8:	2303      	movs	r3, #3
 8009dfa:	e1a8      	b.n	800a14e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009dfc:	4b2b      	ldr	r3, [pc, #172]	; (8009eac <HAL_RCC_OscConfig+0x240>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f003 0302 	and.w	r3, r3, #2
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d0f0      	beq.n	8009dea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e08:	4b28      	ldr	r3, [pc, #160]	; (8009eac <HAL_RCC_OscConfig+0x240>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	691b      	ldr	r3, [r3, #16]
 8009e14:	00db      	lsls	r3, r3, #3
 8009e16:	4925      	ldr	r1, [pc, #148]	; (8009eac <HAL_RCC_OscConfig+0x240>)
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	600b      	str	r3, [r1, #0]
 8009e1c:	e015      	b.n	8009e4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009e1e:	4b24      	ldr	r3, [pc, #144]	; (8009eb0 <HAL_RCC_OscConfig+0x244>)
 8009e20:	2200      	movs	r2, #0
 8009e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e24:	f7fd fc44 	bl	80076b0 <HAL_GetTick>
 8009e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009e2a:	e008      	b.n	8009e3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009e2c:	f7fd fc40 	bl	80076b0 <HAL_GetTick>
 8009e30:	4602      	mov	r2, r0
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	1ad3      	subs	r3, r2, r3
 8009e36:	2b02      	cmp	r3, #2
 8009e38:	d901      	bls.n	8009e3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009e3a:	2303      	movs	r3, #3
 8009e3c:	e187      	b.n	800a14e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009e3e:	4b1b      	ldr	r3, [pc, #108]	; (8009eac <HAL_RCC_OscConfig+0x240>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f003 0302 	and.w	r3, r3, #2
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d1f0      	bne.n	8009e2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f003 0308 	and.w	r3, r3, #8
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d036      	beq.n	8009ec4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	695b      	ldr	r3, [r3, #20]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d016      	beq.n	8009e8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009e5e:	4b15      	ldr	r3, [pc, #84]	; (8009eb4 <HAL_RCC_OscConfig+0x248>)
 8009e60:	2201      	movs	r2, #1
 8009e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e64:	f7fd fc24 	bl	80076b0 <HAL_GetTick>
 8009e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009e6a:	e008      	b.n	8009e7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009e6c:	f7fd fc20 	bl	80076b0 <HAL_GetTick>
 8009e70:	4602      	mov	r2, r0
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	1ad3      	subs	r3, r2, r3
 8009e76:	2b02      	cmp	r3, #2
 8009e78:	d901      	bls.n	8009e7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009e7a:	2303      	movs	r3, #3
 8009e7c:	e167      	b.n	800a14e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009e7e:	4b0b      	ldr	r3, [pc, #44]	; (8009eac <HAL_RCC_OscConfig+0x240>)
 8009e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e82:	f003 0302 	and.w	r3, r3, #2
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d0f0      	beq.n	8009e6c <HAL_RCC_OscConfig+0x200>
 8009e8a:	e01b      	b.n	8009ec4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009e8c:	4b09      	ldr	r3, [pc, #36]	; (8009eb4 <HAL_RCC_OscConfig+0x248>)
 8009e8e:	2200      	movs	r2, #0
 8009e90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009e92:	f7fd fc0d 	bl	80076b0 <HAL_GetTick>
 8009e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009e98:	e00e      	b.n	8009eb8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009e9a:	f7fd fc09 	bl	80076b0 <HAL_GetTick>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	1ad3      	subs	r3, r2, r3
 8009ea4:	2b02      	cmp	r3, #2
 8009ea6:	d907      	bls.n	8009eb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009ea8:	2303      	movs	r3, #3
 8009eaa:	e150      	b.n	800a14e <HAL_RCC_OscConfig+0x4e2>
 8009eac:	40023800 	.word	0x40023800
 8009eb0:	42470000 	.word	0x42470000
 8009eb4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009eb8:	4b88      	ldr	r3, [pc, #544]	; (800a0dc <HAL_RCC_OscConfig+0x470>)
 8009eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ebc:	f003 0302 	and.w	r3, r3, #2
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d1ea      	bne.n	8009e9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f003 0304 	and.w	r3, r3, #4
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	f000 8097 	beq.w	800a000 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009ed6:	4b81      	ldr	r3, [pc, #516]	; (800a0dc <HAL_RCC_OscConfig+0x470>)
 8009ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d10f      	bne.n	8009f02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	60bb      	str	r3, [r7, #8]
 8009ee6:	4b7d      	ldr	r3, [pc, #500]	; (800a0dc <HAL_RCC_OscConfig+0x470>)
 8009ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eea:	4a7c      	ldr	r2, [pc, #496]	; (800a0dc <HAL_RCC_OscConfig+0x470>)
 8009eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8009ef2:	4b7a      	ldr	r3, [pc, #488]	; (800a0dc <HAL_RCC_OscConfig+0x470>)
 8009ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009efa:	60bb      	str	r3, [r7, #8]
 8009efc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009efe:	2301      	movs	r3, #1
 8009f00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f02:	4b77      	ldr	r3, [pc, #476]	; (800a0e0 <HAL_RCC_OscConfig+0x474>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d118      	bne.n	8009f40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009f0e:	4b74      	ldr	r3, [pc, #464]	; (800a0e0 <HAL_RCC_OscConfig+0x474>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a73      	ldr	r2, [pc, #460]	; (800a0e0 <HAL_RCC_OscConfig+0x474>)
 8009f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009f1a:	f7fd fbc9 	bl	80076b0 <HAL_GetTick>
 8009f1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f20:	e008      	b.n	8009f34 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f22:	f7fd fbc5 	bl	80076b0 <HAL_GetTick>
 8009f26:	4602      	mov	r2, r0
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	1ad3      	subs	r3, r2, r3
 8009f2c:	2b02      	cmp	r3, #2
 8009f2e:	d901      	bls.n	8009f34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009f30:	2303      	movs	r3, #3
 8009f32:	e10c      	b.n	800a14e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f34:	4b6a      	ldr	r3, [pc, #424]	; (800a0e0 <HAL_RCC_OscConfig+0x474>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d0f0      	beq.n	8009f22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d106      	bne.n	8009f56 <HAL_RCC_OscConfig+0x2ea>
 8009f48:	4b64      	ldr	r3, [pc, #400]	; (800a0dc <HAL_RCC_OscConfig+0x470>)
 8009f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f4c:	4a63      	ldr	r2, [pc, #396]	; (800a0dc <HAL_RCC_OscConfig+0x470>)
 8009f4e:	f043 0301 	orr.w	r3, r3, #1
 8009f52:	6713      	str	r3, [r2, #112]	; 0x70
 8009f54:	e01c      	b.n	8009f90 <HAL_RCC_OscConfig+0x324>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	689b      	ldr	r3, [r3, #8]
 8009f5a:	2b05      	cmp	r3, #5
 8009f5c:	d10c      	bne.n	8009f78 <HAL_RCC_OscConfig+0x30c>
 8009f5e:	4b5f      	ldr	r3, [pc, #380]	; (800a0dc <HAL_RCC_OscConfig+0x470>)
 8009f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f62:	4a5e      	ldr	r2, [pc, #376]	; (800a0dc <HAL_RCC_OscConfig+0x470>)
 8009f64:	f043 0304 	orr.w	r3, r3, #4
 8009f68:	6713      	str	r3, [r2, #112]	; 0x70
 8009f6a:	4b5c      	ldr	r3, [pc, #368]	; (800a0dc <HAL_RCC_OscConfig+0x470>)
 8009f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f6e:	4a5b      	ldr	r2, [pc, #364]	; (800a0dc <HAL_RCC_OscConfig+0x470>)
 8009f70:	f043 0301 	orr.w	r3, r3, #1
 8009f74:	6713      	str	r3, [r2, #112]	; 0x70
 8009f76:	e00b      	b.n	8009f90 <HAL_RCC_OscConfig+0x324>
 8009f78:	4b58      	ldr	r3, [pc, #352]	; (800a0dc <HAL_RCC_OscConfig+0x470>)
 8009f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f7c:	4a57      	ldr	r2, [pc, #348]	; (800a0dc <HAL_RCC_OscConfig+0x470>)
 8009f7e:	f023 0301 	bic.w	r3, r3, #1
 8009f82:	6713      	str	r3, [r2, #112]	; 0x70
 8009f84:	4b55      	ldr	r3, [pc, #340]	; (800a0dc <HAL_RCC_OscConfig+0x470>)
 8009f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f88:	4a54      	ldr	r2, [pc, #336]	; (800a0dc <HAL_RCC_OscConfig+0x470>)
 8009f8a:	f023 0304 	bic.w	r3, r3, #4
 8009f8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	689b      	ldr	r3, [r3, #8]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d015      	beq.n	8009fc4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f98:	f7fd fb8a 	bl	80076b0 <HAL_GetTick>
 8009f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009f9e:	e00a      	b.n	8009fb6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009fa0:	f7fd fb86 	bl	80076b0 <HAL_GetTick>
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	1ad3      	subs	r3, r2, r3
 8009faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d901      	bls.n	8009fb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009fb2:	2303      	movs	r3, #3
 8009fb4:	e0cb      	b.n	800a14e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009fb6:	4b49      	ldr	r3, [pc, #292]	; (800a0dc <HAL_RCC_OscConfig+0x470>)
 8009fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fba:	f003 0302 	and.w	r3, r3, #2
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d0ee      	beq.n	8009fa0 <HAL_RCC_OscConfig+0x334>
 8009fc2:	e014      	b.n	8009fee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009fc4:	f7fd fb74 	bl	80076b0 <HAL_GetTick>
 8009fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009fca:	e00a      	b.n	8009fe2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009fcc:	f7fd fb70 	bl	80076b0 <HAL_GetTick>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	1ad3      	subs	r3, r2, r3
 8009fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d901      	bls.n	8009fe2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009fde:	2303      	movs	r3, #3
 8009fe0:	e0b5      	b.n	800a14e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009fe2:	4b3e      	ldr	r3, [pc, #248]	; (800a0dc <HAL_RCC_OscConfig+0x470>)
 8009fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fe6:	f003 0302 	and.w	r3, r3, #2
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d1ee      	bne.n	8009fcc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009fee:	7dfb      	ldrb	r3, [r7, #23]
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d105      	bne.n	800a000 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009ff4:	4b39      	ldr	r3, [pc, #228]	; (800a0dc <HAL_RCC_OscConfig+0x470>)
 8009ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff8:	4a38      	ldr	r2, [pc, #224]	; (800a0dc <HAL_RCC_OscConfig+0x470>)
 8009ffa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ffe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	699b      	ldr	r3, [r3, #24]
 800a004:	2b00      	cmp	r3, #0
 800a006:	f000 80a1 	beq.w	800a14c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a00a:	4b34      	ldr	r3, [pc, #208]	; (800a0dc <HAL_RCC_OscConfig+0x470>)
 800a00c:	689b      	ldr	r3, [r3, #8]
 800a00e:	f003 030c 	and.w	r3, r3, #12
 800a012:	2b08      	cmp	r3, #8
 800a014:	d05c      	beq.n	800a0d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	699b      	ldr	r3, [r3, #24]
 800a01a:	2b02      	cmp	r3, #2
 800a01c:	d141      	bne.n	800a0a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a01e:	4b31      	ldr	r3, [pc, #196]	; (800a0e4 <HAL_RCC_OscConfig+0x478>)
 800a020:	2200      	movs	r2, #0
 800a022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a024:	f7fd fb44 	bl	80076b0 <HAL_GetTick>
 800a028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a02a:	e008      	b.n	800a03e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a02c:	f7fd fb40 	bl	80076b0 <HAL_GetTick>
 800a030:	4602      	mov	r2, r0
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	1ad3      	subs	r3, r2, r3
 800a036:	2b02      	cmp	r3, #2
 800a038:	d901      	bls.n	800a03e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a03a:	2303      	movs	r3, #3
 800a03c:	e087      	b.n	800a14e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a03e:	4b27      	ldr	r3, [pc, #156]	; (800a0dc <HAL_RCC_OscConfig+0x470>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a046:	2b00      	cmp	r3, #0
 800a048:	d1f0      	bne.n	800a02c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	69da      	ldr	r2, [r3, #28]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6a1b      	ldr	r3, [r3, #32]
 800a052:	431a      	orrs	r2, r3
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a058:	019b      	lsls	r3, r3, #6
 800a05a:	431a      	orrs	r2, r3
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a060:	085b      	lsrs	r3, r3, #1
 800a062:	3b01      	subs	r3, #1
 800a064:	041b      	lsls	r3, r3, #16
 800a066:	431a      	orrs	r2, r3
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a06c:	061b      	lsls	r3, r3, #24
 800a06e:	491b      	ldr	r1, [pc, #108]	; (800a0dc <HAL_RCC_OscConfig+0x470>)
 800a070:	4313      	orrs	r3, r2
 800a072:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a074:	4b1b      	ldr	r3, [pc, #108]	; (800a0e4 <HAL_RCC_OscConfig+0x478>)
 800a076:	2201      	movs	r2, #1
 800a078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a07a:	f7fd fb19 	bl	80076b0 <HAL_GetTick>
 800a07e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a080:	e008      	b.n	800a094 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a082:	f7fd fb15 	bl	80076b0 <HAL_GetTick>
 800a086:	4602      	mov	r2, r0
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	1ad3      	subs	r3, r2, r3
 800a08c:	2b02      	cmp	r3, #2
 800a08e:	d901      	bls.n	800a094 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a090:	2303      	movs	r3, #3
 800a092:	e05c      	b.n	800a14e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a094:	4b11      	ldr	r3, [pc, #68]	; (800a0dc <HAL_RCC_OscConfig+0x470>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d0f0      	beq.n	800a082 <HAL_RCC_OscConfig+0x416>
 800a0a0:	e054      	b.n	800a14c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a0a2:	4b10      	ldr	r3, [pc, #64]	; (800a0e4 <HAL_RCC_OscConfig+0x478>)
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a0a8:	f7fd fb02 	bl	80076b0 <HAL_GetTick>
 800a0ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a0ae:	e008      	b.n	800a0c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a0b0:	f7fd fafe 	bl	80076b0 <HAL_GetTick>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	1ad3      	subs	r3, r2, r3
 800a0ba:	2b02      	cmp	r3, #2
 800a0bc:	d901      	bls.n	800a0c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a0be:	2303      	movs	r3, #3
 800a0c0:	e045      	b.n	800a14e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a0c2:	4b06      	ldr	r3, [pc, #24]	; (800a0dc <HAL_RCC_OscConfig+0x470>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d1f0      	bne.n	800a0b0 <HAL_RCC_OscConfig+0x444>
 800a0ce:	e03d      	b.n	800a14c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	699b      	ldr	r3, [r3, #24]
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d107      	bne.n	800a0e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	e038      	b.n	800a14e <HAL_RCC_OscConfig+0x4e2>
 800a0dc:	40023800 	.word	0x40023800
 800a0e0:	40007000 	.word	0x40007000
 800a0e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a0e8:	4b1b      	ldr	r3, [pc, #108]	; (800a158 <HAL_RCC_OscConfig+0x4ec>)
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	699b      	ldr	r3, [r3, #24]
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	d028      	beq.n	800a148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a100:	429a      	cmp	r2, r3
 800a102:	d121      	bne.n	800a148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a10e:	429a      	cmp	r2, r3
 800a110:	d11a      	bne.n	800a148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a112:	68fa      	ldr	r2, [r7, #12]
 800a114:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a118:	4013      	ands	r3, r2
 800a11a:	687a      	ldr	r2, [r7, #4]
 800a11c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a11e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a120:	4293      	cmp	r3, r2
 800a122:	d111      	bne.n	800a148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a12e:	085b      	lsrs	r3, r3, #1
 800a130:	3b01      	subs	r3, #1
 800a132:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a134:	429a      	cmp	r2, r3
 800a136:	d107      	bne.n	800a148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a142:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a144:	429a      	cmp	r2, r3
 800a146:	d001      	beq.n	800a14c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800a148:	2301      	movs	r3, #1
 800a14a:	e000      	b.n	800a14e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a14c:	2300      	movs	r3, #0
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3718      	adds	r7, #24
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
 800a156:	bf00      	nop
 800a158:	40023800 	.word	0x40023800

0800a15c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b084      	sub	sp, #16
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d101      	bne.n	800a170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a16c:	2301      	movs	r3, #1
 800a16e:	e0cc      	b.n	800a30a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a170:	4b68      	ldr	r3, [pc, #416]	; (800a314 <HAL_RCC_ClockConfig+0x1b8>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f003 0307 	and.w	r3, r3, #7
 800a178:	683a      	ldr	r2, [r7, #0]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d90c      	bls.n	800a198 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a17e:	4b65      	ldr	r3, [pc, #404]	; (800a314 <HAL_RCC_ClockConfig+0x1b8>)
 800a180:	683a      	ldr	r2, [r7, #0]
 800a182:	b2d2      	uxtb	r2, r2
 800a184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a186:	4b63      	ldr	r3, [pc, #396]	; (800a314 <HAL_RCC_ClockConfig+0x1b8>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f003 0307 	and.w	r3, r3, #7
 800a18e:	683a      	ldr	r2, [r7, #0]
 800a190:	429a      	cmp	r2, r3
 800a192:	d001      	beq.n	800a198 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a194:	2301      	movs	r3, #1
 800a196:	e0b8      	b.n	800a30a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f003 0302 	and.w	r3, r3, #2
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d020      	beq.n	800a1e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f003 0304 	and.w	r3, r3, #4
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d005      	beq.n	800a1bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a1b0:	4b59      	ldr	r3, [pc, #356]	; (800a318 <HAL_RCC_ClockConfig+0x1bc>)
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	4a58      	ldr	r2, [pc, #352]	; (800a318 <HAL_RCC_ClockConfig+0x1bc>)
 800a1b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a1ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f003 0308 	and.w	r3, r3, #8
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d005      	beq.n	800a1d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a1c8:	4b53      	ldr	r3, [pc, #332]	; (800a318 <HAL_RCC_ClockConfig+0x1bc>)
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	4a52      	ldr	r2, [pc, #328]	; (800a318 <HAL_RCC_ClockConfig+0x1bc>)
 800a1ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a1d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a1d4:	4b50      	ldr	r3, [pc, #320]	; (800a318 <HAL_RCC_ClockConfig+0x1bc>)
 800a1d6:	689b      	ldr	r3, [r3, #8]
 800a1d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	494d      	ldr	r1, [pc, #308]	; (800a318 <HAL_RCC_ClockConfig+0x1bc>)
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f003 0301 	and.w	r3, r3, #1
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d044      	beq.n	800a27c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d107      	bne.n	800a20a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a1fa:	4b47      	ldr	r3, [pc, #284]	; (800a318 <HAL_RCC_ClockConfig+0x1bc>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a202:	2b00      	cmp	r3, #0
 800a204:	d119      	bne.n	800a23a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a206:	2301      	movs	r3, #1
 800a208:	e07f      	b.n	800a30a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	2b02      	cmp	r3, #2
 800a210:	d003      	beq.n	800a21a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a216:	2b03      	cmp	r3, #3
 800a218:	d107      	bne.n	800a22a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a21a:	4b3f      	ldr	r3, [pc, #252]	; (800a318 <HAL_RCC_ClockConfig+0x1bc>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a222:	2b00      	cmp	r3, #0
 800a224:	d109      	bne.n	800a23a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a226:	2301      	movs	r3, #1
 800a228:	e06f      	b.n	800a30a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a22a:	4b3b      	ldr	r3, [pc, #236]	; (800a318 <HAL_RCC_ClockConfig+0x1bc>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f003 0302 	and.w	r3, r3, #2
 800a232:	2b00      	cmp	r3, #0
 800a234:	d101      	bne.n	800a23a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a236:	2301      	movs	r3, #1
 800a238:	e067      	b.n	800a30a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a23a:	4b37      	ldr	r3, [pc, #220]	; (800a318 <HAL_RCC_ClockConfig+0x1bc>)
 800a23c:	689b      	ldr	r3, [r3, #8]
 800a23e:	f023 0203 	bic.w	r2, r3, #3
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	4934      	ldr	r1, [pc, #208]	; (800a318 <HAL_RCC_ClockConfig+0x1bc>)
 800a248:	4313      	orrs	r3, r2
 800a24a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a24c:	f7fd fa30 	bl	80076b0 <HAL_GetTick>
 800a250:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a252:	e00a      	b.n	800a26a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a254:	f7fd fa2c 	bl	80076b0 <HAL_GetTick>
 800a258:	4602      	mov	r2, r0
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	1ad3      	subs	r3, r2, r3
 800a25e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a262:	4293      	cmp	r3, r2
 800a264:	d901      	bls.n	800a26a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a266:	2303      	movs	r3, #3
 800a268:	e04f      	b.n	800a30a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a26a:	4b2b      	ldr	r3, [pc, #172]	; (800a318 <HAL_RCC_ClockConfig+0x1bc>)
 800a26c:	689b      	ldr	r3, [r3, #8]
 800a26e:	f003 020c 	and.w	r2, r3, #12
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	009b      	lsls	r3, r3, #2
 800a278:	429a      	cmp	r2, r3
 800a27a:	d1eb      	bne.n	800a254 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a27c:	4b25      	ldr	r3, [pc, #148]	; (800a314 <HAL_RCC_ClockConfig+0x1b8>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f003 0307 	and.w	r3, r3, #7
 800a284:	683a      	ldr	r2, [r7, #0]
 800a286:	429a      	cmp	r2, r3
 800a288:	d20c      	bcs.n	800a2a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a28a:	4b22      	ldr	r3, [pc, #136]	; (800a314 <HAL_RCC_ClockConfig+0x1b8>)
 800a28c:	683a      	ldr	r2, [r7, #0]
 800a28e:	b2d2      	uxtb	r2, r2
 800a290:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a292:	4b20      	ldr	r3, [pc, #128]	; (800a314 <HAL_RCC_ClockConfig+0x1b8>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f003 0307 	and.w	r3, r3, #7
 800a29a:	683a      	ldr	r2, [r7, #0]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d001      	beq.n	800a2a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	e032      	b.n	800a30a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f003 0304 	and.w	r3, r3, #4
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d008      	beq.n	800a2c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a2b0:	4b19      	ldr	r3, [pc, #100]	; (800a318 <HAL_RCC_ClockConfig+0x1bc>)
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	68db      	ldr	r3, [r3, #12]
 800a2bc:	4916      	ldr	r1, [pc, #88]	; (800a318 <HAL_RCC_ClockConfig+0x1bc>)
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f003 0308 	and.w	r3, r3, #8
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d009      	beq.n	800a2e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a2ce:	4b12      	ldr	r3, [pc, #72]	; (800a318 <HAL_RCC_ClockConfig+0x1bc>)
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	691b      	ldr	r3, [r3, #16]
 800a2da:	00db      	lsls	r3, r3, #3
 800a2dc:	490e      	ldr	r1, [pc, #56]	; (800a318 <HAL_RCC_ClockConfig+0x1bc>)
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a2e2:	f000 f821 	bl	800a328 <HAL_RCC_GetSysClockFreq>
 800a2e6:	4602      	mov	r2, r0
 800a2e8:	4b0b      	ldr	r3, [pc, #44]	; (800a318 <HAL_RCC_ClockConfig+0x1bc>)
 800a2ea:	689b      	ldr	r3, [r3, #8]
 800a2ec:	091b      	lsrs	r3, r3, #4
 800a2ee:	f003 030f 	and.w	r3, r3, #15
 800a2f2:	490a      	ldr	r1, [pc, #40]	; (800a31c <HAL_RCC_ClockConfig+0x1c0>)
 800a2f4:	5ccb      	ldrb	r3, [r1, r3]
 800a2f6:	fa22 f303 	lsr.w	r3, r2, r3
 800a2fa:	4a09      	ldr	r2, [pc, #36]	; (800a320 <HAL_RCC_ClockConfig+0x1c4>)
 800a2fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a2fe:	4b09      	ldr	r3, [pc, #36]	; (800a324 <HAL_RCC_ClockConfig+0x1c8>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4618      	mov	r0, r3
 800a304:	f7fd f990 	bl	8007628 <HAL_InitTick>

  return HAL_OK;
 800a308:	2300      	movs	r3, #0
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3710      	adds	r7, #16
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
 800a312:	bf00      	nop
 800a314:	40023c00 	.word	0x40023c00
 800a318:	40023800 	.word	0x40023800
 800a31c:	0800f60c 	.word	0x0800f60c
 800a320:	20000020 	.word	0x20000020
 800a324:	20000470 	.word	0x20000470

0800a328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a32c:	b094      	sub	sp, #80	; 0x50
 800a32e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a330:	2300      	movs	r3, #0
 800a332:	647b      	str	r3, [r7, #68]	; 0x44
 800a334:	2300      	movs	r3, #0
 800a336:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a338:	2300      	movs	r3, #0
 800a33a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800a33c:	2300      	movs	r3, #0
 800a33e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a340:	4b79      	ldr	r3, [pc, #484]	; (800a528 <HAL_RCC_GetSysClockFreq+0x200>)
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	f003 030c 	and.w	r3, r3, #12
 800a348:	2b08      	cmp	r3, #8
 800a34a:	d00d      	beq.n	800a368 <HAL_RCC_GetSysClockFreq+0x40>
 800a34c:	2b08      	cmp	r3, #8
 800a34e:	f200 80e1 	bhi.w	800a514 <HAL_RCC_GetSysClockFreq+0x1ec>
 800a352:	2b00      	cmp	r3, #0
 800a354:	d002      	beq.n	800a35c <HAL_RCC_GetSysClockFreq+0x34>
 800a356:	2b04      	cmp	r3, #4
 800a358:	d003      	beq.n	800a362 <HAL_RCC_GetSysClockFreq+0x3a>
 800a35a:	e0db      	b.n	800a514 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a35c:	4b73      	ldr	r3, [pc, #460]	; (800a52c <HAL_RCC_GetSysClockFreq+0x204>)
 800a35e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800a360:	e0db      	b.n	800a51a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a362:	4b73      	ldr	r3, [pc, #460]	; (800a530 <HAL_RCC_GetSysClockFreq+0x208>)
 800a364:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a366:	e0d8      	b.n	800a51a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a368:	4b6f      	ldr	r3, [pc, #444]	; (800a528 <HAL_RCC_GetSysClockFreq+0x200>)
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a370:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a372:	4b6d      	ldr	r3, [pc, #436]	; (800a528 <HAL_RCC_GetSysClockFreq+0x200>)
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d063      	beq.n	800a446 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a37e:	4b6a      	ldr	r3, [pc, #424]	; (800a528 <HAL_RCC_GetSysClockFreq+0x200>)
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	099b      	lsrs	r3, r3, #6
 800a384:	2200      	movs	r2, #0
 800a386:	63bb      	str	r3, [r7, #56]	; 0x38
 800a388:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a38c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a390:	633b      	str	r3, [r7, #48]	; 0x30
 800a392:	2300      	movs	r3, #0
 800a394:	637b      	str	r3, [r7, #52]	; 0x34
 800a396:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a39a:	4622      	mov	r2, r4
 800a39c:	462b      	mov	r3, r5
 800a39e:	f04f 0000 	mov.w	r0, #0
 800a3a2:	f04f 0100 	mov.w	r1, #0
 800a3a6:	0159      	lsls	r1, r3, #5
 800a3a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a3ac:	0150      	lsls	r0, r2, #5
 800a3ae:	4602      	mov	r2, r0
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	4621      	mov	r1, r4
 800a3b4:	1a51      	subs	r1, r2, r1
 800a3b6:	6139      	str	r1, [r7, #16]
 800a3b8:	4629      	mov	r1, r5
 800a3ba:	eb63 0301 	sbc.w	r3, r3, r1
 800a3be:	617b      	str	r3, [r7, #20]
 800a3c0:	f04f 0200 	mov.w	r2, #0
 800a3c4:	f04f 0300 	mov.w	r3, #0
 800a3c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a3cc:	4659      	mov	r1, fp
 800a3ce:	018b      	lsls	r3, r1, #6
 800a3d0:	4651      	mov	r1, sl
 800a3d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a3d6:	4651      	mov	r1, sl
 800a3d8:	018a      	lsls	r2, r1, #6
 800a3da:	4651      	mov	r1, sl
 800a3dc:	ebb2 0801 	subs.w	r8, r2, r1
 800a3e0:	4659      	mov	r1, fp
 800a3e2:	eb63 0901 	sbc.w	r9, r3, r1
 800a3e6:	f04f 0200 	mov.w	r2, #0
 800a3ea:	f04f 0300 	mov.w	r3, #0
 800a3ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a3f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a3f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a3fa:	4690      	mov	r8, r2
 800a3fc:	4699      	mov	r9, r3
 800a3fe:	4623      	mov	r3, r4
 800a400:	eb18 0303 	adds.w	r3, r8, r3
 800a404:	60bb      	str	r3, [r7, #8]
 800a406:	462b      	mov	r3, r5
 800a408:	eb49 0303 	adc.w	r3, r9, r3
 800a40c:	60fb      	str	r3, [r7, #12]
 800a40e:	f04f 0200 	mov.w	r2, #0
 800a412:	f04f 0300 	mov.w	r3, #0
 800a416:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a41a:	4629      	mov	r1, r5
 800a41c:	024b      	lsls	r3, r1, #9
 800a41e:	4621      	mov	r1, r4
 800a420:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a424:	4621      	mov	r1, r4
 800a426:	024a      	lsls	r2, r1, #9
 800a428:	4610      	mov	r0, r2
 800a42a:	4619      	mov	r1, r3
 800a42c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a42e:	2200      	movs	r2, #0
 800a430:	62bb      	str	r3, [r7, #40]	; 0x28
 800a432:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a434:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a438:	f7f6 fc2e 	bl	8000c98 <__aeabi_uldivmod>
 800a43c:	4602      	mov	r2, r0
 800a43e:	460b      	mov	r3, r1
 800a440:	4613      	mov	r3, r2
 800a442:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a444:	e058      	b.n	800a4f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a446:	4b38      	ldr	r3, [pc, #224]	; (800a528 <HAL_RCC_GetSysClockFreq+0x200>)
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	099b      	lsrs	r3, r3, #6
 800a44c:	2200      	movs	r2, #0
 800a44e:	4618      	mov	r0, r3
 800a450:	4611      	mov	r1, r2
 800a452:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a456:	623b      	str	r3, [r7, #32]
 800a458:	2300      	movs	r3, #0
 800a45a:	627b      	str	r3, [r7, #36]	; 0x24
 800a45c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a460:	4642      	mov	r2, r8
 800a462:	464b      	mov	r3, r9
 800a464:	f04f 0000 	mov.w	r0, #0
 800a468:	f04f 0100 	mov.w	r1, #0
 800a46c:	0159      	lsls	r1, r3, #5
 800a46e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a472:	0150      	lsls	r0, r2, #5
 800a474:	4602      	mov	r2, r0
 800a476:	460b      	mov	r3, r1
 800a478:	4641      	mov	r1, r8
 800a47a:	ebb2 0a01 	subs.w	sl, r2, r1
 800a47e:	4649      	mov	r1, r9
 800a480:	eb63 0b01 	sbc.w	fp, r3, r1
 800a484:	f04f 0200 	mov.w	r2, #0
 800a488:	f04f 0300 	mov.w	r3, #0
 800a48c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a490:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a494:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a498:	ebb2 040a 	subs.w	r4, r2, sl
 800a49c:	eb63 050b 	sbc.w	r5, r3, fp
 800a4a0:	f04f 0200 	mov.w	r2, #0
 800a4a4:	f04f 0300 	mov.w	r3, #0
 800a4a8:	00eb      	lsls	r3, r5, #3
 800a4aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a4ae:	00e2      	lsls	r2, r4, #3
 800a4b0:	4614      	mov	r4, r2
 800a4b2:	461d      	mov	r5, r3
 800a4b4:	4643      	mov	r3, r8
 800a4b6:	18e3      	adds	r3, r4, r3
 800a4b8:	603b      	str	r3, [r7, #0]
 800a4ba:	464b      	mov	r3, r9
 800a4bc:	eb45 0303 	adc.w	r3, r5, r3
 800a4c0:	607b      	str	r3, [r7, #4]
 800a4c2:	f04f 0200 	mov.w	r2, #0
 800a4c6:	f04f 0300 	mov.w	r3, #0
 800a4ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a4ce:	4629      	mov	r1, r5
 800a4d0:	028b      	lsls	r3, r1, #10
 800a4d2:	4621      	mov	r1, r4
 800a4d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a4d8:	4621      	mov	r1, r4
 800a4da:	028a      	lsls	r2, r1, #10
 800a4dc:	4610      	mov	r0, r2
 800a4de:	4619      	mov	r1, r3
 800a4e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	61bb      	str	r3, [r7, #24]
 800a4e6:	61fa      	str	r2, [r7, #28]
 800a4e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a4ec:	f7f6 fbd4 	bl	8000c98 <__aeabi_uldivmod>
 800a4f0:	4602      	mov	r2, r0
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	4613      	mov	r3, r2
 800a4f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a4f8:	4b0b      	ldr	r3, [pc, #44]	; (800a528 <HAL_RCC_GetSysClockFreq+0x200>)
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	0c1b      	lsrs	r3, r3, #16
 800a4fe:	f003 0303 	and.w	r3, r3, #3
 800a502:	3301      	adds	r3, #1
 800a504:	005b      	lsls	r3, r3, #1
 800a506:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800a508:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a50a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a50c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a510:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a512:	e002      	b.n	800a51a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a514:	4b05      	ldr	r3, [pc, #20]	; (800a52c <HAL_RCC_GetSysClockFreq+0x204>)
 800a516:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a518:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a51a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3750      	adds	r7, #80	; 0x50
 800a520:	46bd      	mov	sp, r7
 800a522:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a526:	bf00      	nop
 800a528:	40023800 	.word	0x40023800
 800a52c:	00f42400 	.word	0x00f42400
 800a530:	007a1200 	.word	0x007a1200

0800a534 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a534:	b480      	push	{r7}
 800a536:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a538:	4b03      	ldr	r3, [pc, #12]	; (800a548 <HAL_RCC_GetHCLKFreq+0x14>)
 800a53a:	681b      	ldr	r3, [r3, #0]
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr
 800a546:	bf00      	nop
 800a548:	20000020 	.word	0x20000020

0800a54c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a550:	f7ff fff0 	bl	800a534 <HAL_RCC_GetHCLKFreq>
 800a554:	4602      	mov	r2, r0
 800a556:	4b05      	ldr	r3, [pc, #20]	; (800a56c <HAL_RCC_GetPCLK1Freq+0x20>)
 800a558:	689b      	ldr	r3, [r3, #8]
 800a55a:	0a9b      	lsrs	r3, r3, #10
 800a55c:	f003 0307 	and.w	r3, r3, #7
 800a560:	4903      	ldr	r1, [pc, #12]	; (800a570 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a562:	5ccb      	ldrb	r3, [r1, r3]
 800a564:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a568:	4618      	mov	r0, r3
 800a56a:	bd80      	pop	{r7, pc}
 800a56c:	40023800 	.word	0x40023800
 800a570:	0800f61c 	.word	0x0800f61c

0800a574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a578:	f7ff ffdc 	bl	800a534 <HAL_RCC_GetHCLKFreq>
 800a57c:	4602      	mov	r2, r0
 800a57e:	4b05      	ldr	r3, [pc, #20]	; (800a594 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	0b5b      	lsrs	r3, r3, #13
 800a584:	f003 0307 	and.w	r3, r3, #7
 800a588:	4903      	ldr	r1, [pc, #12]	; (800a598 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a58a:	5ccb      	ldrb	r3, [r1, r3]
 800a58c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a590:	4618      	mov	r0, r3
 800a592:	bd80      	pop	{r7, pc}
 800a594:	40023800 	.word	0x40023800
 800a598:	0800f61c 	.word	0x0800f61c

0800a59c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d101      	bne.n	800a5ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	e041      	b.n	800a632 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5b4:	b2db      	uxtb	r3, r3
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d106      	bne.n	800a5c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f7f7 fbc4 	bl	8001d50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2202      	movs	r2, #2
 800a5cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681a      	ldr	r2, [r3, #0]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	3304      	adds	r3, #4
 800a5d8:	4619      	mov	r1, r3
 800a5da:	4610      	mov	r0, r2
 800a5dc:	f000 fc54 	bl	800ae88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2201      	movs	r2, #1
 800a604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2201      	movs	r2, #1
 800a60c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2201      	movs	r2, #1
 800a614:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2201      	movs	r2, #1
 800a61c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2201      	movs	r2, #1
 800a624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2201      	movs	r2, #1
 800a62c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a630:	2300      	movs	r3, #0
}
 800a632:	4618      	mov	r0, r3
 800a634:	3708      	adds	r7, #8
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}

0800a63a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a63a:	b580      	push	{r7, lr}
 800a63c:	b082      	sub	sp, #8
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d101      	bne.n	800a64c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a648:	2301      	movs	r3, #1
 800a64a:	e041      	b.n	800a6d0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a652:	b2db      	uxtb	r3, r3
 800a654:	2b00      	cmp	r3, #0
 800a656:	d106      	bne.n	800a666 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2200      	movs	r2, #0
 800a65c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f000 f839 	bl	800a6d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2202      	movs	r2, #2
 800a66a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	3304      	adds	r3, #4
 800a676:	4619      	mov	r1, r3
 800a678:	4610      	mov	r0, r2
 800a67a:	f000 fc05 	bl	800ae88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2201      	movs	r2, #1
 800a682:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2201      	movs	r2, #1
 800a68a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2201      	movs	r2, #1
 800a692:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2201      	movs	r2, #1
 800a69a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a6ce:	2300      	movs	r3, #0
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3708      	adds	r7, #8
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b083      	sub	sp, #12
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a6e0:	bf00      	nop
 800a6e2:	370c      	adds	r7, #12
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr

0800a6ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b084      	sub	sp, #16
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d109      	bne.n	800a710 <HAL_TIM_PWM_Start+0x24>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a702:	b2db      	uxtb	r3, r3
 800a704:	2b01      	cmp	r3, #1
 800a706:	bf14      	ite	ne
 800a708:	2301      	movne	r3, #1
 800a70a:	2300      	moveq	r3, #0
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	e022      	b.n	800a756 <HAL_TIM_PWM_Start+0x6a>
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	2b04      	cmp	r3, #4
 800a714:	d109      	bne.n	800a72a <HAL_TIM_PWM_Start+0x3e>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a71c:	b2db      	uxtb	r3, r3
 800a71e:	2b01      	cmp	r3, #1
 800a720:	bf14      	ite	ne
 800a722:	2301      	movne	r3, #1
 800a724:	2300      	moveq	r3, #0
 800a726:	b2db      	uxtb	r3, r3
 800a728:	e015      	b.n	800a756 <HAL_TIM_PWM_Start+0x6a>
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	2b08      	cmp	r3, #8
 800a72e:	d109      	bne.n	800a744 <HAL_TIM_PWM_Start+0x58>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a736:	b2db      	uxtb	r3, r3
 800a738:	2b01      	cmp	r3, #1
 800a73a:	bf14      	ite	ne
 800a73c:	2301      	movne	r3, #1
 800a73e:	2300      	moveq	r3, #0
 800a740:	b2db      	uxtb	r3, r3
 800a742:	e008      	b.n	800a756 <HAL_TIM_PWM_Start+0x6a>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	bf14      	ite	ne
 800a750:	2301      	movne	r3, #1
 800a752:	2300      	moveq	r3, #0
 800a754:	b2db      	uxtb	r3, r3
 800a756:	2b00      	cmp	r3, #0
 800a758:	d001      	beq.n	800a75e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a75a:	2301      	movs	r3, #1
 800a75c:	e068      	b.n	800a830 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d104      	bne.n	800a76e <HAL_TIM_PWM_Start+0x82>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2202      	movs	r2, #2
 800a768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a76c:	e013      	b.n	800a796 <HAL_TIM_PWM_Start+0xaa>
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	2b04      	cmp	r3, #4
 800a772:	d104      	bne.n	800a77e <HAL_TIM_PWM_Start+0x92>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2202      	movs	r2, #2
 800a778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a77c:	e00b      	b.n	800a796 <HAL_TIM_PWM_Start+0xaa>
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	2b08      	cmp	r3, #8
 800a782:	d104      	bne.n	800a78e <HAL_TIM_PWM_Start+0xa2>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2202      	movs	r2, #2
 800a788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a78c:	e003      	b.n	800a796 <HAL_TIM_PWM_Start+0xaa>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2202      	movs	r2, #2
 800a792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	2201      	movs	r2, #1
 800a79c:	6839      	ldr	r1, [r7, #0]
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f000 fe18 	bl	800b3d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4a23      	ldr	r2, [pc, #140]	; (800a838 <HAL_TIM_PWM_Start+0x14c>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d107      	bne.n	800a7be <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a7bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4a1d      	ldr	r2, [pc, #116]	; (800a838 <HAL_TIM_PWM_Start+0x14c>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d018      	beq.n	800a7fa <HAL_TIM_PWM_Start+0x10e>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7d0:	d013      	beq.n	800a7fa <HAL_TIM_PWM_Start+0x10e>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4a19      	ldr	r2, [pc, #100]	; (800a83c <HAL_TIM_PWM_Start+0x150>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d00e      	beq.n	800a7fa <HAL_TIM_PWM_Start+0x10e>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4a17      	ldr	r2, [pc, #92]	; (800a840 <HAL_TIM_PWM_Start+0x154>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d009      	beq.n	800a7fa <HAL_TIM_PWM_Start+0x10e>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4a16      	ldr	r2, [pc, #88]	; (800a844 <HAL_TIM_PWM_Start+0x158>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d004      	beq.n	800a7fa <HAL_TIM_PWM_Start+0x10e>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4a14      	ldr	r2, [pc, #80]	; (800a848 <HAL_TIM_PWM_Start+0x15c>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d111      	bne.n	800a81e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	689b      	ldr	r3, [r3, #8]
 800a800:	f003 0307 	and.w	r3, r3, #7
 800a804:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2b06      	cmp	r3, #6
 800a80a:	d010      	beq.n	800a82e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	681a      	ldr	r2, [r3, #0]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f042 0201 	orr.w	r2, r2, #1
 800a81a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a81c:	e007      	b.n	800a82e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f042 0201 	orr.w	r2, r2, #1
 800a82c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a82e:	2300      	movs	r3, #0
}
 800a830:	4618      	mov	r0, r3
 800a832:	3710      	adds	r7, #16
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}
 800a838:	40010000 	.word	0x40010000
 800a83c:	40000400 	.word	0x40000400
 800a840:	40000800 	.word	0x40000800
 800a844:	40000c00 	.word	0x40000c00
 800a848:	40014000 	.word	0x40014000

0800a84c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b082      	sub	sp, #8
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	2200      	movs	r2, #0
 800a85c:	6839      	ldr	r1, [r7, #0]
 800a85e:	4618      	mov	r0, r3
 800a860:	f000 fdb8 	bl	800b3d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	4a29      	ldr	r2, [pc, #164]	; (800a910 <HAL_TIM_PWM_Stop+0xc4>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d117      	bne.n	800a89e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	6a1a      	ldr	r2, [r3, #32]
 800a874:	f241 1311 	movw	r3, #4369	; 0x1111
 800a878:	4013      	ands	r3, r2
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d10f      	bne.n	800a89e <HAL_TIM_PWM_Stop+0x52>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	6a1a      	ldr	r2, [r3, #32]
 800a884:	f240 4344 	movw	r3, #1092	; 0x444
 800a888:	4013      	ands	r3, r2
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d107      	bne.n	800a89e <HAL_TIM_PWM_Stop+0x52>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a89c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	6a1a      	ldr	r2, [r3, #32]
 800a8a4:	f241 1311 	movw	r3, #4369	; 0x1111
 800a8a8:	4013      	ands	r3, r2
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d10f      	bne.n	800a8ce <HAL_TIM_PWM_Stop+0x82>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	6a1a      	ldr	r2, [r3, #32]
 800a8b4:	f240 4344 	movw	r3, #1092	; 0x444
 800a8b8:	4013      	ands	r3, r2
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d107      	bne.n	800a8ce <HAL_TIM_PWM_Stop+0x82>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	681a      	ldr	r2, [r3, #0]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f022 0201 	bic.w	r2, r2, #1
 800a8cc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d104      	bne.n	800a8de <HAL_TIM_PWM_Stop+0x92>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a8dc:	e013      	b.n	800a906 <HAL_TIM_PWM_Stop+0xba>
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	2b04      	cmp	r3, #4
 800a8e2:	d104      	bne.n	800a8ee <HAL_TIM_PWM_Stop+0xa2>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a8ec:	e00b      	b.n	800a906 <HAL_TIM_PWM_Stop+0xba>
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	2b08      	cmp	r3, #8
 800a8f2:	d104      	bne.n	800a8fe <HAL_TIM_PWM_Stop+0xb2>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a8fc:	e003      	b.n	800a906 <HAL_TIM_PWM_Stop+0xba>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2201      	movs	r2, #1
 800a902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800a906:	2300      	movs	r3, #0
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3708      	adds	r7, #8
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}
 800a910:	40010000 	.word	0x40010000

0800a914 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b082      	sub	sp, #8
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	691b      	ldr	r3, [r3, #16]
 800a922:	f003 0302 	and.w	r3, r3, #2
 800a926:	2b02      	cmp	r3, #2
 800a928:	d122      	bne.n	800a970 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	68db      	ldr	r3, [r3, #12]
 800a930:	f003 0302 	and.w	r3, r3, #2
 800a934:	2b02      	cmp	r3, #2
 800a936:	d11b      	bne.n	800a970 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f06f 0202 	mvn.w	r2, #2
 800a940:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2201      	movs	r2, #1
 800a946:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	699b      	ldr	r3, [r3, #24]
 800a94e:	f003 0303 	and.w	r3, r3, #3
 800a952:	2b00      	cmp	r3, #0
 800a954:	d003      	beq.n	800a95e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 fa77 	bl	800ae4a <HAL_TIM_IC_CaptureCallback>
 800a95c:	e005      	b.n	800a96a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f000 fa69 	bl	800ae36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f000 fa7a 	bl	800ae5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2200      	movs	r2, #0
 800a96e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	691b      	ldr	r3, [r3, #16]
 800a976:	f003 0304 	and.w	r3, r3, #4
 800a97a:	2b04      	cmp	r3, #4
 800a97c:	d122      	bne.n	800a9c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	f003 0304 	and.w	r3, r3, #4
 800a988:	2b04      	cmp	r3, #4
 800a98a:	d11b      	bne.n	800a9c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f06f 0204 	mvn.w	r2, #4
 800a994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2202      	movs	r2, #2
 800a99a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	699b      	ldr	r3, [r3, #24]
 800a9a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d003      	beq.n	800a9b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 fa4d 	bl	800ae4a <HAL_TIM_IC_CaptureCallback>
 800a9b0:	e005      	b.n	800a9be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f000 fa3f 	bl	800ae36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 fa50 	bl	800ae5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	691b      	ldr	r3, [r3, #16]
 800a9ca:	f003 0308 	and.w	r3, r3, #8
 800a9ce:	2b08      	cmp	r3, #8
 800a9d0:	d122      	bne.n	800aa18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	68db      	ldr	r3, [r3, #12]
 800a9d8:	f003 0308 	and.w	r3, r3, #8
 800a9dc:	2b08      	cmp	r3, #8
 800a9de:	d11b      	bne.n	800aa18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f06f 0208 	mvn.w	r2, #8
 800a9e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2204      	movs	r2, #4
 800a9ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	69db      	ldr	r3, [r3, #28]
 800a9f6:	f003 0303 	and.w	r3, r3, #3
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d003      	beq.n	800aa06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 fa23 	bl	800ae4a <HAL_TIM_IC_CaptureCallback>
 800aa04:	e005      	b.n	800aa12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f000 fa15 	bl	800ae36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f000 fa26 	bl	800ae5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2200      	movs	r2, #0
 800aa16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	691b      	ldr	r3, [r3, #16]
 800aa1e:	f003 0310 	and.w	r3, r3, #16
 800aa22:	2b10      	cmp	r3, #16
 800aa24:	d122      	bne.n	800aa6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	68db      	ldr	r3, [r3, #12]
 800aa2c:	f003 0310 	and.w	r3, r3, #16
 800aa30:	2b10      	cmp	r3, #16
 800aa32:	d11b      	bne.n	800aa6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f06f 0210 	mvn.w	r2, #16
 800aa3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2208      	movs	r2, #8
 800aa42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	69db      	ldr	r3, [r3, #28]
 800aa4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d003      	beq.n	800aa5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f000 f9f9 	bl	800ae4a <HAL_TIM_IC_CaptureCallback>
 800aa58:	e005      	b.n	800aa66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f000 f9eb 	bl	800ae36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 f9fc 	bl	800ae5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	691b      	ldr	r3, [r3, #16]
 800aa72:	f003 0301 	and.w	r3, r3, #1
 800aa76:	2b01      	cmp	r3, #1
 800aa78:	d10e      	bne.n	800aa98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	68db      	ldr	r3, [r3, #12]
 800aa80:	f003 0301 	and.w	r3, r3, #1
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d107      	bne.n	800aa98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f06f 0201 	mvn.w	r2, #1
 800aa90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f7f6 ff76 	bl	8001984 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	691b      	ldr	r3, [r3, #16]
 800aa9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaa2:	2b80      	cmp	r3, #128	; 0x80
 800aaa4:	d10e      	bne.n	800aac4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	68db      	ldr	r3, [r3, #12]
 800aaac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aab0:	2b80      	cmp	r3, #128	; 0x80
 800aab2:	d107      	bne.n	800aac4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aabc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f000 fd78 	bl	800b5b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	691b      	ldr	r3, [r3, #16]
 800aaca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aace:	2b40      	cmp	r3, #64	; 0x40
 800aad0:	d10e      	bne.n	800aaf0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	68db      	ldr	r3, [r3, #12]
 800aad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aadc:	2b40      	cmp	r3, #64	; 0x40
 800aade:	d107      	bne.n	800aaf0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f000 f9c1 	bl	800ae72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	691b      	ldr	r3, [r3, #16]
 800aaf6:	f003 0320 	and.w	r3, r3, #32
 800aafa:	2b20      	cmp	r3, #32
 800aafc:	d10e      	bne.n	800ab1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	68db      	ldr	r3, [r3, #12]
 800ab04:	f003 0320 	and.w	r3, r3, #32
 800ab08:	2b20      	cmp	r3, #32
 800ab0a:	d107      	bne.n	800ab1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f06f 0220 	mvn.w	r2, #32
 800ab14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 fd42 	bl	800b5a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ab1c:	bf00      	nop
 800ab1e:	3708      	adds	r7, #8
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}

0800ab24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b086      	sub	sp, #24
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	60f8      	str	r0, [r7, #12]
 800ab2c:	60b9      	str	r1, [r7, #8]
 800ab2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab30:	2300      	movs	r3, #0
 800ab32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab3a:	2b01      	cmp	r3, #1
 800ab3c:	d101      	bne.n	800ab42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ab3e:	2302      	movs	r3, #2
 800ab40:	e0ae      	b.n	800aca0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2201      	movs	r2, #1
 800ab46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2b0c      	cmp	r3, #12
 800ab4e:	f200 809f 	bhi.w	800ac90 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800ab52:	a201      	add	r2, pc, #4	; (adr r2, 800ab58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ab54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab58:	0800ab8d 	.word	0x0800ab8d
 800ab5c:	0800ac91 	.word	0x0800ac91
 800ab60:	0800ac91 	.word	0x0800ac91
 800ab64:	0800ac91 	.word	0x0800ac91
 800ab68:	0800abcd 	.word	0x0800abcd
 800ab6c:	0800ac91 	.word	0x0800ac91
 800ab70:	0800ac91 	.word	0x0800ac91
 800ab74:	0800ac91 	.word	0x0800ac91
 800ab78:	0800ac0f 	.word	0x0800ac0f
 800ab7c:	0800ac91 	.word	0x0800ac91
 800ab80:	0800ac91 	.word	0x0800ac91
 800ab84:	0800ac91 	.word	0x0800ac91
 800ab88:	0800ac4f 	.word	0x0800ac4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	68b9      	ldr	r1, [r7, #8]
 800ab92:	4618      	mov	r0, r3
 800ab94:	f000 f9f8 	bl	800af88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	699a      	ldr	r2, [r3, #24]
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f042 0208 	orr.w	r2, r2, #8
 800aba6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	699a      	ldr	r2, [r3, #24]
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f022 0204 	bic.w	r2, r2, #4
 800abb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	6999      	ldr	r1, [r3, #24]
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	691a      	ldr	r2, [r3, #16]
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	430a      	orrs	r2, r1
 800abc8:	619a      	str	r2, [r3, #24]
      break;
 800abca:	e064      	b.n	800ac96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	68b9      	ldr	r1, [r7, #8]
 800abd2:	4618      	mov	r0, r3
 800abd4:	f000 fa3e 	bl	800b054 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	699a      	ldr	r2, [r3, #24]
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800abe6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	699a      	ldr	r2, [r3, #24]
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800abf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	6999      	ldr	r1, [r3, #24]
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	691b      	ldr	r3, [r3, #16]
 800ac02:	021a      	lsls	r2, r3, #8
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	430a      	orrs	r2, r1
 800ac0a:	619a      	str	r2, [r3, #24]
      break;
 800ac0c:	e043      	b.n	800ac96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	68b9      	ldr	r1, [r7, #8]
 800ac14:	4618      	mov	r0, r3
 800ac16:	f000 fa89 	bl	800b12c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	69da      	ldr	r2, [r3, #28]
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f042 0208 	orr.w	r2, r2, #8
 800ac28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	69da      	ldr	r2, [r3, #28]
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f022 0204 	bic.w	r2, r2, #4
 800ac38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	69d9      	ldr	r1, [r3, #28]
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	691a      	ldr	r2, [r3, #16]
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	430a      	orrs	r2, r1
 800ac4a:	61da      	str	r2, [r3, #28]
      break;
 800ac4c:	e023      	b.n	800ac96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	68b9      	ldr	r1, [r7, #8]
 800ac54:	4618      	mov	r0, r3
 800ac56:	f000 fad3 	bl	800b200 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	69da      	ldr	r2, [r3, #28]
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	69da      	ldr	r2, [r3, #28]
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	69d9      	ldr	r1, [r3, #28]
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	691b      	ldr	r3, [r3, #16]
 800ac84:	021a      	lsls	r2, r3, #8
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	430a      	orrs	r2, r1
 800ac8c:	61da      	str	r2, [r3, #28]
      break;
 800ac8e:	e002      	b.n	800ac96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800ac90:	2301      	movs	r3, #1
 800ac92:	75fb      	strb	r3, [r7, #23]
      break;
 800ac94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ac9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3718      	adds	r7, #24
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b084      	sub	sp, #16
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800acb2:	2300      	movs	r3, #0
 800acb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d101      	bne.n	800acc4 <HAL_TIM_ConfigClockSource+0x1c>
 800acc0:	2302      	movs	r3, #2
 800acc2:	e0b4      	b.n	800ae2e <HAL_TIM_ConfigClockSource+0x186>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2201      	movs	r2, #1
 800acc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2202      	movs	r2, #2
 800acd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	689b      	ldr	r3, [r3, #8]
 800acda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ace2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800acea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	68ba      	ldr	r2, [r7, #8]
 800acf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acfc:	d03e      	beq.n	800ad7c <HAL_TIM_ConfigClockSource+0xd4>
 800acfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad02:	f200 8087 	bhi.w	800ae14 <HAL_TIM_ConfigClockSource+0x16c>
 800ad06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad0a:	f000 8086 	beq.w	800ae1a <HAL_TIM_ConfigClockSource+0x172>
 800ad0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad12:	d87f      	bhi.n	800ae14 <HAL_TIM_ConfigClockSource+0x16c>
 800ad14:	2b70      	cmp	r3, #112	; 0x70
 800ad16:	d01a      	beq.n	800ad4e <HAL_TIM_ConfigClockSource+0xa6>
 800ad18:	2b70      	cmp	r3, #112	; 0x70
 800ad1a:	d87b      	bhi.n	800ae14 <HAL_TIM_ConfigClockSource+0x16c>
 800ad1c:	2b60      	cmp	r3, #96	; 0x60
 800ad1e:	d050      	beq.n	800adc2 <HAL_TIM_ConfigClockSource+0x11a>
 800ad20:	2b60      	cmp	r3, #96	; 0x60
 800ad22:	d877      	bhi.n	800ae14 <HAL_TIM_ConfigClockSource+0x16c>
 800ad24:	2b50      	cmp	r3, #80	; 0x50
 800ad26:	d03c      	beq.n	800ada2 <HAL_TIM_ConfigClockSource+0xfa>
 800ad28:	2b50      	cmp	r3, #80	; 0x50
 800ad2a:	d873      	bhi.n	800ae14 <HAL_TIM_ConfigClockSource+0x16c>
 800ad2c:	2b40      	cmp	r3, #64	; 0x40
 800ad2e:	d058      	beq.n	800ade2 <HAL_TIM_ConfigClockSource+0x13a>
 800ad30:	2b40      	cmp	r3, #64	; 0x40
 800ad32:	d86f      	bhi.n	800ae14 <HAL_TIM_ConfigClockSource+0x16c>
 800ad34:	2b30      	cmp	r3, #48	; 0x30
 800ad36:	d064      	beq.n	800ae02 <HAL_TIM_ConfigClockSource+0x15a>
 800ad38:	2b30      	cmp	r3, #48	; 0x30
 800ad3a:	d86b      	bhi.n	800ae14 <HAL_TIM_ConfigClockSource+0x16c>
 800ad3c:	2b20      	cmp	r3, #32
 800ad3e:	d060      	beq.n	800ae02 <HAL_TIM_ConfigClockSource+0x15a>
 800ad40:	2b20      	cmp	r3, #32
 800ad42:	d867      	bhi.n	800ae14 <HAL_TIM_ConfigClockSource+0x16c>
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d05c      	beq.n	800ae02 <HAL_TIM_ConfigClockSource+0x15a>
 800ad48:	2b10      	cmp	r3, #16
 800ad4a:	d05a      	beq.n	800ae02 <HAL_TIM_ConfigClockSource+0x15a>
 800ad4c:	e062      	b.n	800ae14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6818      	ldr	r0, [r3, #0]
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	6899      	ldr	r1, [r3, #8]
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	685a      	ldr	r2, [r3, #4]
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	68db      	ldr	r3, [r3, #12]
 800ad5e:	f000 fb19 	bl	800b394 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	689b      	ldr	r3, [r3, #8]
 800ad68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ad70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	68ba      	ldr	r2, [r7, #8]
 800ad78:	609a      	str	r2, [r3, #8]
      break;
 800ad7a:	e04f      	b.n	800ae1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6818      	ldr	r0, [r3, #0]
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	6899      	ldr	r1, [r3, #8]
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	685a      	ldr	r2, [r3, #4]
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	68db      	ldr	r3, [r3, #12]
 800ad8c:	f000 fb02 	bl	800b394 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	689a      	ldr	r2, [r3, #8]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ad9e:	609a      	str	r2, [r3, #8]
      break;
 800ada0:	e03c      	b.n	800ae1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6818      	ldr	r0, [r3, #0]
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	6859      	ldr	r1, [r3, #4]
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	68db      	ldr	r3, [r3, #12]
 800adae:	461a      	mov	r2, r3
 800adb0:	f000 fa76 	bl	800b2a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	2150      	movs	r1, #80	; 0x50
 800adba:	4618      	mov	r0, r3
 800adbc:	f000 facf 	bl	800b35e <TIM_ITRx_SetConfig>
      break;
 800adc0:	e02c      	b.n	800ae1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6818      	ldr	r0, [r3, #0]
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	6859      	ldr	r1, [r3, #4]
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	68db      	ldr	r3, [r3, #12]
 800adce:	461a      	mov	r2, r3
 800add0:	f000 fa95 	bl	800b2fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2160      	movs	r1, #96	; 0x60
 800adda:	4618      	mov	r0, r3
 800addc:	f000 fabf 	bl	800b35e <TIM_ITRx_SetConfig>
      break;
 800ade0:	e01c      	b.n	800ae1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6818      	ldr	r0, [r3, #0]
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	6859      	ldr	r1, [r3, #4]
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	68db      	ldr	r3, [r3, #12]
 800adee:	461a      	mov	r2, r3
 800adf0:	f000 fa56 	bl	800b2a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	2140      	movs	r1, #64	; 0x40
 800adfa:	4618      	mov	r0, r3
 800adfc:	f000 faaf 	bl	800b35e <TIM_ITRx_SetConfig>
      break;
 800ae00:	e00c      	b.n	800ae1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681a      	ldr	r2, [r3, #0]
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	4610      	mov	r0, r2
 800ae0e:	f000 faa6 	bl	800b35e <TIM_ITRx_SetConfig>
      break;
 800ae12:	e003      	b.n	800ae1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ae14:	2301      	movs	r3, #1
 800ae16:	73fb      	strb	r3, [r7, #15]
      break;
 800ae18:	e000      	b.n	800ae1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ae1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2201      	movs	r2, #1
 800ae20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2200      	movs	r2, #0
 800ae28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ae2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3710      	adds	r7, #16
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}

0800ae36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ae36:	b480      	push	{r7}
 800ae38:	b083      	sub	sp, #12
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ae3e:	bf00      	nop
 800ae40:	370c      	adds	r7, #12
 800ae42:	46bd      	mov	sp, r7
 800ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae48:	4770      	bx	lr

0800ae4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ae4a:	b480      	push	{r7}
 800ae4c:	b083      	sub	sp, #12
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ae52:	bf00      	nop
 800ae54:	370c      	adds	r7, #12
 800ae56:	46bd      	mov	sp, r7
 800ae58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5c:	4770      	bx	lr

0800ae5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ae5e:	b480      	push	{r7}
 800ae60:	b083      	sub	sp, #12
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ae66:	bf00      	nop
 800ae68:	370c      	adds	r7, #12
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae70:	4770      	bx	lr

0800ae72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ae72:	b480      	push	{r7}
 800ae74:	b083      	sub	sp, #12
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ae7a:	bf00      	nop
 800ae7c:	370c      	adds	r7, #12
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae84:	4770      	bx	lr
	...

0800ae88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b085      	sub	sp, #20
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	4a34      	ldr	r2, [pc, #208]	; (800af6c <TIM_Base_SetConfig+0xe4>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d00f      	beq.n	800aec0 <TIM_Base_SetConfig+0x38>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aea6:	d00b      	beq.n	800aec0 <TIM_Base_SetConfig+0x38>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	4a31      	ldr	r2, [pc, #196]	; (800af70 <TIM_Base_SetConfig+0xe8>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d007      	beq.n	800aec0 <TIM_Base_SetConfig+0x38>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	4a30      	ldr	r2, [pc, #192]	; (800af74 <TIM_Base_SetConfig+0xec>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d003      	beq.n	800aec0 <TIM_Base_SetConfig+0x38>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	4a2f      	ldr	r2, [pc, #188]	; (800af78 <TIM_Base_SetConfig+0xf0>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d108      	bne.n	800aed2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	68fa      	ldr	r2, [r7, #12]
 800aece:	4313      	orrs	r3, r2
 800aed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	4a25      	ldr	r2, [pc, #148]	; (800af6c <TIM_Base_SetConfig+0xe4>)
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d01b      	beq.n	800af12 <TIM_Base_SetConfig+0x8a>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aee0:	d017      	beq.n	800af12 <TIM_Base_SetConfig+0x8a>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	4a22      	ldr	r2, [pc, #136]	; (800af70 <TIM_Base_SetConfig+0xe8>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d013      	beq.n	800af12 <TIM_Base_SetConfig+0x8a>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	4a21      	ldr	r2, [pc, #132]	; (800af74 <TIM_Base_SetConfig+0xec>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d00f      	beq.n	800af12 <TIM_Base_SetConfig+0x8a>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	4a20      	ldr	r2, [pc, #128]	; (800af78 <TIM_Base_SetConfig+0xf0>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d00b      	beq.n	800af12 <TIM_Base_SetConfig+0x8a>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	4a1f      	ldr	r2, [pc, #124]	; (800af7c <TIM_Base_SetConfig+0xf4>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d007      	beq.n	800af12 <TIM_Base_SetConfig+0x8a>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	4a1e      	ldr	r2, [pc, #120]	; (800af80 <TIM_Base_SetConfig+0xf8>)
 800af06:	4293      	cmp	r3, r2
 800af08:	d003      	beq.n	800af12 <TIM_Base_SetConfig+0x8a>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	4a1d      	ldr	r2, [pc, #116]	; (800af84 <TIM_Base_SetConfig+0xfc>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	d108      	bne.n	800af24 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	68db      	ldr	r3, [r3, #12]
 800af1e:	68fa      	ldr	r2, [r7, #12]
 800af20:	4313      	orrs	r3, r2
 800af22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	695b      	ldr	r3, [r3, #20]
 800af2e:	4313      	orrs	r3, r2
 800af30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	68fa      	ldr	r2, [r7, #12]
 800af36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	689a      	ldr	r2, [r3, #8]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	681a      	ldr	r2, [r3, #0]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	4a08      	ldr	r2, [pc, #32]	; (800af6c <TIM_Base_SetConfig+0xe4>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d103      	bne.n	800af58 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	691a      	ldr	r2, [r3, #16]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2201      	movs	r2, #1
 800af5c:	615a      	str	r2, [r3, #20]
}
 800af5e:	bf00      	nop
 800af60:	3714      	adds	r7, #20
 800af62:	46bd      	mov	sp, r7
 800af64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af68:	4770      	bx	lr
 800af6a:	bf00      	nop
 800af6c:	40010000 	.word	0x40010000
 800af70:	40000400 	.word	0x40000400
 800af74:	40000800 	.word	0x40000800
 800af78:	40000c00 	.word	0x40000c00
 800af7c:	40014000 	.word	0x40014000
 800af80:	40014400 	.word	0x40014400
 800af84:	40014800 	.word	0x40014800

0800af88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af88:	b480      	push	{r7}
 800af8a:	b087      	sub	sp, #28
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6a1b      	ldr	r3, [r3, #32]
 800af96:	f023 0201 	bic.w	r2, r3, #1
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6a1b      	ldr	r3, [r3, #32]
 800afa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	699b      	ldr	r3, [r3, #24]
 800afae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f023 0303 	bic.w	r3, r3, #3
 800afbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	68fa      	ldr	r2, [r7, #12]
 800afc6:	4313      	orrs	r3, r2
 800afc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	f023 0302 	bic.w	r3, r3, #2
 800afd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	689b      	ldr	r3, [r3, #8]
 800afd6:	697a      	ldr	r2, [r7, #20]
 800afd8:	4313      	orrs	r3, r2
 800afda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	4a1c      	ldr	r2, [pc, #112]	; (800b050 <TIM_OC1_SetConfig+0xc8>)
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d10c      	bne.n	800affe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	f023 0308 	bic.w	r3, r3, #8
 800afea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	68db      	ldr	r3, [r3, #12]
 800aff0:	697a      	ldr	r2, [r7, #20]
 800aff2:	4313      	orrs	r3, r2
 800aff4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	f023 0304 	bic.w	r3, r3, #4
 800affc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	4a13      	ldr	r2, [pc, #76]	; (800b050 <TIM_OC1_SetConfig+0xc8>)
 800b002:	4293      	cmp	r3, r2
 800b004:	d111      	bne.n	800b02a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b00c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b014:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	695b      	ldr	r3, [r3, #20]
 800b01a:	693a      	ldr	r2, [r7, #16]
 800b01c:	4313      	orrs	r3, r2
 800b01e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	699b      	ldr	r3, [r3, #24]
 800b024:	693a      	ldr	r2, [r7, #16]
 800b026:	4313      	orrs	r3, r2
 800b028:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	693a      	ldr	r2, [r7, #16]
 800b02e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	68fa      	ldr	r2, [r7, #12]
 800b034:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	685a      	ldr	r2, [r3, #4]
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	697a      	ldr	r2, [r7, #20]
 800b042:	621a      	str	r2, [r3, #32]
}
 800b044:	bf00      	nop
 800b046:	371c      	adds	r7, #28
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr
 800b050:	40010000 	.word	0x40010000

0800b054 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b054:	b480      	push	{r7}
 800b056:	b087      	sub	sp, #28
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6a1b      	ldr	r3, [r3, #32]
 800b062:	f023 0210 	bic.w	r2, r3, #16
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6a1b      	ldr	r3, [r3, #32]
 800b06e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	699b      	ldr	r3, [r3, #24]
 800b07a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b08a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	021b      	lsls	r3, r3, #8
 800b092:	68fa      	ldr	r2, [r7, #12]
 800b094:	4313      	orrs	r3, r2
 800b096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	f023 0320 	bic.w	r3, r3, #32
 800b09e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	689b      	ldr	r3, [r3, #8]
 800b0a4:	011b      	lsls	r3, r3, #4
 800b0a6:	697a      	ldr	r2, [r7, #20]
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	4a1e      	ldr	r2, [pc, #120]	; (800b128 <TIM_OC2_SetConfig+0xd4>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d10d      	bne.n	800b0d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	68db      	ldr	r3, [r3, #12]
 800b0c0:	011b      	lsls	r3, r3, #4
 800b0c2:	697a      	ldr	r2, [r7, #20]
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	4a15      	ldr	r2, [pc, #84]	; (800b128 <TIM_OC2_SetConfig+0xd4>)
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d113      	bne.n	800b100 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b0de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b0e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	695b      	ldr	r3, [r3, #20]
 800b0ec:	009b      	lsls	r3, r3, #2
 800b0ee:	693a      	ldr	r2, [r7, #16]
 800b0f0:	4313      	orrs	r3, r2
 800b0f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	699b      	ldr	r3, [r3, #24]
 800b0f8:	009b      	lsls	r3, r3, #2
 800b0fa:	693a      	ldr	r2, [r7, #16]
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	693a      	ldr	r2, [r7, #16]
 800b104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	68fa      	ldr	r2, [r7, #12]
 800b10a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	685a      	ldr	r2, [r3, #4]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	697a      	ldr	r2, [r7, #20]
 800b118:	621a      	str	r2, [r3, #32]
}
 800b11a:	bf00      	nop
 800b11c:	371c      	adds	r7, #28
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr
 800b126:	bf00      	nop
 800b128:	40010000 	.word	0x40010000

0800b12c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b087      	sub	sp, #28
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6a1b      	ldr	r3, [r3, #32]
 800b13a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6a1b      	ldr	r3, [r3, #32]
 800b146:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	685b      	ldr	r3, [r3, #4]
 800b14c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	69db      	ldr	r3, [r3, #28]
 800b152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b15a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f023 0303 	bic.w	r3, r3, #3
 800b162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	68fa      	ldr	r2, [r7, #12]
 800b16a:	4313      	orrs	r3, r2
 800b16c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	689b      	ldr	r3, [r3, #8]
 800b17a:	021b      	lsls	r3, r3, #8
 800b17c:	697a      	ldr	r2, [r7, #20]
 800b17e:	4313      	orrs	r3, r2
 800b180:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	4a1d      	ldr	r2, [pc, #116]	; (800b1fc <TIM_OC3_SetConfig+0xd0>)
 800b186:	4293      	cmp	r3, r2
 800b188:	d10d      	bne.n	800b1a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b190:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	68db      	ldr	r3, [r3, #12]
 800b196:	021b      	lsls	r3, r3, #8
 800b198:	697a      	ldr	r2, [r7, #20]
 800b19a:	4313      	orrs	r3, r2
 800b19c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b1a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	4a14      	ldr	r2, [pc, #80]	; (800b1fc <TIM_OC3_SetConfig+0xd0>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d113      	bne.n	800b1d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b1b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b1bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	695b      	ldr	r3, [r3, #20]
 800b1c2:	011b      	lsls	r3, r3, #4
 800b1c4:	693a      	ldr	r2, [r7, #16]
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	699b      	ldr	r3, [r3, #24]
 800b1ce:	011b      	lsls	r3, r3, #4
 800b1d0:	693a      	ldr	r2, [r7, #16]
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	693a      	ldr	r2, [r7, #16]
 800b1da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	68fa      	ldr	r2, [r7, #12]
 800b1e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	685a      	ldr	r2, [r3, #4]
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	697a      	ldr	r2, [r7, #20]
 800b1ee:	621a      	str	r2, [r3, #32]
}
 800b1f0:	bf00      	nop
 800b1f2:	371c      	adds	r7, #28
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr
 800b1fc:	40010000 	.word	0x40010000

0800b200 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b200:	b480      	push	{r7}
 800b202:	b087      	sub	sp, #28
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6a1b      	ldr	r3, [r3, #32]
 800b20e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6a1b      	ldr	r3, [r3, #32]
 800b21a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	69db      	ldr	r3, [r3, #28]
 800b226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b22e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b236:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	021b      	lsls	r3, r3, #8
 800b23e:	68fa      	ldr	r2, [r7, #12]
 800b240:	4313      	orrs	r3, r2
 800b242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b24a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	689b      	ldr	r3, [r3, #8]
 800b250:	031b      	lsls	r3, r3, #12
 800b252:	693a      	ldr	r2, [r7, #16]
 800b254:	4313      	orrs	r3, r2
 800b256:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	4a10      	ldr	r2, [pc, #64]	; (800b29c <TIM_OC4_SetConfig+0x9c>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d109      	bne.n	800b274 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b266:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	695b      	ldr	r3, [r3, #20]
 800b26c:	019b      	lsls	r3, r3, #6
 800b26e:	697a      	ldr	r2, [r7, #20]
 800b270:	4313      	orrs	r3, r2
 800b272:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	697a      	ldr	r2, [r7, #20]
 800b278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	68fa      	ldr	r2, [r7, #12]
 800b27e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	685a      	ldr	r2, [r3, #4]
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	693a      	ldr	r2, [r7, #16]
 800b28c:	621a      	str	r2, [r3, #32]
}
 800b28e:	bf00      	nop
 800b290:	371c      	adds	r7, #28
 800b292:	46bd      	mov	sp, r7
 800b294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b298:	4770      	bx	lr
 800b29a:	bf00      	nop
 800b29c:	40010000 	.word	0x40010000

0800b2a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b087      	sub	sp, #28
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	60f8      	str	r0, [r7, #12]
 800b2a8:	60b9      	str	r1, [r7, #8]
 800b2aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	6a1b      	ldr	r3, [r3, #32]
 800b2b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	6a1b      	ldr	r3, [r3, #32]
 800b2b6:	f023 0201 	bic.w	r2, r3, #1
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	699b      	ldr	r3, [r3, #24]
 800b2c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b2ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	011b      	lsls	r3, r3, #4
 800b2d0:	693a      	ldr	r2, [r7, #16]
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	f023 030a 	bic.w	r3, r3, #10
 800b2dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b2de:	697a      	ldr	r2, [r7, #20]
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	4313      	orrs	r3, r2
 800b2e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	693a      	ldr	r2, [r7, #16]
 800b2ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	697a      	ldr	r2, [r7, #20]
 800b2f0:	621a      	str	r2, [r3, #32]
}
 800b2f2:	bf00      	nop
 800b2f4:	371c      	adds	r7, #28
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fc:	4770      	bx	lr

0800b2fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b2fe:	b480      	push	{r7}
 800b300:	b087      	sub	sp, #28
 800b302:	af00      	add	r7, sp, #0
 800b304:	60f8      	str	r0, [r7, #12]
 800b306:	60b9      	str	r1, [r7, #8]
 800b308:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	6a1b      	ldr	r3, [r3, #32]
 800b30e:	f023 0210 	bic.w	r2, r3, #16
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	699b      	ldr	r3, [r3, #24]
 800b31a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	6a1b      	ldr	r3, [r3, #32]
 800b320:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b328:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	031b      	lsls	r3, r3, #12
 800b32e:	697a      	ldr	r2, [r7, #20]
 800b330:	4313      	orrs	r3, r2
 800b332:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b33a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	011b      	lsls	r3, r3, #4
 800b340:	693a      	ldr	r2, [r7, #16]
 800b342:	4313      	orrs	r3, r2
 800b344:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	697a      	ldr	r2, [r7, #20]
 800b34a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	693a      	ldr	r2, [r7, #16]
 800b350:	621a      	str	r2, [r3, #32]
}
 800b352:	bf00      	nop
 800b354:	371c      	adds	r7, #28
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr

0800b35e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b35e:	b480      	push	{r7}
 800b360:	b085      	sub	sp, #20
 800b362:	af00      	add	r7, sp, #0
 800b364:	6078      	str	r0, [r7, #4]
 800b366:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	689b      	ldr	r3, [r3, #8]
 800b36c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b374:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b376:	683a      	ldr	r2, [r7, #0]
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	4313      	orrs	r3, r2
 800b37c:	f043 0307 	orr.w	r3, r3, #7
 800b380:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	68fa      	ldr	r2, [r7, #12]
 800b386:	609a      	str	r2, [r3, #8]
}
 800b388:	bf00      	nop
 800b38a:	3714      	adds	r7, #20
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b394:	b480      	push	{r7}
 800b396:	b087      	sub	sp, #28
 800b398:	af00      	add	r7, sp, #0
 800b39a:	60f8      	str	r0, [r7, #12]
 800b39c:	60b9      	str	r1, [r7, #8]
 800b39e:	607a      	str	r2, [r7, #4]
 800b3a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	689b      	ldr	r3, [r3, #8]
 800b3a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b3ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	021a      	lsls	r2, r3, #8
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	431a      	orrs	r2, r3
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	4313      	orrs	r3, r2
 800b3bc:	697a      	ldr	r2, [r7, #20]
 800b3be:	4313      	orrs	r3, r2
 800b3c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	697a      	ldr	r2, [r7, #20]
 800b3c6:	609a      	str	r2, [r3, #8]
}
 800b3c8:	bf00      	nop
 800b3ca:	371c      	adds	r7, #28
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr

0800b3d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b087      	sub	sp, #28
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	60f8      	str	r0, [r7, #12]
 800b3dc:	60b9      	str	r1, [r7, #8]
 800b3de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	f003 031f 	and.w	r3, r3, #31
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	fa02 f303 	lsl.w	r3, r2, r3
 800b3ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	6a1a      	ldr	r2, [r3, #32]
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	43db      	mvns	r3, r3
 800b3f6:	401a      	ands	r2, r3
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	6a1a      	ldr	r2, [r3, #32]
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	f003 031f 	and.w	r3, r3, #31
 800b406:	6879      	ldr	r1, [r7, #4]
 800b408:	fa01 f303 	lsl.w	r3, r1, r3
 800b40c:	431a      	orrs	r2, r3
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	621a      	str	r2, [r3, #32]
}
 800b412:	bf00      	nop
 800b414:	371c      	adds	r7, #28
 800b416:	46bd      	mov	sp, r7
 800b418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41c:	4770      	bx	lr
	...

0800b420 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b420:	b480      	push	{r7}
 800b422:	b085      	sub	sp, #20
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b430:	2b01      	cmp	r3, #1
 800b432:	d101      	bne.n	800b438 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b434:	2302      	movs	r3, #2
 800b436:	e050      	b.n	800b4da <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2201      	movs	r2, #1
 800b43c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2202      	movs	r2, #2
 800b444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	689b      	ldr	r3, [r3, #8]
 800b456:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b45e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	68fa      	ldr	r2, [r7, #12]
 800b466:	4313      	orrs	r3, r2
 800b468:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	68fa      	ldr	r2, [r7, #12]
 800b470:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	4a1c      	ldr	r2, [pc, #112]	; (800b4e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d018      	beq.n	800b4ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b484:	d013      	beq.n	800b4ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	4a18      	ldr	r2, [pc, #96]	; (800b4ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d00e      	beq.n	800b4ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	4a16      	ldr	r2, [pc, #88]	; (800b4f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d009      	beq.n	800b4ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	4a15      	ldr	r2, [pc, #84]	; (800b4f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d004      	beq.n	800b4ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4a13      	ldr	r2, [pc, #76]	; (800b4f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d10c      	bne.n	800b4c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b4b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	68ba      	ldr	r2, [r7, #8]
 800b4bc:	4313      	orrs	r3, r2
 800b4be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	68ba      	ldr	r2, [r7, #8]
 800b4c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b4d8:	2300      	movs	r3, #0
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3714      	adds	r7, #20
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e4:	4770      	bx	lr
 800b4e6:	bf00      	nop
 800b4e8:	40010000 	.word	0x40010000
 800b4ec:	40000400 	.word	0x40000400
 800b4f0:	40000800 	.word	0x40000800
 800b4f4:	40000c00 	.word	0x40000c00
 800b4f8:	40014000 	.word	0x40014000

0800b4fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b085      	sub	sp, #20
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
 800b504:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b506:	2300      	movs	r3, #0
 800b508:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b510:	2b01      	cmp	r3, #1
 800b512:	d101      	bne.n	800b518 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b514:	2302      	movs	r3, #2
 800b516:	e03d      	b.n	800b594 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2201      	movs	r2, #1
 800b51c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	68db      	ldr	r3, [r3, #12]
 800b52a:	4313      	orrs	r3, r2
 800b52c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	689b      	ldr	r3, [r3, #8]
 800b538:	4313      	orrs	r3, r2
 800b53a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	4313      	orrs	r3, r2
 800b548:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	4313      	orrs	r3, r2
 800b556:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	691b      	ldr	r3, [r3, #16]
 800b562:	4313      	orrs	r3, r2
 800b564:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	695b      	ldr	r3, [r3, #20]
 800b570:	4313      	orrs	r3, r2
 800b572:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	69db      	ldr	r3, [r3, #28]
 800b57e:	4313      	orrs	r3, r2
 800b580:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	68fa      	ldr	r2, [r7, #12]
 800b588:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2200      	movs	r2, #0
 800b58e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b592:	2300      	movs	r3, #0
}
 800b594:	4618      	mov	r0, r3
 800b596:	3714      	adds	r7, #20
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr

0800b5a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b083      	sub	sp, #12
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b5a8:	bf00      	nop
 800b5aa:	370c      	adds	r7, #12
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr

0800b5b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b083      	sub	sp, #12
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b5bc:	bf00      	nop
 800b5be:	370c      	adds	r7, #12
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr

0800b5c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b082      	sub	sp, #8
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d101      	bne.n	800b5da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	e03f      	b.n	800b65a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5e0:	b2db      	uxtb	r3, r3
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d106      	bne.n	800b5f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f7f6 fc24 	bl	8001e3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2224      	movs	r2, #36	; 0x24
 800b5f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	68da      	ldr	r2, [r3, #12]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b60a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f000 fddf 	bl	800c1d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	691a      	ldr	r2, [r3, #16]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b620:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	695a      	ldr	r2, [r3, #20]
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b630:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	68da      	ldr	r2, [r3, #12]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b640:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2200      	movs	r2, #0
 800b646:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2220      	movs	r2, #32
 800b64c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2220      	movs	r2, #32
 800b654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b658:	2300      	movs	r3, #0
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3708      	adds	r7, #8
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}

0800b662 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b662:	b580      	push	{r7, lr}
 800b664:	b08a      	sub	sp, #40	; 0x28
 800b666:	af02      	add	r7, sp, #8
 800b668:	60f8      	str	r0, [r7, #12]
 800b66a:	60b9      	str	r1, [r7, #8]
 800b66c:	603b      	str	r3, [r7, #0]
 800b66e:	4613      	mov	r3, r2
 800b670:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b672:	2300      	movs	r3, #0
 800b674:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b67c:	b2db      	uxtb	r3, r3
 800b67e:	2b20      	cmp	r3, #32
 800b680:	d17c      	bne.n	800b77c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d002      	beq.n	800b68e <HAL_UART_Transmit+0x2c>
 800b688:	88fb      	ldrh	r3, [r7, #6]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d101      	bne.n	800b692 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b68e:	2301      	movs	r3, #1
 800b690:	e075      	b.n	800b77e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b698:	2b01      	cmp	r3, #1
 800b69a:	d101      	bne.n	800b6a0 <HAL_UART_Transmit+0x3e>
 800b69c:	2302      	movs	r3, #2
 800b69e:	e06e      	b.n	800b77e <HAL_UART_Transmit+0x11c>
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2221      	movs	r2, #33	; 0x21
 800b6b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b6b6:	f7fb fffb 	bl	80076b0 <HAL_GetTick>
 800b6ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	88fa      	ldrh	r2, [r7, #6]
 800b6c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	88fa      	ldrh	r2, [r7, #6]
 800b6c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	689b      	ldr	r3, [r3, #8]
 800b6cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6d0:	d108      	bne.n	800b6e4 <HAL_UART_Transmit+0x82>
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	691b      	ldr	r3, [r3, #16]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d104      	bne.n	800b6e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	61bb      	str	r3, [r7, #24]
 800b6e2:	e003      	b.n	800b6ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b6f4:	e02a      	b.n	800b74c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	9300      	str	r3, [sp, #0]
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	2180      	movs	r1, #128	; 0x80
 800b700:	68f8      	ldr	r0, [r7, #12]
 800b702:	f000 fb1f 	bl	800bd44 <UART_WaitOnFlagUntilTimeout>
 800b706:	4603      	mov	r3, r0
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d001      	beq.n	800b710 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b70c:	2303      	movs	r3, #3
 800b70e:	e036      	b.n	800b77e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b710:	69fb      	ldr	r3, [r7, #28]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d10b      	bne.n	800b72e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b716:	69bb      	ldr	r3, [r7, #24]
 800b718:	881b      	ldrh	r3, [r3, #0]
 800b71a:	461a      	mov	r2, r3
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b724:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b726:	69bb      	ldr	r3, [r7, #24]
 800b728:	3302      	adds	r3, #2
 800b72a:	61bb      	str	r3, [r7, #24]
 800b72c:	e007      	b.n	800b73e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b72e:	69fb      	ldr	r3, [r7, #28]
 800b730:	781a      	ldrb	r2, [r3, #0]
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b738:	69fb      	ldr	r3, [r7, #28]
 800b73a:	3301      	adds	r3, #1
 800b73c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b742:	b29b      	uxth	r3, r3
 800b744:	3b01      	subs	r3, #1
 800b746:	b29a      	uxth	r2, r3
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b750:	b29b      	uxth	r3, r3
 800b752:	2b00      	cmp	r3, #0
 800b754:	d1cf      	bne.n	800b6f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	9300      	str	r3, [sp, #0]
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	2200      	movs	r2, #0
 800b75e:	2140      	movs	r1, #64	; 0x40
 800b760:	68f8      	ldr	r0, [r7, #12]
 800b762:	f000 faef 	bl	800bd44 <UART_WaitOnFlagUntilTimeout>
 800b766:	4603      	mov	r3, r0
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d001      	beq.n	800b770 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b76c:	2303      	movs	r3, #3
 800b76e:	e006      	b.n	800b77e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	2220      	movs	r2, #32
 800b774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b778:	2300      	movs	r3, #0
 800b77a:	e000      	b.n	800b77e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b77c:	2302      	movs	r3, #2
  }
}
 800b77e:	4618      	mov	r0, r3
 800b780:	3720      	adds	r7, #32
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}

0800b786 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b786:	b580      	push	{r7, lr}
 800b788:	b084      	sub	sp, #16
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	60f8      	str	r0, [r7, #12]
 800b78e:	60b9      	str	r1, [r7, #8]
 800b790:	4613      	mov	r3, r2
 800b792:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b79a:	b2db      	uxtb	r3, r3
 800b79c:	2b20      	cmp	r3, #32
 800b79e:	d11d      	bne.n	800b7dc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d002      	beq.n	800b7ac <HAL_UART_Receive_IT+0x26>
 800b7a6:	88fb      	ldrh	r3, [r7, #6]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d101      	bne.n	800b7b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	e016      	b.n	800b7de <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7b6:	2b01      	cmp	r3, #1
 800b7b8:	d101      	bne.n	800b7be <HAL_UART_Receive_IT+0x38>
 800b7ba:	2302      	movs	r3, #2
 800b7bc:	e00f      	b.n	800b7de <HAL_UART_Receive_IT+0x58>
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b7cc:	88fb      	ldrh	r3, [r7, #6]
 800b7ce:	461a      	mov	r2, r3
 800b7d0:	68b9      	ldr	r1, [r7, #8]
 800b7d2:	68f8      	ldr	r0, [r7, #12]
 800b7d4:	f000 fb24 	bl	800be20 <UART_Start_Receive_IT>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	e000      	b.n	800b7de <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b7dc:	2302      	movs	r3, #2
  }
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3710      	adds	r7, #16
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}
	...

0800b7e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b0ba      	sub	sp, #232	; 0xe8
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	68db      	ldr	r3, [r3, #12]
 800b800:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	695b      	ldr	r3, [r3, #20]
 800b80a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b80e:	2300      	movs	r3, #0
 800b810:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b814:	2300      	movs	r3, #0
 800b816:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b81a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b81e:	f003 030f 	and.w	r3, r3, #15
 800b822:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b826:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d10f      	bne.n	800b84e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b82e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b832:	f003 0320 	and.w	r3, r3, #32
 800b836:	2b00      	cmp	r3, #0
 800b838:	d009      	beq.n	800b84e <HAL_UART_IRQHandler+0x66>
 800b83a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b83e:	f003 0320 	and.w	r3, r3, #32
 800b842:	2b00      	cmp	r3, #0
 800b844:	d003      	beq.n	800b84e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f000 fc07 	bl	800c05a <UART_Receive_IT>
      return;
 800b84c:	e256      	b.n	800bcfc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b84e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b852:	2b00      	cmp	r3, #0
 800b854:	f000 80de 	beq.w	800ba14 <HAL_UART_IRQHandler+0x22c>
 800b858:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b85c:	f003 0301 	and.w	r3, r3, #1
 800b860:	2b00      	cmp	r3, #0
 800b862:	d106      	bne.n	800b872 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b868:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	f000 80d1 	beq.w	800ba14 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b876:	f003 0301 	and.w	r3, r3, #1
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d00b      	beq.n	800b896 <HAL_UART_IRQHandler+0xae>
 800b87e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b886:	2b00      	cmp	r3, #0
 800b888:	d005      	beq.n	800b896 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b88e:	f043 0201 	orr.w	r2, r3, #1
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b89a:	f003 0304 	and.w	r3, r3, #4
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d00b      	beq.n	800b8ba <HAL_UART_IRQHandler+0xd2>
 800b8a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8a6:	f003 0301 	and.w	r3, r3, #1
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d005      	beq.n	800b8ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8b2:	f043 0202 	orr.w	r2, r3, #2
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b8ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8be:	f003 0302 	and.w	r3, r3, #2
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d00b      	beq.n	800b8de <HAL_UART_IRQHandler+0xf6>
 800b8c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8ca:	f003 0301 	and.w	r3, r3, #1
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d005      	beq.n	800b8de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8d6:	f043 0204 	orr.w	r2, r3, #4
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b8de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8e2:	f003 0308 	and.w	r3, r3, #8
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d011      	beq.n	800b90e <HAL_UART_IRQHandler+0x126>
 800b8ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8ee:	f003 0320 	and.w	r3, r3, #32
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d105      	bne.n	800b902 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b8f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8fa:	f003 0301 	and.w	r3, r3, #1
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d005      	beq.n	800b90e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b906:	f043 0208 	orr.w	r2, r3, #8
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b912:	2b00      	cmp	r3, #0
 800b914:	f000 81ed 	beq.w	800bcf2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b91c:	f003 0320 	and.w	r3, r3, #32
 800b920:	2b00      	cmp	r3, #0
 800b922:	d008      	beq.n	800b936 <HAL_UART_IRQHandler+0x14e>
 800b924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b928:	f003 0320 	and.w	r3, r3, #32
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d002      	beq.n	800b936 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f000 fb92 	bl	800c05a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	695b      	ldr	r3, [r3, #20]
 800b93c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b940:	2b40      	cmp	r3, #64	; 0x40
 800b942:	bf0c      	ite	eq
 800b944:	2301      	moveq	r3, #1
 800b946:	2300      	movne	r3, #0
 800b948:	b2db      	uxtb	r3, r3
 800b94a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b952:	f003 0308 	and.w	r3, r3, #8
 800b956:	2b00      	cmp	r3, #0
 800b958:	d103      	bne.n	800b962 <HAL_UART_IRQHandler+0x17a>
 800b95a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d04f      	beq.n	800ba02 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f000 fa9a 	bl	800be9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	695b      	ldr	r3, [r3, #20]
 800b96e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b972:	2b40      	cmp	r3, #64	; 0x40
 800b974:	d141      	bne.n	800b9fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	3314      	adds	r3, #20
 800b97c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b980:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b984:	e853 3f00 	ldrex	r3, [r3]
 800b988:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b98c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b990:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b994:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	3314      	adds	r3, #20
 800b99e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b9a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b9a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b9ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b9b2:	e841 2300 	strex	r3, r2, [r1]
 800b9b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b9ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d1d9      	bne.n	800b976 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d013      	beq.n	800b9f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ce:	4a7d      	ldr	r2, [pc, #500]	; (800bbc4 <HAL_UART_IRQHandler+0x3dc>)
 800b9d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7fc fdb6 	bl	8008548 <HAL_DMA_Abort_IT>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d016      	beq.n	800ba10 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9e8:	687a      	ldr	r2, [r7, #4]
 800b9ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b9ec:	4610      	mov	r0, r2
 800b9ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9f0:	e00e      	b.n	800ba10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f000 f990 	bl	800bd18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9f8:	e00a      	b.n	800ba10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f000 f98c 	bl	800bd18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba00:	e006      	b.n	800ba10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 f988 	bl	800bd18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800ba0e:	e170      	b.n	800bcf2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba10:	bf00      	nop
    return;
 800ba12:	e16e      	b.n	800bcf2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba18:	2b01      	cmp	r3, #1
 800ba1a:	f040 814a 	bne.w	800bcb2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ba1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba22:	f003 0310 	and.w	r3, r3, #16
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	f000 8143 	beq.w	800bcb2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800ba2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba30:	f003 0310 	and.w	r3, r3, #16
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	f000 813c 	beq.w	800bcb2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	60bb      	str	r3, [r7, #8]
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	60bb      	str	r3, [r7, #8]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	685b      	ldr	r3, [r3, #4]
 800ba4c:	60bb      	str	r3, [r7, #8]
 800ba4e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	695b      	ldr	r3, [r3, #20]
 800ba56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba5a:	2b40      	cmp	r3, #64	; 0x40
 800ba5c:	f040 80b4 	bne.w	800bbc8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ba6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	f000 8140 	beq.w	800bcf6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ba7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	f080 8139 	bcs.w	800bcf6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ba8a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba90:	69db      	ldr	r3, [r3, #28]
 800ba92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba96:	f000 8088 	beq.w	800bbaa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	330c      	adds	r3, #12
 800baa0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800baa8:	e853 3f00 	ldrex	r3, [r3]
 800baac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bab0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bab8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	330c      	adds	r3, #12
 800bac2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bac6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800baca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bace:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bad2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bad6:	e841 2300 	strex	r3, r2, [r1]
 800bada:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bade:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d1d9      	bne.n	800ba9a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	3314      	adds	r3, #20
 800baec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800baf0:	e853 3f00 	ldrex	r3, [r3]
 800baf4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800baf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800baf8:	f023 0301 	bic.w	r3, r3, #1
 800bafc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	3314      	adds	r3, #20
 800bb06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bb0a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bb0e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb10:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bb12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bb16:	e841 2300 	strex	r3, r2, [r1]
 800bb1a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bb1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d1e1      	bne.n	800bae6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	3314      	adds	r3, #20
 800bb28:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb2c:	e853 3f00 	ldrex	r3, [r3]
 800bb30:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bb32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	3314      	adds	r3, #20
 800bb42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bb46:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bb48:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb4a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bb4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bb4e:	e841 2300 	strex	r3, r2, [r1]
 800bb52:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bb54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d1e3      	bne.n	800bb22 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2220      	movs	r2, #32
 800bb5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2200      	movs	r2, #0
 800bb66:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	330c      	adds	r3, #12
 800bb6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb72:	e853 3f00 	ldrex	r3, [r3]
 800bb76:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bb78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb7a:	f023 0310 	bic.w	r3, r3, #16
 800bb7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	330c      	adds	r3, #12
 800bb88:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bb8c:	65ba      	str	r2, [r7, #88]	; 0x58
 800bb8e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bb92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bb94:	e841 2300 	strex	r3, r2, [r1]
 800bb98:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bb9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d1e3      	bne.n	800bb68 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bba4:	4618      	mov	r0, r3
 800bba6:	f7fc fc5f 	bl	8008468 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bbb2:	b29b      	uxth	r3, r3
 800bbb4:	1ad3      	subs	r3, r2, r3
 800bbb6:	b29b      	uxth	r3, r3
 800bbb8:	4619      	mov	r1, r3
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 f8b6 	bl	800bd2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bbc0:	e099      	b.n	800bcf6 <HAL_UART_IRQHandler+0x50e>
 800bbc2:	bf00      	nop
 800bbc4:	0800bf63 	.word	0x0800bf63
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bbd0:	b29b      	uxth	r3, r3
 800bbd2:	1ad3      	subs	r3, r2, r3
 800bbd4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bbdc:	b29b      	uxth	r3, r3
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	f000 808b 	beq.w	800bcfa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800bbe4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	f000 8086 	beq.w	800bcfa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	330c      	adds	r3, #12
 800bbf4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf8:	e853 3f00 	ldrex	r3, [r3]
 800bbfc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bbfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	330c      	adds	r3, #12
 800bc0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bc12:	647a      	str	r2, [r7, #68]	; 0x44
 800bc14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bc18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc1a:	e841 2300 	strex	r3, r2, [r1]
 800bc1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bc20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d1e3      	bne.n	800bbee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	3314      	adds	r3, #20
 800bc2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc30:	e853 3f00 	ldrex	r3, [r3]
 800bc34:	623b      	str	r3, [r7, #32]
   return(result);
 800bc36:	6a3b      	ldr	r3, [r7, #32]
 800bc38:	f023 0301 	bic.w	r3, r3, #1
 800bc3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	3314      	adds	r3, #20
 800bc46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bc4a:	633a      	str	r2, [r7, #48]	; 0x30
 800bc4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc52:	e841 2300 	strex	r3, r2, [r1]
 800bc56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d1e3      	bne.n	800bc26 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2220      	movs	r2, #32
 800bc62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	330c      	adds	r3, #12
 800bc72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	e853 3f00 	ldrex	r3, [r3]
 800bc7a:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f023 0310 	bic.w	r3, r3, #16
 800bc82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	330c      	adds	r3, #12
 800bc8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bc90:	61fa      	str	r2, [r7, #28]
 800bc92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc94:	69b9      	ldr	r1, [r7, #24]
 800bc96:	69fa      	ldr	r2, [r7, #28]
 800bc98:	e841 2300 	strex	r3, r2, [r1]
 800bc9c:	617b      	str	r3, [r7, #20]
   return(result);
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d1e3      	bne.n	800bc6c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bca4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bca8:	4619      	mov	r1, r3
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f000 f83e 	bl	800bd2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bcb0:	e023      	b.n	800bcfa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bcb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d009      	beq.n	800bcd2 <HAL_UART_IRQHandler+0x4ea>
 800bcbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d003      	beq.n	800bcd2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f000 f95d 	bl	800bf8a <UART_Transmit_IT>
    return;
 800bcd0:	e014      	b.n	800bcfc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bcd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d00e      	beq.n	800bcfc <HAL_UART_IRQHandler+0x514>
 800bcde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d008      	beq.n	800bcfc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f000 f99d 	bl	800c02a <UART_EndTransmit_IT>
    return;
 800bcf0:	e004      	b.n	800bcfc <HAL_UART_IRQHandler+0x514>
    return;
 800bcf2:	bf00      	nop
 800bcf4:	e002      	b.n	800bcfc <HAL_UART_IRQHandler+0x514>
      return;
 800bcf6:	bf00      	nop
 800bcf8:	e000      	b.n	800bcfc <HAL_UART_IRQHandler+0x514>
      return;
 800bcfa:	bf00      	nop
  }
}
 800bcfc:	37e8      	adds	r7, #232	; 0xe8
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	bf00      	nop

0800bd04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b083      	sub	sp, #12
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bd0c:	bf00      	nop
 800bd0e:	370c      	adds	r7, #12
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b083      	sub	sp, #12
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bd20:	bf00      	nop
 800bd22:	370c      	adds	r7, #12
 800bd24:	46bd      	mov	sp, r7
 800bd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2a:	4770      	bx	lr

0800bd2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b083      	sub	sp, #12
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	460b      	mov	r3, r1
 800bd36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bd38:	bf00      	nop
 800bd3a:	370c      	adds	r7, #12
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd42:	4770      	bx	lr

0800bd44 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b090      	sub	sp, #64	; 0x40
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	60f8      	str	r0, [r7, #12]
 800bd4c:	60b9      	str	r1, [r7, #8]
 800bd4e:	603b      	str	r3, [r7, #0]
 800bd50:	4613      	mov	r3, r2
 800bd52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd54:	e050      	b.n	800bdf8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd5c:	d04c      	beq.n	800bdf8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800bd5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d007      	beq.n	800bd74 <UART_WaitOnFlagUntilTimeout+0x30>
 800bd64:	f7fb fca4 	bl	80076b0 <HAL_GetTick>
 800bd68:	4602      	mov	r2, r0
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	1ad3      	subs	r3, r2, r3
 800bd6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d241      	bcs.n	800bdf8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	330c      	adds	r3, #12
 800bd7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd7e:	e853 3f00 	ldrex	r3, [r3]
 800bd82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bd84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bd8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	330c      	adds	r3, #12
 800bd92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bd94:	637a      	str	r2, [r7, #52]	; 0x34
 800bd96:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bd9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd9c:	e841 2300 	strex	r3, r2, [r1]
 800bda0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bda2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d1e5      	bne.n	800bd74 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	3314      	adds	r3, #20
 800bdae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	e853 3f00 	ldrex	r3, [r3]
 800bdb6:	613b      	str	r3, [r7, #16]
   return(result);
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	f023 0301 	bic.w	r3, r3, #1
 800bdbe:	63bb      	str	r3, [r7, #56]	; 0x38
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	3314      	adds	r3, #20
 800bdc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bdc8:	623a      	str	r2, [r7, #32]
 800bdca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdcc:	69f9      	ldr	r1, [r7, #28]
 800bdce:	6a3a      	ldr	r2, [r7, #32]
 800bdd0:	e841 2300 	strex	r3, r2, [r1]
 800bdd4:	61bb      	str	r3, [r7, #24]
   return(result);
 800bdd6:	69bb      	ldr	r3, [r7, #24]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d1e5      	bne.n	800bda8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2220      	movs	r2, #32
 800bde0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	2220      	movs	r2, #32
 800bde8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800bdf4:	2303      	movs	r3, #3
 800bdf6:	e00f      	b.n	800be18 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	681a      	ldr	r2, [r3, #0]
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	4013      	ands	r3, r2
 800be02:	68ba      	ldr	r2, [r7, #8]
 800be04:	429a      	cmp	r2, r3
 800be06:	bf0c      	ite	eq
 800be08:	2301      	moveq	r3, #1
 800be0a:	2300      	movne	r3, #0
 800be0c:	b2db      	uxtb	r3, r3
 800be0e:	461a      	mov	r2, r3
 800be10:	79fb      	ldrb	r3, [r7, #7]
 800be12:	429a      	cmp	r2, r3
 800be14:	d09f      	beq.n	800bd56 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800be16:	2300      	movs	r3, #0
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3740      	adds	r7, #64	; 0x40
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800be20:	b480      	push	{r7}
 800be22:	b085      	sub	sp, #20
 800be24:	af00      	add	r7, sp, #0
 800be26:	60f8      	str	r0, [r7, #12]
 800be28:	60b9      	str	r1, [r7, #8]
 800be2a:	4613      	mov	r3, r2
 800be2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	68ba      	ldr	r2, [r7, #8]
 800be32:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	88fa      	ldrh	r2, [r7, #6]
 800be38:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	88fa      	ldrh	r2, [r7, #6]
 800be3e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	2200      	movs	r2, #0
 800be44:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	2222      	movs	r2, #34	; 0x22
 800be4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	2200      	movs	r2, #0
 800be52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	691b      	ldr	r3, [r3, #16]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d007      	beq.n	800be6e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	68da      	ldr	r2, [r3, #12]
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be6c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	695a      	ldr	r2, [r3, #20]
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f042 0201 	orr.w	r2, r2, #1
 800be7c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	68da      	ldr	r2, [r3, #12]
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	f042 0220 	orr.w	r2, r2, #32
 800be8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800be8e:	2300      	movs	r3, #0
}
 800be90:	4618      	mov	r0, r3
 800be92:	3714      	adds	r7, #20
 800be94:	46bd      	mov	sp, r7
 800be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9a:	4770      	bx	lr

0800be9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b095      	sub	sp, #84	; 0x54
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	330c      	adds	r3, #12
 800beaa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beae:	e853 3f00 	ldrex	r3, [r3]
 800beb2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800beb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800beba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	330c      	adds	r3, #12
 800bec2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bec4:	643a      	str	r2, [r7, #64]	; 0x40
 800bec6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bec8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800beca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800becc:	e841 2300 	strex	r3, r2, [r1]
 800bed0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d1e5      	bne.n	800bea4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	3314      	adds	r3, #20
 800bede:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bee0:	6a3b      	ldr	r3, [r7, #32]
 800bee2:	e853 3f00 	ldrex	r3, [r3]
 800bee6:	61fb      	str	r3, [r7, #28]
   return(result);
 800bee8:	69fb      	ldr	r3, [r7, #28]
 800beea:	f023 0301 	bic.w	r3, r3, #1
 800beee:	64bb      	str	r3, [r7, #72]	; 0x48
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	3314      	adds	r3, #20
 800bef6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bef8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800befa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800befc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800befe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf00:	e841 2300 	strex	r3, r2, [r1]
 800bf04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d1e5      	bne.n	800bed8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf10:	2b01      	cmp	r3, #1
 800bf12:	d119      	bne.n	800bf48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	330c      	adds	r3, #12
 800bf1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	e853 3f00 	ldrex	r3, [r3]
 800bf22:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	f023 0310 	bic.w	r3, r3, #16
 800bf2a:	647b      	str	r3, [r7, #68]	; 0x44
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	330c      	adds	r3, #12
 800bf32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf34:	61ba      	str	r2, [r7, #24]
 800bf36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf38:	6979      	ldr	r1, [r7, #20]
 800bf3a:	69ba      	ldr	r2, [r7, #24]
 800bf3c:	e841 2300 	strex	r3, r2, [r1]
 800bf40:	613b      	str	r3, [r7, #16]
   return(result);
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d1e5      	bne.n	800bf14 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2220      	movs	r2, #32
 800bf4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2200      	movs	r2, #0
 800bf54:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bf56:	bf00      	nop
 800bf58:	3754      	adds	r7, #84	; 0x54
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf60:	4770      	bx	lr

0800bf62 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bf62:	b580      	push	{r7, lr}
 800bf64:	b084      	sub	sp, #16
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	2200      	movs	r2, #0
 800bf74:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bf7c:	68f8      	ldr	r0, [r7, #12]
 800bf7e:	f7ff fecb 	bl	800bd18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf82:	bf00      	nop
 800bf84:	3710      	adds	r7, #16
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}

0800bf8a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bf8a:	b480      	push	{r7}
 800bf8c:	b085      	sub	sp, #20
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf98:	b2db      	uxtb	r3, r3
 800bf9a:	2b21      	cmp	r3, #33	; 0x21
 800bf9c:	d13e      	bne.n	800c01c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	689b      	ldr	r3, [r3, #8]
 800bfa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfa6:	d114      	bne.n	800bfd2 <UART_Transmit_IT+0x48>
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	691b      	ldr	r3, [r3, #16]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d110      	bne.n	800bfd2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6a1b      	ldr	r3, [r3, #32]
 800bfb4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	881b      	ldrh	r3, [r3, #0]
 800bfba:	461a      	mov	r2, r3
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bfc4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6a1b      	ldr	r3, [r3, #32]
 800bfca:	1c9a      	adds	r2, r3, #2
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	621a      	str	r2, [r3, #32]
 800bfd0:	e008      	b.n	800bfe4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6a1b      	ldr	r3, [r3, #32]
 800bfd6:	1c59      	adds	r1, r3, #1
 800bfd8:	687a      	ldr	r2, [r7, #4]
 800bfda:	6211      	str	r1, [r2, #32]
 800bfdc:	781a      	ldrb	r2, [r3, #0]
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bfe8:	b29b      	uxth	r3, r3
 800bfea:	3b01      	subs	r3, #1
 800bfec:	b29b      	uxth	r3, r3
 800bfee:	687a      	ldr	r2, [r7, #4]
 800bff0:	4619      	mov	r1, r3
 800bff2:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d10f      	bne.n	800c018 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	68da      	ldr	r2, [r3, #12]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c006:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	68da      	ldr	r2, [r3, #12]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c016:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c018:	2300      	movs	r3, #0
 800c01a:	e000      	b.n	800c01e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c01c:	2302      	movs	r3, #2
  }
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3714      	adds	r7, #20
 800c022:	46bd      	mov	sp, r7
 800c024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c028:	4770      	bx	lr

0800c02a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c02a:	b580      	push	{r7, lr}
 800c02c:	b082      	sub	sp, #8
 800c02e:	af00      	add	r7, sp, #0
 800c030:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	68da      	ldr	r2, [r3, #12]
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c040:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2220      	movs	r2, #32
 800c046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f7ff fe5a 	bl	800bd04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c050:	2300      	movs	r3, #0
}
 800c052:	4618      	mov	r0, r3
 800c054:	3708      	adds	r7, #8
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}

0800c05a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c05a:	b580      	push	{r7, lr}
 800c05c:	b08c      	sub	sp, #48	; 0x30
 800c05e:	af00      	add	r7, sp, #0
 800c060:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c068:	b2db      	uxtb	r3, r3
 800c06a:	2b22      	cmp	r3, #34	; 0x22
 800c06c:	f040 80ab 	bne.w	800c1c6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	689b      	ldr	r3, [r3, #8]
 800c074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c078:	d117      	bne.n	800c0aa <UART_Receive_IT+0x50>
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	691b      	ldr	r3, [r3, #16]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d113      	bne.n	800c0aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c082:	2300      	movs	r3, #0
 800c084:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c08a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	685b      	ldr	r3, [r3, #4]
 800c092:	b29b      	uxth	r3, r3
 800c094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c098:	b29a      	uxth	r2, r3
 800c09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c09c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0a2:	1c9a      	adds	r2, r3, #2
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	629a      	str	r2, [r3, #40]	; 0x28
 800c0a8:	e026      	b.n	800c0f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	689b      	ldr	r3, [r3, #8]
 800c0b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0bc:	d007      	beq.n	800c0ce <UART_Receive_IT+0x74>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	689b      	ldr	r3, [r3, #8]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d10a      	bne.n	800c0dc <UART_Receive_IT+0x82>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	691b      	ldr	r3, [r3, #16]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d106      	bne.n	800c0dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	685b      	ldr	r3, [r3, #4]
 800c0d4:	b2da      	uxtb	r2, r3
 800c0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d8:	701a      	strb	r2, [r3, #0]
 800c0da:	e008      	b.n	800c0ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	685b      	ldr	r3, [r3, #4]
 800c0e2:	b2db      	uxtb	r3, r3
 800c0e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0e8:	b2da      	uxtb	r2, r3
 800c0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0f2:	1c5a      	adds	r2, r3, #1
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c0fc:	b29b      	uxth	r3, r3
 800c0fe:	3b01      	subs	r3, #1
 800c100:	b29b      	uxth	r3, r3
 800c102:	687a      	ldr	r2, [r7, #4]
 800c104:	4619      	mov	r1, r3
 800c106:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d15a      	bne.n	800c1c2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	68da      	ldr	r2, [r3, #12]
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f022 0220 	bic.w	r2, r2, #32
 800c11a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	68da      	ldr	r2, [r3, #12]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c12a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	695a      	ldr	r2, [r3, #20]
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f022 0201 	bic.w	r2, r2, #1
 800c13a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2220      	movs	r2, #32
 800c140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c148:	2b01      	cmp	r3, #1
 800c14a:	d135      	bne.n	800c1b8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2200      	movs	r2, #0
 800c150:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	330c      	adds	r3, #12
 800c158:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	e853 3f00 	ldrex	r3, [r3]
 800c160:	613b      	str	r3, [r7, #16]
   return(result);
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	f023 0310 	bic.w	r3, r3, #16
 800c168:	627b      	str	r3, [r7, #36]	; 0x24
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	330c      	adds	r3, #12
 800c170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c172:	623a      	str	r2, [r7, #32]
 800c174:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c176:	69f9      	ldr	r1, [r7, #28]
 800c178:	6a3a      	ldr	r2, [r7, #32]
 800c17a:	e841 2300 	strex	r3, r2, [r1]
 800c17e:	61bb      	str	r3, [r7, #24]
   return(result);
 800c180:	69bb      	ldr	r3, [r7, #24]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d1e5      	bne.n	800c152 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f003 0310 	and.w	r3, r3, #16
 800c190:	2b10      	cmp	r3, #16
 800c192:	d10a      	bne.n	800c1aa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c194:	2300      	movs	r3, #0
 800c196:	60fb      	str	r3, [r7, #12]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	60fb      	str	r3, [r7, #12]
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	60fb      	str	r3, [r7, #12]
 800c1a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f7ff fdbb 	bl	800bd2c <HAL_UARTEx_RxEventCallback>
 800c1b6:	e002      	b.n	800c1be <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f7f5 fc35 	bl	8001a28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	e002      	b.n	800c1c8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	e000      	b.n	800c1c8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c1c6:	2302      	movs	r3, #2
  }
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3730      	adds	r7, #48	; 0x30
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}

0800c1d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c1d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c1d4:	b0c0      	sub	sp, #256	; 0x100
 800c1d6:	af00      	add	r7, sp, #0
 800c1d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c1dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	691b      	ldr	r3, [r3, #16]
 800c1e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c1e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1ec:	68d9      	ldr	r1, [r3, #12]
 800c1ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1f2:	681a      	ldr	r2, [r3, #0]
 800c1f4:	ea40 0301 	orr.w	r3, r0, r1
 800c1f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c1fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1fe:	689a      	ldr	r2, [r3, #8]
 800c200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c204:	691b      	ldr	r3, [r3, #16]
 800c206:	431a      	orrs	r2, r3
 800c208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c20c:	695b      	ldr	r3, [r3, #20]
 800c20e:	431a      	orrs	r2, r3
 800c210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c214:	69db      	ldr	r3, [r3, #28]
 800c216:	4313      	orrs	r3, r2
 800c218:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c21c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	68db      	ldr	r3, [r3, #12]
 800c224:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c228:	f021 010c 	bic.w	r1, r1, #12
 800c22c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c230:	681a      	ldr	r2, [r3, #0]
 800c232:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c236:	430b      	orrs	r3, r1
 800c238:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c23a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	695b      	ldr	r3, [r3, #20]
 800c242:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c24a:	6999      	ldr	r1, [r3, #24]
 800c24c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c250:	681a      	ldr	r2, [r3, #0]
 800c252:	ea40 0301 	orr.w	r3, r0, r1
 800c256:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c25c:	681a      	ldr	r2, [r3, #0]
 800c25e:	4b8f      	ldr	r3, [pc, #572]	; (800c49c <UART_SetConfig+0x2cc>)
 800c260:	429a      	cmp	r2, r3
 800c262:	d005      	beq.n	800c270 <UART_SetConfig+0xa0>
 800c264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c268:	681a      	ldr	r2, [r3, #0]
 800c26a:	4b8d      	ldr	r3, [pc, #564]	; (800c4a0 <UART_SetConfig+0x2d0>)
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d104      	bne.n	800c27a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c270:	f7fe f980 	bl	800a574 <HAL_RCC_GetPCLK2Freq>
 800c274:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c278:	e003      	b.n	800c282 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c27a:	f7fe f967 	bl	800a54c <HAL_RCC_GetPCLK1Freq>
 800c27e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c286:	69db      	ldr	r3, [r3, #28]
 800c288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c28c:	f040 810c 	bne.w	800c4a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c290:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c294:	2200      	movs	r2, #0
 800c296:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c29a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c29e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c2a2:	4622      	mov	r2, r4
 800c2a4:	462b      	mov	r3, r5
 800c2a6:	1891      	adds	r1, r2, r2
 800c2a8:	65b9      	str	r1, [r7, #88]	; 0x58
 800c2aa:	415b      	adcs	r3, r3
 800c2ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c2ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c2b2:	4621      	mov	r1, r4
 800c2b4:	eb12 0801 	adds.w	r8, r2, r1
 800c2b8:	4629      	mov	r1, r5
 800c2ba:	eb43 0901 	adc.w	r9, r3, r1
 800c2be:	f04f 0200 	mov.w	r2, #0
 800c2c2:	f04f 0300 	mov.w	r3, #0
 800c2c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c2ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c2ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c2d2:	4690      	mov	r8, r2
 800c2d4:	4699      	mov	r9, r3
 800c2d6:	4623      	mov	r3, r4
 800c2d8:	eb18 0303 	adds.w	r3, r8, r3
 800c2dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c2e0:	462b      	mov	r3, r5
 800c2e2:	eb49 0303 	adc.w	r3, r9, r3
 800c2e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c2ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2ee:	685b      	ldr	r3, [r3, #4]
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c2f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c2fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c2fe:	460b      	mov	r3, r1
 800c300:	18db      	adds	r3, r3, r3
 800c302:	653b      	str	r3, [r7, #80]	; 0x50
 800c304:	4613      	mov	r3, r2
 800c306:	eb42 0303 	adc.w	r3, r2, r3
 800c30a:	657b      	str	r3, [r7, #84]	; 0x54
 800c30c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c310:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c314:	f7f4 fcc0 	bl	8000c98 <__aeabi_uldivmod>
 800c318:	4602      	mov	r2, r0
 800c31a:	460b      	mov	r3, r1
 800c31c:	4b61      	ldr	r3, [pc, #388]	; (800c4a4 <UART_SetConfig+0x2d4>)
 800c31e:	fba3 2302 	umull	r2, r3, r3, r2
 800c322:	095b      	lsrs	r3, r3, #5
 800c324:	011c      	lsls	r4, r3, #4
 800c326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c32a:	2200      	movs	r2, #0
 800c32c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c330:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c334:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c338:	4642      	mov	r2, r8
 800c33a:	464b      	mov	r3, r9
 800c33c:	1891      	adds	r1, r2, r2
 800c33e:	64b9      	str	r1, [r7, #72]	; 0x48
 800c340:	415b      	adcs	r3, r3
 800c342:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c344:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c348:	4641      	mov	r1, r8
 800c34a:	eb12 0a01 	adds.w	sl, r2, r1
 800c34e:	4649      	mov	r1, r9
 800c350:	eb43 0b01 	adc.w	fp, r3, r1
 800c354:	f04f 0200 	mov.w	r2, #0
 800c358:	f04f 0300 	mov.w	r3, #0
 800c35c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c360:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c364:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c368:	4692      	mov	sl, r2
 800c36a:	469b      	mov	fp, r3
 800c36c:	4643      	mov	r3, r8
 800c36e:	eb1a 0303 	adds.w	r3, sl, r3
 800c372:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c376:	464b      	mov	r3, r9
 800c378:	eb4b 0303 	adc.w	r3, fp, r3
 800c37c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c384:	685b      	ldr	r3, [r3, #4]
 800c386:	2200      	movs	r2, #0
 800c388:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c38c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c390:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c394:	460b      	mov	r3, r1
 800c396:	18db      	adds	r3, r3, r3
 800c398:	643b      	str	r3, [r7, #64]	; 0x40
 800c39a:	4613      	mov	r3, r2
 800c39c:	eb42 0303 	adc.w	r3, r2, r3
 800c3a0:	647b      	str	r3, [r7, #68]	; 0x44
 800c3a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c3a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c3aa:	f7f4 fc75 	bl	8000c98 <__aeabi_uldivmod>
 800c3ae:	4602      	mov	r2, r0
 800c3b0:	460b      	mov	r3, r1
 800c3b2:	4611      	mov	r1, r2
 800c3b4:	4b3b      	ldr	r3, [pc, #236]	; (800c4a4 <UART_SetConfig+0x2d4>)
 800c3b6:	fba3 2301 	umull	r2, r3, r3, r1
 800c3ba:	095b      	lsrs	r3, r3, #5
 800c3bc:	2264      	movs	r2, #100	; 0x64
 800c3be:	fb02 f303 	mul.w	r3, r2, r3
 800c3c2:	1acb      	subs	r3, r1, r3
 800c3c4:	00db      	lsls	r3, r3, #3
 800c3c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c3ca:	4b36      	ldr	r3, [pc, #216]	; (800c4a4 <UART_SetConfig+0x2d4>)
 800c3cc:	fba3 2302 	umull	r2, r3, r3, r2
 800c3d0:	095b      	lsrs	r3, r3, #5
 800c3d2:	005b      	lsls	r3, r3, #1
 800c3d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c3d8:	441c      	add	r4, r3
 800c3da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c3de:	2200      	movs	r2, #0
 800c3e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c3e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c3e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c3ec:	4642      	mov	r2, r8
 800c3ee:	464b      	mov	r3, r9
 800c3f0:	1891      	adds	r1, r2, r2
 800c3f2:	63b9      	str	r1, [r7, #56]	; 0x38
 800c3f4:	415b      	adcs	r3, r3
 800c3f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c3fc:	4641      	mov	r1, r8
 800c3fe:	1851      	adds	r1, r2, r1
 800c400:	6339      	str	r1, [r7, #48]	; 0x30
 800c402:	4649      	mov	r1, r9
 800c404:	414b      	adcs	r3, r1
 800c406:	637b      	str	r3, [r7, #52]	; 0x34
 800c408:	f04f 0200 	mov.w	r2, #0
 800c40c:	f04f 0300 	mov.w	r3, #0
 800c410:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c414:	4659      	mov	r1, fp
 800c416:	00cb      	lsls	r3, r1, #3
 800c418:	4651      	mov	r1, sl
 800c41a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c41e:	4651      	mov	r1, sl
 800c420:	00ca      	lsls	r2, r1, #3
 800c422:	4610      	mov	r0, r2
 800c424:	4619      	mov	r1, r3
 800c426:	4603      	mov	r3, r0
 800c428:	4642      	mov	r2, r8
 800c42a:	189b      	adds	r3, r3, r2
 800c42c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c430:	464b      	mov	r3, r9
 800c432:	460a      	mov	r2, r1
 800c434:	eb42 0303 	adc.w	r3, r2, r3
 800c438:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c43c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c440:	685b      	ldr	r3, [r3, #4]
 800c442:	2200      	movs	r2, #0
 800c444:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c448:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c44c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c450:	460b      	mov	r3, r1
 800c452:	18db      	adds	r3, r3, r3
 800c454:	62bb      	str	r3, [r7, #40]	; 0x28
 800c456:	4613      	mov	r3, r2
 800c458:	eb42 0303 	adc.w	r3, r2, r3
 800c45c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c45e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c462:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c466:	f7f4 fc17 	bl	8000c98 <__aeabi_uldivmod>
 800c46a:	4602      	mov	r2, r0
 800c46c:	460b      	mov	r3, r1
 800c46e:	4b0d      	ldr	r3, [pc, #52]	; (800c4a4 <UART_SetConfig+0x2d4>)
 800c470:	fba3 1302 	umull	r1, r3, r3, r2
 800c474:	095b      	lsrs	r3, r3, #5
 800c476:	2164      	movs	r1, #100	; 0x64
 800c478:	fb01 f303 	mul.w	r3, r1, r3
 800c47c:	1ad3      	subs	r3, r2, r3
 800c47e:	00db      	lsls	r3, r3, #3
 800c480:	3332      	adds	r3, #50	; 0x32
 800c482:	4a08      	ldr	r2, [pc, #32]	; (800c4a4 <UART_SetConfig+0x2d4>)
 800c484:	fba2 2303 	umull	r2, r3, r2, r3
 800c488:	095b      	lsrs	r3, r3, #5
 800c48a:	f003 0207 	and.w	r2, r3, #7
 800c48e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	4422      	add	r2, r4
 800c496:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c498:	e105      	b.n	800c6a6 <UART_SetConfig+0x4d6>
 800c49a:	bf00      	nop
 800c49c:	40011000 	.word	0x40011000
 800c4a0:	40011400 	.word	0x40011400
 800c4a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c4a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c4b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c4b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c4ba:	4642      	mov	r2, r8
 800c4bc:	464b      	mov	r3, r9
 800c4be:	1891      	adds	r1, r2, r2
 800c4c0:	6239      	str	r1, [r7, #32]
 800c4c2:	415b      	adcs	r3, r3
 800c4c4:	627b      	str	r3, [r7, #36]	; 0x24
 800c4c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c4ca:	4641      	mov	r1, r8
 800c4cc:	1854      	adds	r4, r2, r1
 800c4ce:	4649      	mov	r1, r9
 800c4d0:	eb43 0501 	adc.w	r5, r3, r1
 800c4d4:	f04f 0200 	mov.w	r2, #0
 800c4d8:	f04f 0300 	mov.w	r3, #0
 800c4dc:	00eb      	lsls	r3, r5, #3
 800c4de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c4e2:	00e2      	lsls	r2, r4, #3
 800c4e4:	4614      	mov	r4, r2
 800c4e6:	461d      	mov	r5, r3
 800c4e8:	4643      	mov	r3, r8
 800c4ea:	18e3      	adds	r3, r4, r3
 800c4ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c4f0:	464b      	mov	r3, r9
 800c4f2:	eb45 0303 	adc.w	r3, r5, r3
 800c4f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c4fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	2200      	movs	r2, #0
 800c502:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c506:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c50a:	f04f 0200 	mov.w	r2, #0
 800c50e:	f04f 0300 	mov.w	r3, #0
 800c512:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c516:	4629      	mov	r1, r5
 800c518:	008b      	lsls	r3, r1, #2
 800c51a:	4621      	mov	r1, r4
 800c51c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c520:	4621      	mov	r1, r4
 800c522:	008a      	lsls	r2, r1, #2
 800c524:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c528:	f7f4 fbb6 	bl	8000c98 <__aeabi_uldivmod>
 800c52c:	4602      	mov	r2, r0
 800c52e:	460b      	mov	r3, r1
 800c530:	4b60      	ldr	r3, [pc, #384]	; (800c6b4 <UART_SetConfig+0x4e4>)
 800c532:	fba3 2302 	umull	r2, r3, r3, r2
 800c536:	095b      	lsrs	r3, r3, #5
 800c538:	011c      	lsls	r4, r3, #4
 800c53a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c53e:	2200      	movs	r2, #0
 800c540:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c544:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c548:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c54c:	4642      	mov	r2, r8
 800c54e:	464b      	mov	r3, r9
 800c550:	1891      	adds	r1, r2, r2
 800c552:	61b9      	str	r1, [r7, #24]
 800c554:	415b      	adcs	r3, r3
 800c556:	61fb      	str	r3, [r7, #28]
 800c558:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c55c:	4641      	mov	r1, r8
 800c55e:	1851      	adds	r1, r2, r1
 800c560:	6139      	str	r1, [r7, #16]
 800c562:	4649      	mov	r1, r9
 800c564:	414b      	adcs	r3, r1
 800c566:	617b      	str	r3, [r7, #20]
 800c568:	f04f 0200 	mov.w	r2, #0
 800c56c:	f04f 0300 	mov.w	r3, #0
 800c570:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c574:	4659      	mov	r1, fp
 800c576:	00cb      	lsls	r3, r1, #3
 800c578:	4651      	mov	r1, sl
 800c57a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c57e:	4651      	mov	r1, sl
 800c580:	00ca      	lsls	r2, r1, #3
 800c582:	4610      	mov	r0, r2
 800c584:	4619      	mov	r1, r3
 800c586:	4603      	mov	r3, r0
 800c588:	4642      	mov	r2, r8
 800c58a:	189b      	adds	r3, r3, r2
 800c58c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c590:	464b      	mov	r3, r9
 800c592:	460a      	mov	r2, r1
 800c594:	eb42 0303 	adc.w	r3, r2, r3
 800c598:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c59c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	67bb      	str	r3, [r7, #120]	; 0x78
 800c5a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c5a8:	f04f 0200 	mov.w	r2, #0
 800c5ac:	f04f 0300 	mov.w	r3, #0
 800c5b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c5b4:	4649      	mov	r1, r9
 800c5b6:	008b      	lsls	r3, r1, #2
 800c5b8:	4641      	mov	r1, r8
 800c5ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c5be:	4641      	mov	r1, r8
 800c5c0:	008a      	lsls	r2, r1, #2
 800c5c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c5c6:	f7f4 fb67 	bl	8000c98 <__aeabi_uldivmod>
 800c5ca:	4602      	mov	r2, r0
 800c5cc:	460b      	mov	r3, r1
 800c5ce:	4b39      	ldr	r3, [pc, #228]	; (800c6b4 <UART_SetConfig+0x4e4>)
 800c5d0:	fba3 1302 	umull	r1, r3, r3, r2
 800c5d4:	095b      	lsrs	r3, r3, #5
 800c5d6:	2164      	movs	r1, #100	; 0x64
 800c5d8:	fb01 f303 	mul.w	r3, r1, r3
 800c5dc:	1ad3      	subs	r3, r2, r3
 800c5de:	011b      	lsls	r3, r3, #4
 800c5e0:	3332      	adds	r3, #50	; 0x32
 800c5e2:	4a34      	ldr	r2, [pc, #208]	; (800c6b4 <UART_SetConfig+0x4e4>)
 800c5e4:	fba2 2303 	umull	r2, r3, r2, r3
 800c5e8:	095b      	lsrs	r3, r3, #5
 800c5ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c5ee:	441c      	add	r4, r3
 800c5f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	673b      	str	r3, [r7, #112]	; 0x70
 800c5f8:	677a      	str	r2, [r7, #116]	; 0x74
 800c5fa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c5fe:	4642      	mov	r2, r8
 800c600:	464b      	mov	r3, r9
 800c602:	1891      	adds	r1, r2, r2
 800c604:	60b9      	str	r1, [r7, #8]
 800c606:	415b      	adcs	r3, r3
 800c608:	60fb      	str	r3, [r7, #12]
 800c60a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c60e:	4641      	mov	r1, r8
 800c610:	1851      	adds	r1, r2, r1
 800c612:	6039      	str	r1, [r7, #0]
 800c614:	4649      	mov	r1, r9
 800c616:	414b      	adcs	r3, r1
 800c618:	607b      	str	r3, [r7, #4]
 800c61a:	f04f 0200 	mov.w	r2, #0
 800c61e:	f04f 0300 	mov.w	r3, #0
 800c622:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c626:	4659      	mov	r1, fp
 800c628:	00cb      	lsls	r3, r1, #3
 800c62a:	4651      	mov	r1, sl
 800c62c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c630:	4651      	mov	r1, sl
 800c632:	00ca      	lsls	r2, r1, #3
 800c634:	4610      	mov	r0, r2
 800c636:	4619      	mov	r1, r3
 800c638:	4603      	mov	r3, r0
 800c63a:	4642      	mov	r2, r8
 800c63c:	189b      	adds	r3, r3, r2
 800c63e:	66bb      	str	r3, [r7, #104]	; 0x68
 800c640:	464b      	mov	r3, r9
 800c642:	460a      	mov	r2, r1
 800c644:	eb42 0303 	adc.w	r3, r2, r3
 800c648:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c64a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c64e:	685b      	ldr	r3, [r3, #4]
 800c650:	2200      	movs	r2, #0
 800c652:	663b      	str	r3, [r7, #96]	; 0x60
 800c654:	667a      	str	r2, [r7, #100]	; 0x64
 800c656:	f04f 0200 	mov.w	r2, #0
 800c65a:	f04f 0300 	mov.w	r3, #0
 800c65e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c662:	4649      	mov	r1, r9
 800c664:	008b      	lsls	r3, r1, #2
 800c666:	4641      	mov	r1, r8
 800c668:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c66c:	4641      	mov	r1, r8
 800c66e:	008a      	lsls	r2, r1, #2
 800c670:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c674:	f7f4 fb10 	bl	8000c98 <__aeabi_uldivmod>
 800c678:	4602      	mov	r2, r0
 800c67a:	460b      	mov	r3, r1
 800c67c:	4b0d      	ldr	r3, [pc, #52]	; (800c6b4 <UART_SetConfig+0x4e4>)
 800c67e:	fba3 1302 	umull	r1, r3, r3, r2
 800c682:	095b      	lsrs	r3, r3, #5
 800c684:	2164      	movs	r1, #100	; 0x64
 800c686:	fb01 f303 	mul.w	r3, r1, r3
 800c68a:	1ad3      	subs	r3, r2, r3
 800c68c:	011b      	lsls	r3, r3, #4
 800c68e:	3332      	adds	r3, #50	; 0x32
 800c690:	4a08      	ldr	r2, [pc, #32]	; (800c6b4 <UART_SetConfig+0x4e4>)
 800c692:	fba2 2303 	umull	r2, r3, r2, r3
 800c696:	095b      	lsrs	r3, r3, #5
 800c698:	f003 020f 	and.w	r2, r3, #15
 800c69c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	4422      	add	r2, r4
 800c6a4:	609a      	str	r2, [r3, #8]
}
 800c6a6:	bf00      	nop
 800c6a8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c6b2:	bf00      	nop
 800c6b4:	51eb851f 	.word	0x51eb851f

0800c6b8 <__errno>:
 800c6b8:	4b01      	ldr	r3, [pc, #4]	; (800c6c0 <__errno+0x8>)
 800c6ba:	6818      	ldr	r0, [r3, #0]
 800c6bc:	4770      	bx	lr
 800c6be:	bf00      	nop
 800c6c0:	20000478 	.word	0x20000478

0800c6c4 <__libc_init_array>:
 800c6c4:	b570      	push	{r4, r5, r6, lr}
 800c6c6:	4d0d      	ldr	r5, [pc, #52]	; (800c6fc <__libc_init_array+0x38>)
 800c6c8:	4c0d      	ldr	r4, [pc, #52]	; (800c700 <__libc_init_array+0x3c>)
 800c6ca:	1b64      	subs	r4, r4, r5
 800c6cc:	10a4      	asrs	r4, r4, #2
 800c6ce:	2600      	movs	r6, #0
 800c6d0:	42a6      	cmp	r6, r4
 800c6d2:	d109      	bne.n	800c6e8 <__libc_init_array+0x24>
 800c6d4:	4d0b      	ldr	r5, [pc, #44]	; (800c704 <__libc_init_array+0x40>)
 800c6d6:	4c0c      	ldr	r4, [pc, #48]	; (800c708 <__libc_init_array+0x44>)
 800c6d8:	f002 ff0c 	bl	800f4f4 <_init>
 800c6dc:	1b64      	subs	r4, r4, r5
 800c6de:	10a4      	asrs	r4, r4, #2
 800c6e0:	2600      	movs	r6, #0
 800c6e2:	42a6      	cmp	r6, r4
 800c6e4:	d105      	bne.n	800c6f2 <__libc_init_array+0x2e>
 800c6e6:	bd70      	pop	{r4, r5, r6, pc}
 800c6e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6ec:	4798      	blx	r3
 800c6ee:	3601      	adds	r6, #1
 800c6f0:	e7ee      	b.n	800c6d0 <__libc_init_array+0xc>
 800c6f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6f6:	4798      	blx	r3
 800c6f8:	3601      	adds	r6, #1
 800c6fa:	e7f2      	b.n	800c6e2 <__libc_init_array+0x1e>
 800c6fc:	0800fa0c 	.word	0x0800fa0c
 800c700:	0800fa0c 	.word	0x0800fa0c
 800c704:	0800fa0c 	.word	0x0800fa0c
 800c708:	0800fa10 	.word	0x0800fa10

0800c70c <memcpy>:
 800c70c:	440a      	add	r2, r1
 800c70e:	4291      	cmp	r1, r2
 800c710:	f100 33ff 	add.w	r3, r0, #4294967295
 800c714:	d100      	bne.n	800c718 <memcpy+0xc>
 800c716:	4770      	bx	lr
 800c718:	b510      	push	{r4, lr}
 800c71a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c71e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c722:	4291      	cmp	r1, r2
 800c724:	d1f9      	bne.n	800c71a <memcpy+0xe>
 800c726:	bd10      	pop	{r4, pc}

0800c728 <memset>:
 800c728:	4402      	add	r2, r0
 800c72a:	4603      	mov	r3, r0
 800c72c:	4293      	cmp	r3, r2
 800c72e:	d100      	bne.n	800c732 <memset+0xa>
 800c730:	4770      	bx	lr
 800c732:	f803 1b01 	strb.w	r1, [r3], #1
 800c736:	e7f9      	b.n	800c72c <memset+0x4>

0800c738 <__cvt>:
 800c738:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c73c:	ec55 4b10 	vmov	r4, r5, d0
 800c740:	2d00      	cmp	r5, #0
 800c742:	460e      	mov	r6, r1
 800c744:	4619      	mov	r1, r3
 800c746:	462b      	mov	r3, r5
 800c748:	bfbb      	ittet	lt
 800c74a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c74e:	461d      	movlt	r5, r3
 800c750:	2300      	movge	r3, #0
 800c752:	232d      	movlt	r3, #45	; 0x2d
 800c754:	700b      	strb	r3, [r1, #0]
 800c756:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c758:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c75c:	4691      	mov	r9, r2
 800c75e:	f023 0820 	bic.w	r8, r3, #32
 800c762:	bfbc      	itt	lt
 800c764:	4622      	movlt	r2, r4
 800c766:	4614      	movlt	r4, r2
 800c768:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c76c:	d005      	beq.n	800c77a <__cvt+0x42>
 800c76e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c772:	d100      	bne.n	800c776 <__cvt+0x3e>
 800c774:	3601      	adds	r6, #1
 800c776:	2102      	movs	r1, #2
 800c778:	e000      	b.n	800c77c <__cvt+0x44>
 800c77a:	2103      	movs	r1, #3
 800c77c:	ab03      	add	r3, sp, #12
 800c77e:	9301      	str	r3, [sp, #4]
 800c780:	ab02      	add	r3, sp, #8
 800c782:	9300      	str	r3, [sp, #0]
 800c784:	ec45 4b10 	vmov	d0, r4, r5
 800c788:	4653      	mov	r3, sl
 800c78a:	4632      	mov	r2, r6
 800c78c:	f000 fcf4 	bl	800d178 <_dtoa_r>
 800c790:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c794:	4607      	mov	r7, r0
 800c796:	d102      	bne.n	800c79e <__cvt+0x66>
 800c798:	f019 0f01 	tst.w	r9, #1
 800c79c:	d022      	beq.n	800c7e4 <__cvt+0xac>
 800c79e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c7a2:	eb07 0906 	add.w	r9, r7, r6
 800c7a6:	d110      	bne.n	800c7ca <__cvt+0x92>
 800c7a8:	783b      	ldrb	r3, [r7, #0]
 800c7aa:	2b30      	cmp	r3, #48	; 0x30
 800c7ac:	d10a      	bne.n	800c7c4 <__cvt+0x8c>
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	4620      	mov	r0, r4
 800c7b4:	4629      	mov	r1, r5
 800c7b6:	f7f4 f98f 	bl	8000ad8 <__aeabi_dcmpeq>
 800c7ba:	b918      	cbnz	r0, 800c7c4 <__cvt+0x8c>
 800c7bc:	f1c6 0601 	rsb	r6, r6, #1
 800c7c0:	f8ca 6000 	str.w	r6, [sl]
 800c7c4:	f8da 3000 	ldr.w	r3, [sl]
 800c7c8:	4499      	add	r9, r3
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	4620      	mov	r0, r4
 800c7d0:	4629      	mov	r1, r5
 800c7d2:	f7f4 f981 	bl	8000ad8 <__aeabi_dcmpeq>
 800c7d6:	b108      	cbz	r0, 800c7dc <__cvt+0xa4>
 800c7d8:	f8cd 900c 	str.w	r9, [sp, #12]
 800c7dc:	2230      	movs	r2, #48	; 0x30
 800c7de:	9b03      	ldr	r3, [sp, #12]
 800c7e0:	454b      	cmp	r3, r9
 800c7e2:	d307      	bcc.n	800c7f4 <__cvt+0xbc>
 800c7e4:	9b03      	ldr	r3, [sp, #12]
 800c7e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c7e8:	1bdb      	subs	r3, r3, r7
 800c7ea:	4638      	mov	r0, r7
 800c7ec:	6013      	str	r3, [r2, #0]
 800c7ee:	b004      	add	sp, #16
 800c7f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7f4:	1c59      	adds	r1, r3, #1
 800c7f6:	9103      	str	r1, [sp, #12]
 800c7f8:	701a      	strb	r2, [r3, #0]
 800c7fa:	e7f0      	b.n	800c7de <__cvt+0xa6>

0800c7fc <__exponent>:
 800c7fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c7fe:	4603      	mov	r3, r0
 800c800:	2900      	cmp	r1, #0
 800c802:	bfb8      	it	lt
 800c804:	4249      	neglt	r1, r1
 800c806:	f803 2b02 	strb.w	r2, [r3], #2
 800c80a:	bfb4      	ite	lt
 800c80c:	222d      	movlt	r2, #45	; 0x2d
 800c80e:	222b      	movge	r2, #43	; 0x2b
 800c810:	2909      	cmp	r1, #9
 800c812:	7042      	strb	r2, [r0, #1]
 800c814:	dd2a      	ble.n	800c86c <__exponent+0x70>
 800c816:	f10d 0407 	add.w	r4, sp, #7
 800c81a:	46a4      	mov	ip, r4
 800c81c:	270a      	movs	r7, #10
 800c81e:	46a6      	mov	lr, r4
 800c820:	460a      	mov	r2, r1
 800c822:	fb91 f6f7 	sdiv	r6, r1, r7
 800c826:	fb07 1516 	mls	r5, r7, r6, r1
 800c82a:	3530      	adds	r5, #48	; 0x30
 800c82c:	2a63      	cmp	r2, #99	; 0x63
 800c82e:	f104 34ff 	add.w	r4, r4, #4294967295
 800c832:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c836:	4631      	mov	r1, r6
 800c838:	dcf1      	bgt.n	800c81e <__exponent+0x22>
 800c83a:	3130      	adds	r1, #48	; 0x30
 800c83c:	f1ae 0502 	sub.w	r5, lr, #2
 800c840:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c844:	1c44      	adds	r4, r0, #1
 800c846:	4629      	mov	r1, r5
 800c848:	4561      	cmp	r1, ip
 800c84a:	d30a      	bcc.n	800c862 <__exponent+0x66>
 800c84c:	f10d 0209 	add.w	r2, sp, #9
 800c850:	eba2 020e 	sub.w	r2, r2, lr
 800c854:	4565      	cmp	r5, ip
 800c856:	bf88      	it	hi
 800c858:	2200      	movhi	r2, #0
 800c85a:	4413      	add	r3, r2
 800c85c:	1a18      	subs	r0, r3, r0
 800c85e:	b003      	add	sp, #12
 800c860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c862:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c866:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c86a:	e7ed      	b.n	800c848 <__exponent+0x4c>
 800c86c:	2330      	movs	r3, #48	; 0x30
 800c86e:	3130      	adds	r1, #48	; 0x30
 800c870:	7083      	strb	r3, [r0, #2]
 800c872:	70c1      	strb	r1, [r0, #3]
 800c874:	1d03      	adds	r3, r0, #4
 800c876:	e7f1      	b.n	800c85c <__exponent+0x60>

0800c878 <_printf_float>:
 800c878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c87c:	ed2d 8b02 	vpush	{d8}
 800c880:	b08d      	sub	sp, #52	; 0x34
 800c882:	460c      	mov	r4, r1
 800c884:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c888:	4616      	mov	r6, r2
 800c88a:	461f      	mov	r7, r3
 800c88c:	4605      	mov	r5, r0
 800c88e:	f001 fa61 	bl	800dd54 <_localeconv_r>
 800c892:	f8d0 a000 	ldr.w	sl, [r0]
 800c896:	4650      	mov	r0, sl
 800c898:	f7f3 fca2 	bl	80001e0 <strlen>
 800c89c:	2300      	movs	r3, #0
 800c89e:	930a      	str	r3, [sp, #40]	; 0x28
 800c8a0:	6823      	ldr	r3, [r4, #0]
 800c8a2:	9305      	str	r3, [sp, #20]
 800c8a4:	f8d8 3000 	ldr.w	r3, [r8]
 800c8a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c8ac:	3307      	adds	r3, #7
 800c8ae:	f023 0307 	bic.w	r3, r3, #7
 800c8b2:	f103 0208 	add.w	r2, r3, #8
 800c8b6:	f8c8 2000 	str.w	r2, [r8]
 800c8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8be:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c8c2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c8c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c8ca:	9307      	str	r3, [sp, #28]
 800c8cc:	f8cd 8018 	str.w	r8, [sp, #24]
 800c8d0:	ee08 0a10 	vmov	s16, r0
 800c8d4:	4b9f      	ldr	r3, [pc, #636]	; (800cb54 <_printf_float+0x2dc>)
 800c8d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c8da:	f04f 32ff 	mov.w	r2, #4294967295
 800c8de:	f7f4 f92d 	bl	8000b3c <__aeabi_dcmpun>
 800c8e2:	bb88      	cbnz	r0, 800c948 <_printf_float+0xd0>
 800c8e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c8e8:	4b9a      	ldr	r3, [pc, #616]	; (800cb54 <_printf_float+0x2dc>)
 800c8ea:	f04f 32ff 	mov.w	r2, #4294967295
 800c8ee:	f7f4 f907 	bl	8000b00 <__aeabi_dcmple>
 800c8f2:	bb48      	cbnz	r0, 800c948 <_printf_float+0xd0>
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	4640      	mov	r0, r8
 800c8fa:	4649      	mov	r1, r9
 800c8fc:	f7f4 f8f6 	bl	8000aec <__aeabi_dcmplt>
 800c900:	b110      	cbz	r0, 800c908 <_printf_float+0x90>
 800c902:	232d      	movs	r3, #45	; 0x2d
 800c904:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c908:	4b93      	ldr	r3, [pc, #588]	; (800cb58 <_printf_float+0x2e0>)
 800c90a:	4894      	ldr	r0, [pc, #592]	; (800cb5c <_printf_float+0x2e4>)
 800c90c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c910:	bf94      	ite	ls
 800c912:	4698      	movls	r8, r3
 800c914:	4680      	movhi	r8, r0
 800c916:	2303      	movs	r3, #3
 800c918:	6123      	str	r3, [r4, #16]
 800c91a:	9b05      	ldr	r3, [sp, #20]
 800c91c:	f023 0204 	bic.w	r2, r3, #4
 800c920:	6022      	str	r2, [r4, #0]
 800c922:	f04f 0900 	mov.w	r9, #0
 800c926:	9700      	str	r7, [sp, #0]
 800c928:	4633      	mov	r3, r6
 800c92a:	aa0b      	add	r2, sp, #44	; 0x2c
 800c92c:	4621      	mov	r1, r4
 800c92e:	4628      	mov	r0, r5
 800c930:	f000 f9d8 	bl	800cce4 <_printf_common>
 800c934:	3001      	adds	r0, #1
 800c936:	f040 8090 	bne.w	800ca5a <_printf_float+0x1e2>
 800c93a:	f04f 30ff 	mov.w	r0, #4294967295
 800c93e:	b00d      	add	sp, #52	; 0x34
 800c940:	ecbd 8b02 	vpop	{d8}
 800c944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c948:	4642      	mov	r2, r8
 800c94a:	464b      	mov	r3, r9
 800c94c:	4640      	mov	r0, r8
 800c94e:	4649      	mov	r1, r9
 800c950:	f7f4 f8f4 	bl	8000b3c <__aeabi_dcmpun>
 800c954:	b140      	cbz	r0, 800c968 <_printf_float+0xf0>
 800c956:	464b      	mov	r3, r9
 800c958:	2b00      	cmp	r3, #0
 800c95a:	bfbc      	itt	lt
 800c95c:	232d      	movlt	r3, #45	; 0x2d
 800c95e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c962:	487f      	ldr	r0, [pc, #508]	; (800cb60 <_printf_float+0x2e8>)
 800c964:	4b7f      	ldr	r3, [pc, #508]	; (800cb64 <_printf_float+0x2ec>)
 800c966:	e7d1      	b.n	800c90c <_printf_float+0x94>
 800c968:	6863      	ldr	r3, [r4, #4]
 800c96a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c96e:	9206      	str	r2, [sp, #24]
 800c970:	1c5a      	adds	r2, r3, #1
 800c972:	d13f      	bne.n	800c9f4 <_printf_float+0x17c>
 800c974:	2306      	movs	r3, #6
 800c976:	6063      	str	r3, [r4, #4]
 800c978:	9b05      	ldr	r3, [sp, #20]
 800c97a:	6861      	ldr	r1, [r4, #4]
 800c97c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c980:	2300      	movs	r3, #0
 800c982:	9303      	str	r3, [sp, #12]
 800c984:	ab0a      	add	r3, sp, #40	; 0x28
 800c986:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c98a:	ab09      	add	r3, sp, #36	; 0x24
 800c98c:	ec49 8b10 	vmov	d0, r8, r9
 800c990:	9300      	str	r3, [sp, #0]
 800c992:	6022      	str	r2, [r4, #0]
 800c994:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c998:	4628      	mov	r0, r5
 800c99a:	f7ff fecd 	bl	800c738 <__cvt>
 800c99e:	9b06      	ldr	r3, [sp, #24]
 800c9a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c9a2:	2b47      	cmp	r3, #71	; 0x47
 800c9a4:	4680      	mov	r8, r0
 800c9a6:	d108      	bne.n	800c9ba <_printf_float+0x142>
 800c9a8:	1cc8      	adds	r0, r1, #3
 800c9aa:	db02      	blt.n	800c9b2 <_printf_float+0x13a>
 800c9ac:	6863      	ldr	r3, [r4, #4]
 800c9ae:	4299      	cmp	r1, r3
 800c9b0:	dd41      	ble.n	800ca36 <_printf_float+0x1be>
 800c9b2:	f1ab 0b02 	sub.w	fp, fp, #2
 800c9b6:	fa5f fb8b 	uxtb.w	fp, fp
 800c9ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c9be:	d820      	bhi.n	800ca02 <_printf_float+0x18a>
 800c9c0:	3901      	subs	r1, #1
 800c9c2:	465a      	mov	r2, fp
 800c9c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c9c8:	9109      	str	r1, [sp, #36]	; 0x24
 800c9ca:	f7ff ff17 	bl	800c7fc <__exponent>
 800c9ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9d0:	1813      	adds	r3, r2, r0
 800c9d2:	2a01      	cmp	r2, #1
 800c9d4:	4681      	mov	r9, r0
 800c9d6:	6123      	str	r3, [r4, #16]
 800c9d8:	dc02      	bgt.n	800c9e0 <_printf_float+0x168>
 800c9da:	6822      	ldr	r2, [r4, #0]
 800c9dc:	07d2      	lsls	r2, r2, #31
 800c9de:	d501      	bpl.n	800c9e4 <_printf_float+0x16c>
 800c9e0:	3301      	adds	r3, #1
 800c9e2:	6123      	str	r3, [r4, #16]
 800c9e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d09c      	beq.n	800c926 <_printf_float+0xae>
 800c9ec:	232d      	movs	r3, #45	; 0x2d
 800c9ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9f2:	e798      	b.n	800c926 <_printf_float+0xae>
 800c9f4:	9a06      	ldr	r2, [sp, #24]
 800c9f6:	2a47      	cmp	r2, #71	; 0x47
 800c9f8:	d1be      	bne.n	800c978 <_printf_float+0x100>
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d1bc      	bne.n	800c978 <_printf_float+0x100>
 800c9fe:	2301      	movs	r3, #1
 800ca00:	e7b9      	b.n	800c976 <_printf_float+0xfe>
 800ca02:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ca06:	d118      	bne.n	800ca3a <_printf_float+0x1c2>
 800ca08:	2900      	cmp	r1, #0
 800ca0a:	6863      	ldr	r3, [r4, #4]
 800ca0c:	dd0b      	ble.n	800ca26 <_printf_float+0x1ae>
 800ca0e:	6121      	str	r1, [r4, #16]
 800ca10:	b913      	cbnz	r3, 800ca18 <_printf_float+0x1a0>
 800ca12:	6822      	ldr	r2, [r4, #0]
 800ca14:	07d0      	lsls	r0, r2, #31
 800ca16:	d502      	bpl.n	800ca1e <_printf_float+0x1a6>
 800ca18:	3301      	adds	r3, #1
 800ca1a:	440b      	add	r3, r1
 800ca1c:	6123      	str	r3, [r4, #16]
 800ca1e:	65a1      	str	r1, [r4, #88]	; 0x58
 800ca20:	f04f 0900 	mov.w	r9, #0
 800ca24:	e7de      	b.n	800c9e4 <_printf_float+0x16c>
 800ca26:	b913      	cbnz	r3, 800ca2e <_printf_float+0x1b6>
 800ca28:	6822      	ldr	r2, [r4, #0]
 800ca2a:	07d2      	lsls	r2, r2, #31
 800ca2c:	d501      	bpl.n	800ca32 <_printf_float+0x1ba>
 800ca2e:	3302      	adds	r3, #2
 800ca30:	e7f4      	b.n	800ca1c <_printf_float+0x1a4>
 800ca32:	2301      	movs	r3, #1
 800ca34:	e7f2      	b.n	800ca1c <_printf_float+0x1a4>
 800ca36:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ca3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca3c:	4299      	cmp	r1, r3
 800ca3e:	db05      	blt.n	800ca4c <_printf_float+0x1d4>
 800ca40:	6823      	ldr	r3, [r4, #0]
 800ca42:	6121      	str	r1, [r4, #16]
 800ca44:	07d8      	lsls	r0, r3, #31
 800ca46:	d5ea      	bpl.n	800ca1e <_printf_float+0x1a6>
 800ca48:	1c4b      	adds	r3, r1, #1
 800ca4a:	e7e7      	b.n	800ca1c <_printf_float+0x1a4>
 800ca4c:	2900      	cmp	r1, #0
 800ca4e:	bfd4      	ite	le
 800ca50:	f1c1 0202 	rsble	r2, r1, #2
 800ca54:	2201      	movgt	r2, #1
 800ca56:	4413      	add	r3, r2
 800ca58:	e7e0      	b.n	800ca1c <_printf_float+0x1a4>
 800ca5a:	6823      	ldr	r3, [r4, #0]
 800ca5c:	055a      	lsls	r2, r3, #21
 800ca5e:	d407      	bmi.n	800ca70 <_printf_float+0x1f8>
 800ca60:	6923      	ldr	r3, [r4, #16]
 800ca62:	4642      	mov	r2, r8
 800ca64:	4631      	mov	r1, r6
 800ca66:	4628      	mov	r0, r5
 800ca68:	47b8      	blx	r7
 800ca6a:	3001      	adds	r0, #1
 800ca6c:	d12c      	bne.n	800cac8 <_printf_float+0x250>
 800ca6e:	e764      	b.n	800c93a <_printf_float+0xc2>
 800ca70:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ca74:	f240 80e0 	bls.w	800cc38 <_printf_float+0x3c0>
 800ca78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	2300      	movs	r3, #0
 800ca80:	f7f4 f82a 	bl	8000ad8 <__aeabi_dcmpeq>
 800ca84:	2800      	cmp	r0, #0
 800ca86:	d034      	beq.n	800caf2 <_printf_float+0x27a>
 800ca88:	4a37      	ldr	r2, [pc, #220]	; (800cb68 <_printf_float+0x2f0>)
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	4631      	mov	r1, r6
 800ca8e:	4628      	mov	r0, r5
 800ca90:	47b8      	blx	r7
 800ca92:	3001      	adds	r0, #1
 800ca94:	f43f af51 	beq.w	800c93a <_printf_float+0xc2>
 800ca98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca9c:	429a      	cmp	r2, r3
 800ca9e:	db02      	blt.n	800caa6 <_printf_float+0x22e>
 800caa0:	6823      	ldr	r3, [r4, #0]
 800caa2:	07d8      	lsls	r0, r3, #31
 800caa4:	d510      	bpl.n	800cac8 <_printf_float+0x250>
 800caa6:	ee18 3a10 	vmov	r3, s16
 800caaa:	4652      	mov	r2, sl
 800caac:	4631      	mov	r1, r6
 800caae:	4628      	mov	r0, r5
 800cab0:	47b8      	blx	r7
 800cab2:	3001      	adds	r0, #1
 800cab4:	f43f af41 	beq.w	800c93a <_printf_float+0xc2>
 800cab8:	f04f 0800 	mov.w	r8, #0
 800cabc:	f104 091a 	add.w	r9, r4, #26
 800cac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cac2:	3b01      	subs	r3, #1
 800cac4:	4543      	cmp	r3, r8
 800cac6:	dc09      	bgt.n	800cadc <_printf_float+0x264>
 800cac8:	6823      	ldr	r3, [r4, #0]
 800caca:	079b      	lsls	r3, r3, #30
 800cacc:	f100 8105 	bmi.w	800ccda <_printf_float+0x462>
 800cad0:	68e0      	ldr	r0, [r4, #12]
 800cad2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cad4:	4298      	cmp	r0, r3
 800cad6:	bfb8      	it	lt
 800cad8:	4618      	movlt	r0, r3
 800cada:	e730      	b.n	800c93e <_printf_float+0xc6>
 800cadc:	2301      	movs	r3, #1
 800cade:	464a      	mov	r2, r9
 800cae0:	4631      	mov	r1, r6
 800cae2:	4628      	mov	r0, r5
 800cae4:	47b8      	blx	r7
 800cae6:	3001      	adds	r0, #1
 800cae8:	f43f af27 	beq.w	800c93a <_printf_float+0xc2>
 800caec:	f108 0801 	add.w	r8, r8, #1
 800caf0:	e7e6      	b.n	800cac0 <_printf_float+0x248>
 800caf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	dc39      	bgt.n	800cb6c <_printf_float+0x2f4>
 800caf8:	4a1b      	ldr	r2, [pc, #108]	; (800cb68 <_printf_float+0x2f0>)
 800cafa:	2301      	movs	r3, #1
 800cafc:	4631      	mov	r1, r6
 800cafe:	4628      	mov	r0, r5
 800cb00:	47b8      	blx	r7
 800cb02:	3001      	adds	r0, #1
 800cb04:	f43f af19 	beq.w	800c93a <_printf_float+0xc2>
 800cb08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb0c:	4313      	orrs	r3, r2
 800cb0e:	d102      	bne.n	800cb16 <_printf_float+0x29e>
 800cb10:	6823      	ldr	r3, [r4, #0]
 800cb12:	07d9      	lsls	r1, r3, #31
 800cb14:	d5d8      	bpl.n	800cac8 <_printf_float+0x250>
 800cb16:	ee18 3a10 	vmov	r3, s16
 800cb1a:	4652      	mov	r2, sl
 800cb1c:	4631      	mov	r1, r6
 800cb1e:	4628      	mov	r0, r5
 800cb20:	47b8      	blx	r7
 800cb22:	3001      	adds	r0, #1
 800cb24:	f43f af09 	beq.w	800c93a <_printf_float+0xc2>
 800cb28:	f04f 0900 	mov.w	r9, #0
 800cb2c:	f104 0a1a 	add.w	sl, r4, #26
 800cb30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb32:	425b      	negs	r3, r3
 800cb34:	454b      	cmp	r3, r9
 800cb36:	dc01      	bgt.n	800cb3c <_printf_float+0x2c4>
 800cb38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb3a:	e792      	b.n	800ca62 <_printf_float+0x1ea>
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	4652      	mov	r2, sl
 800cb40:	4631      	mov	r1, r6
 800cb42:	4628      	mov	r0, r5
 800cb44:	47b8      	blx	r7
 800cb46:	3001      	adds	r0, #1
 800cb48:	f43f aef7 	beq.w	800c93a <_printf_float+0xc2>
 800cb4c:	f109 0901 	add.w	r9, r9, #1
 800cb50:	e7ee      	b.n	800cb30 <_printf_float+0x2b8>
 800cb52:	bf00      	nop
 800cb54:	7fefffff 	.word	0x7fefffff
 800cb58:	0800f630 	.word	0x0800f630
 800cb5c:	0800f634 	.word	0x0800f634
 800cb60:	0800f63c 	.word	0x0800f63c
 800cb64:	0800f638 	.word	0x0800f638
 800cb68:	0800f640 	.word	0x0800f640
 800cb6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cb70:	429a      	cmp	r2, r3
 800cb72:	bfa8      	it	ge
 800cb74:	461a      	movge	r2, r3
 800cb76:	2a00      	cmp	r2, #0
 800cb78:	4691      	mov	r9, r2
 800cb7a:	dc37      	bgt.n	800cbec <_printf_float+0x374>
 800cb7c:	f04f 0b00 	mov.w	fp, #0
 800cb80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cb84:	f104 021a 	add.w	r2, r4, #26
 800cb88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cb8a:	9305      	str	r3, [sp, #20]
 800cb8c:	eba3 0309 	sub.w	r3, r3, r9
 800cb90:	455b      	cmp	r3, fp
 800cb92:	dc33      	bgt.n	800cbfc <_printf_float+0x384>
 800cb94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb98:	429a      	cmp	r2, r3
 800cb9a:	db3b      	blt.n	800cc14 <_printf_float+0x39c>
 800cb9c:	6823      	ldr	r3, [r4, #0]
 800cb9e:	07da      	lsls	r2, r3, #31
 800cba0:	d438      	bmi.n	800cc14 <_printf_float+0x39c>
 800cba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cba4:	9a05      	ldr	r2, [sp, #20]
 800cba6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cba8:	1a9a      	subs	r2, r3, r2
 800cbaa:	eba3 0901 	sub.w	r9, r3, r1
 800cbae:	4591      	cmp	r9, r2
 800cbb0:	bfa8      	it	ge
 800cbb2:	4691      	movge	r9, r2
 800cbb4:	f1b9 0f00 	cmp.w	r9, #0
 800cbb8:	dc35      	bgt.n	800cc26 <_printf_float+0x3ae>
 800cbba:	f04f 0800 	mov.w	r8, #0
 800cbbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cbc2:	f104 0a1a 	add.w	sl, r4, #26
 800cbc6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cbca:	1a9b      	subs	r3, r3, r2
 800cbcc:	eba3 0309 	sub.w	r3, r3, r9
 800cbd0:	4543      	cmp	r3, r8
 800cbd2:	f77f af79 	ble.w	800cac8 <_printf_float+0x250>
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	4652      	mov	r2, sl
 800cbda:	4631      	mov	r1, r6
 800cbdc:	4628      	mov	r0, r5
 800cbde:	47b8      	blx	r7
 800cbe0:	3001      	adds	r0, #1
 800cbe2:	f43f aeaa 	beq.w	800c93a <_printf_float+0xc2>
 800cbe6:	f108 0801 	add.w	r8, r8, #1
 800cbea:	e7ec      	b.n	800cbc6 <_printf_float+0x34e>
 800cbec:	4613      	mov	r3, r2
 800cbee:	4631      	mov	r1, r6
 800cbf0:	4642      	mov	r2, r8
 800cbf2:	4628      	mov	r0, r5
 800cbf4:	47b8      	blx	r7
 800cbf6:	3001      	adds	r0, #1
 800cbf8:	d1c0      	bne.n	800cb7c <_printf_float+0x304>
 800cbfa:	e69e      	b.n	800c93a <_printf_float+0xc2>
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	4631      	mov	r1, r6
 800cc00:	4628      	mov	r0, r5
 800cc02:	9205      	str	r2, [sp, #20]
 800cc04:	47b8      	blx	r7
 800cc06:	3001      	adds	r0, #1
 800cc08:	f43f ae97 	beq.w	800c93a <_printf_float+0xc2>
 800cc0c:	9a05      	ldr	r2, [sp, #20]
 800cc0e:	f10b 0b01 	add.w	fp, fp, #1
 800cc12:	e7b9      	b.n	800cb88 <_printf_float+0x310>
 800cc14:	ee18 3a10 	vmov	r3, s16
 800cc18:	4652      	mov	r2, sl
 800cc1a:	4631      	mov	r1, r6
 800cc1c:	4628      	mov	r0, r5
 800cc1e:	47b8      	blx	r7
 800cc20:	3001      	adds	r0, #1
 800cc22:	d1be      	bne.n	800cba2 <_printf_float+0x32a>
 800cc24:	e689      	b.n	800c93a <_printf_float+0xc2>
 800cc26:	9a05      	ldr	r2, [sp, #20]
 800cc28:	464b      	mov	r3, r9
 800cc2a:	4442      	add	r2, r8
 800cc2c:	4631      	mov	r1, r6
 800cc2e:	4628      	mov	r0, r5
 800cc30:	47b8      	blx	r7
 800cc32:	3001      	adds	r0, #1
 800cc34:	d1c1      	bne.n	800cbba <_printf_float+0x342>
 800cc36:	e680      	b.n	800c93a <_printf_float+0xc2>
 800cc38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc3a:	2a01      	cmp	r2, #1
 800cc3c:	dc01      	bgt.n	800cc42 <_printf_float+0x3ca>
 800cc3e:	07db      	lsls	r3, r3, #31
 800cc40:	d538      	bpl.n	800ccb4 <_printf_float+0x43c>
 800cc42:	2301      	movs	r3, #1
 800cc44:	4642      	mov	r2, r8
 800cc46:	4631      	mov	r1, r6
 800cc48:	4628      	mov	r0, r5
 800cc4a:	47b8      	blx	r7
 800cc4c:	3001      	adds	r0, #1
 800cc4e:	f43f ae74 	beq.w	800c93a <_printf_float+0xc2>
 800cc52:	ee18 3a10 	vmov	r3, s16
 800cc56:	4652      	mov	r2, sl
 800cc58:	4631      	mov	r1, r6
 800cc5a:	4628      	mov	r0, r5
 800cc5c:	47b8      	blx	r7
 800cc5e:	3001      	adds	r0, #1
 800cc60:	f43f ae6b 	beq.w	800c93a <_printf_float+0xc2>
 800cc64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cc68:	2200      	movs	r2, #0
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	f7f3 ff34 	bl	8000ad8 <__aeabi_dcmpeq>
 800cc70:	b9d8      	cbnz	r0, 800ccaa <_printf_float+0x432>
 800cc72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc74:	f108 0201 	add.w	r2, r8, #1
 800cc78:	3b01      	subs	r3, #1
 800cc7a:	4631      	mov	r1, r6
 800cc7c:	4628      	mov	r0, r5
 800cc7e:	47b8      	blx	r7
 800cc80:	3001      	adds	r0, #1
 800cc82:	d10e      	bne.n	800cca2 <_printf_float+0x42a>
 800cc84:	e659      	b.n	800c93a <_printf_float+0xc2>
 800cc86:	2301      	movs	r3, #1
 800cc88:	4652      	mov	r2, sl
 800cc8a:	4631      	mov	r1, r6
 800cc8c:	4628      	mov	r0, r5
 800cc8e:	47b8      	blx	r7
 800cc90:	3001      	adds	r0, #1
 800cc92:	f43f ae52 	beq.w	800c93a <_printf_float+0xc2>
 800cc96:	f108 0801 	add.w	r8, r8, #1
 800cc9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc9c:	3b01      	subs	r3, #1
 800cc9e:	4543      	cmp	r3, r8
 800cca0:	dcf1      	bgt.n	800cc86 <_printf_float+0x40e>
 800cca2:	464b      	mov	r3, r9
 800cca4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cca8:	e6dc      	b.n	800ca64 <_printf_float+0x1ec>
 800ccaa:	f04f 0800 	mov.w	r8, #0
 800ccae:	f104 0a1a 	add.w	sl, r4, #26
 800ccb2:	e7f2      	b.n	800cc9a <_printf_float+0x422>
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	4642      	mov	r2, r8
 800ccb8:	e7df      	b.n	800cc7a <_printf_float+0x402>
 800ccba:	2301      	movs	r3, #1
 800ccbc:	464a      	mov	r2, r9
 800ccbe:	4631      	mov	r1, r6
 800ccc0:	4628      	mov	r0, r5
 800ccc2:	47b8      	blx	r7
 800ccc4:	3001      	adds	r0, #1
 800ccc6:	f43f ae38 	beq.w	800c93a <_printf_float+0xc2>
 800ccca:	f108 0801 	add.w	r8, r8, #1
 800ccce:	68e3      	ldr	r3, [r4, #12]
 800ccd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ccd2:	1a5b      	subs	r3, r3, r1
 800ccd4:	4543      	cmp	r3, r8
 800ccd6:	dcf0      	bgt.n	800ccba <_printf_float+0x442>
 800ccd8:	e6fa      	b.n	800cad0 <_printf_float+0x258>
 800ccda:	f04f 0800 	mov.w	r8, #0
 800ccde:	f104 0919 	add.w	r9, r4, #25
 800cce2:	e7f4      	b.n	800ccce <_printf_float+0x456>

0800cce4 <_printf_common>:
 800cce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cce8:	4616      	mov	r6, r2
 800ccea:	4699      	mov	r9, r3
 800ccec:	688a      	ldr	r2, [r1, #8]
 800ccee:	690b      	ldr	r3, [r1, #16]
 800ccf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ccf4:	4293      	cmp	r3, r2
 800ccf6:	bfb8      	it	lt
 800ccf8:	4613      	movlt	r3, r2
 800ccfa:	6033      	str	r3, [r6, #0]
 800ccfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cd00:	4607      	mov	r7, r0
 800cd02:	460c      	mov	r4, r1
 800cd04:	b10a      	cbz	r2, 800cd0a <_printf_common+0x26>
 800cd06:	3301      	adds	r3, #1
 800cd08:	6033      	str	r3, [r6, #0]
 800cd0a:	6823      	ldr	r3, [r4, #0]
 800cd0c:	0699      	lsls	r1, r3, #26
 800cd0e:	bf42      	ittt	mi
 800cd10:	6833      	ldrmi	r3, [r6, #0]
 800cd12:	3302      	addmi	r3, #2
 800cd14:	6033      	strmi	r3, [r6, #0]
 800cd16:	6825      	ldr	r5, [r4, #0]
 800cd18:	f015 0506 	ands.w	r5, r5, #6
 800cd1c:	d106      	bne.n	800cd2c <_printf_common+0x48>
 800cd1e:	f104 0a19 	add.w	sl, r4, #25
 800cd22:	68e3      	ldr	r3, [r4, #12]
 800cd24:	6832      	ldr	r2, [r6, #0]
 800cd26:	1a9b      	subs	r3, r3, r2
 800cd28:	42ab      	cmp	r3, r5
 800cd2a:	dc26      	bgt.n	800cd7a <_printf_common+0x96>
 800cd2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cd30:	1e13      	subs	r3, r2, #0
 800cd32:	6822      	ldr	r2, [r4, #0]
 800cd34:	bf18      	it	ne
 800cd36:	2301      	movne	r3, #1
 800cd38:	0692      	lsls	r2, r2, #26
 800cd3a:	d42b      	bmi.n	800cd94 <_printf_common+0xb0>
 800cd3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd40:	4649      	mov	r1, r9
 800cd42:	4638      	mov	r0, r7
 800cd44:	47c0      	blx	r8
 800cd46:	3001      	adds	r0, #1
 800cd48:	d01e      	beq.n	800cd88 <_printf_common+0xa4>
 800cd4a:	6823      	ldr	r3, [r4, #0]
 800cd4c:	68e5      	ldr	r5, [r4, #12]
 800cd4e:	6832      	ldr	r2, [r6, #0]
 800cd50:	f003 0306 	and.w	r3, r3, #6
 800cd54:	2b04      	cmp	r3, #4
 800cd56:	bf08      	it	eq
 800cd58:	1aad      	subeq	r5, r5, r2
 800cd5a:	68a3      	ldr	r3, [r4, #8]
 800cd5c:	6922      	ldr	r2, [r4, #16]
 800cd5e:	bf0c      	ite	eq
 800cd60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd64:	2500      	movne	r5, #0
 800cd66:	4293      	cmp	r3, r2
 800cd68:	bfc4      	itt	gt
 800cd6a:	1a9b      	subgt	r3, r3, r2
 800cd6c:	18ed      	addgt	r5, r5, r3
 800cd6e:	2600      	movs	r6, #0
 800cd70:	341a      	adds	r4, #26
 800cd72:	42b5      	cmp	r5, r6
 800cd74:	d11a      	bne.n	800cdac <_printf_common+0xc8>
 800cd76:	2000      	movs	r0, #0
 800cd78:	e008      	b.n	800cd8c <_printf_common+0xa8>
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	4652      	mov	r2, sl
 800cd7e:	4649      	mov	r1, r9
 800cd80:	4638      	mov	r0, r7
 800cd82:	47c0      	blx	r8
 800cd84:	3001      	adds	r0, #1
 800cd86:	d103      	bne.n	800cd90 <_printf_common+0xac>
 800cd88:	f04f 30ff 	mov.w	r0, #4294967295
 800cd8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd90:	3501      	adds	r5, #1
 800cd92:	e7c6      	b.n	800cd22 <_printf_common+0x3e>
 800cd94:	18e1      	adds	r1, r4, r3
 800cd96:	1c5a      	adds	r2, r3, #1
 800cd98:	2030      	movs	r0, #48	; 0x30
 800cd9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cd9e:	4422      	add	r2, r4
 800cda0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cda4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cda8:	3302      	adds	r3, #2
 800cdaa:	e7c7      	b.n	800cd3c <_printf_common+0x58>
 800cdac:	2301      	movs	r3, #1
 800cdae:	4622      	mov	r2, r4
 800cdb0:	4649      	mov	r1, r9
 800cdb2:	4638      	mov	r0, r7
 800cdb4:	47c0      	blx	r8
 800cdb6:	3001      	adds	r0, #1
 800cdb8:	d0e6      	beq.n	800cd88 <_printf_common+0xa4>
 800cdba:	3601      	adds	r6, #1
 800cdbc:	e7d9      	b.n	800cd72 <_printf_common+0x8e>
	...

0800cdc0 <_printf_i>:
 800cdc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cdc4:	7e0f      	ldrb	r7, [r1, #24]
 800cdc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cdc8:	2f78      	cmp	r7, #120	; 0x78
 800cdca:	4691      	mov	r9, r2
 800cdcc:	4680      	mov	r8, r0
 800cdce:	460c      	mov	r4, r1
 800cdd0:	469a      	mov	sl, r3
 800cdd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cdd6:	d807      	bhi.n	800cde8 <_printf_i+0x28>
 800cdd8:	2f62      	cmp	r7, #98	; 0x62
 800cdda:	d80a      	bhi.n	800cdf2 <_printf_i+0x32>
 800cddc:	2f00      	cmp	r7, #0
 800cdde:	f000 80d8 	beq.w	800cf92 <_printf_i+0x1d2>
 800cde2:	2f58      	cmp	r7, #88	; 0x58
 800cde4:	f000 80a3 	beq.w	800cf2e <_printf_i+0x16e>
 800cde8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cdec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cdf0:	e03a      	b.n	800ce68 <_printf_i+0xa8>
 800cdf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cdf6:	2b15      	cmp	r3, #21
 800cdf8:	d8f6      	bhi.n	800cde8 <_printf_i+0x28>
 800cdfa:	a101      	add	r1, pc, #4	; (adr r1, 800ce00 <_printf_i+0x40>)
 800cdfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ce00:	0800ce59 	.word	0x0800ce59
 800ce04:	0800ce6d 	.word	0x0800ce6d
 800ce08:	0800cde9 	.word	0x0800cde9
 800ce0c:	0800cde9 	.word	0x0800cde9
 800ce10:	0800cde9 	.word	0x0800cde9
 800ce14:	0800cde9 	.word	0x0800cde9
 800ce18:	0800ce6d 	.word	0x0800ce6d
 800ce1c:	0800cde9 	.word	0x0800cde9
 800ce20:	0800cde9 	.word	0x0800cde9
 800ce24:	0800cde9 	.word	0x0800cde9
 800ce28:	0800cde9 	.word	0x0800cde9
 800ce2c:	0800cf79 	.word	0x0800cf79
 800ce30:	0800ce9d 	.word	0x0800ce9d
 800ce34:	0800cf5b 	.word	0x0800cf5b
 800ce38:	0800cde9 	.word	0x0800cde9
 800ce3c:	0800cde9 	.word	0x0800cde9
 800ce40:	0800cf9b 	.word	0x0800cf9b
 800ce44:	0800cde9 	.word	0x0800cde9
 800ce48:	0800ce9d 	.word	0x0800ce9d
 800ce4c:	0800cde9 	.word	0x0800cde9
 800ce50:	0800cde9 	.word	0x0800cde9
 800ce54:	0800cf63 	.word	0x0800cf63
 800ce58:	682b      	ldr	r3, [r5, #0]
 800ce5a:	1d1a      	adds	r2, r3, #4
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	602a      	str	r2, [r5, #0]
 800ce60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce68:	2301      	movs	r3, #1
 800ce6a:	e0a3      	b.n	800cfb4 <_printf_i+0x1f4>
 800ce6c:	6820      	ldr	r0, [r4, #0]
 800ce6e:	6829      	ldr	r1, [r5, #0]
 800ce70:	0606      	lsls	r6, r0, #24
 800ce72:	f101 0304 	add.w	r3, r1, #4
 800ce76:	d50a      	bpl.n	800ce8e <_printf_i+0xce>
 800ce78:	680e      	ldr	r6, [r1, #0]
 800ce7a:	602b      	str	r3, [r5, #0]
 800ce7c:	2e00      	cmp	r6, #0
 800ce7e:	da03      	bge.n	800ce88 <_printf_i+0xc8>
 800ce80:	232d      	movs	r3, #45	; 0x2d
 800ce82:	4276      	negs	r6, r6
 800ce84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce88:	485e      	ldr	r0, [pc, #376]	; (800d004 <_printf_i+0x244>)
 800ce8a:	230a      	movs	r3, #10
 800ce8c:	e019      	b.n	800cec2 <_printf_i+0x102>
 800ce8e:	680e      	ldr	r6, [r1, #0]
 800ce90:	602b      	str	r3, [r5, #0]
 800ce92:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ce96:	bf18      	it	ne
 800ce98:	b236      	sxthne	r6, r6
 800ce9a:	e7ef      	b.n	800ce7c <_printf_i+0xbc>
 800ce9c:	682b      	ldr	r3, [r5, #0]
 800ce9e:	6820      	ldr	r0, [r4, #0]
 800cea0:	1d19      	adds	r1, r3, #4
 800cea2:	6029      	str	r1, [r5, #0]
 800cea4:	0601      	lsls	r1, r0, #24
 800cea6:	d501      	bpl.n	800ceac <_printf_i+0xec>
 800cea8:	681e      	ldr	r6, [r3, #0]
 800ceaa:	e002      	b.n	800ceb2 <_printf_i+0xf2>
 800ceac:	0646      	lsls	r6, r0, #25
 800ceae:	d5fb      	bpl.n	800cea8 <_printf_i+0xe8>
 800ceb0:	881e      	ldrh	r6, [r3, #0]
 800ceb2:	4854      	ldr	r0, [pc, #336]	; (800d004 <_printf_i+0x244>)
 800ceb4:	2f6f      	cmp	r7, #111	; 0x6f
 800ceb6:	bf0c      	ite	eq
 800ceb8:	2308      	moveq	r3, #8
 800ceba:	230a      	movne	r3, #10
 800cebc:	2100      	movs	r1, #0
 800cebe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cec2:	6865      	ldr	r5, [r4, #4]
 800cec4:	60a5      	str	r5, [r4, #8]
 800cec6:	2d00      	cmp	r5, #0
 800cec8:	bfa2      	ittt	ge
 800ceca:	6821      	ldrge	r1, [r4, #0]
 800cecc:	f021 0104 	bicge.w	r1, r1, #4
 800ced0:	6021      	strge	r1, [r4, #0]
 800ced2:	b90e      	cbnz	r6, 800ced8 <_printf_i+0x118>
 800ced4:	2d00      	cmp	r5, #0
 800ced6:	d04d      	beq.n	800cf74 <_printf_i+0x1b4>
 800ced8:	4615      	mov	r5, r2
 800ceda:	fbb6 f1f3 	udiv	r1, r6, r3
 800cede:	fb03 6711 	mls	r7, r3, r1, r6
 800cee2:	5dc7      	ldrb	r7, [r0, r7]
 800cee4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cee8:	4637      	mov	r7, r6
 800ceea:	42bb      	cmp	r3, r7
 800ceec:	460e      	mov	r6, r1
 800ceee:	d9f4      	bls.n	800ceda <_printf_i+0x11a>
 800cef0:	2b08      	cmp	r3, #8
 800cef2:	d10b      	bne.n	800cf0c <_printf_i+0x14c>
 800cef4:	6823      	ldr	r3, [r4, #0]
 800cef6:	07de      	lsls	r6, r3, #31
 800cef8:	d508      	bpl.n	800cf0c <_printf_i+0x14c>
 800cefa:	6923      	ldr	r3, [r4, #16]
 800cefc:	6861      	ldr	r1, [r4, #4]
 800cefe:	4299      	cmp	r1, r3
 800cf00:	bfde      	ittt	le
 800cf02:	2330      	movle	r3, #48	; 0x30
 800cf04:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cf08:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cf0c:	1b52      	subs	r2, r2, r5
 800cf0e:	6122      	str	r2, [r4, #16]
 800cf10:	f8cd a000 	str.w	sl, [sp]
 800cf14:	464b      	mov	r3, r9
 800cf16:	aa03      	add	r2, sp, #12
 800cf18:	4621      	mov	r1, r4
 800cf1a:	4640      	mov	r0, r8
 800cf1c:	f7ff fee2 	bl	800cce4 <_printf_common>
 800cf20:	3001      	adds	r0, #1
 800cf22:	d14c      	bne.n	800cfbe <_printf_i+0x1fe>
 800cf24:	f04f 30ff 	mov.w	r0, #4294967295
 800cf28:	b004      	add	sp, #16
 800cf2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf2e:	4835      	ldr	r0, [pc, #212]	; (800d004 <_printf_i+0x244>)
 800cf30:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cf34:	6829      	ldr	r1, [r5, #0]
 800cf36:	6823      	ldr	r3, [r4, #0]
 800cf38:	f851 6b04 	ldr.w	r6, [r1], #4
 800cf3c:	6029      	str	r1, [r5, #0]
 800cf3e:	061d      	lsls	r5, r3, #24
 800cf40:	d514      	bpl.n	800cf6c <_printf_i+0x1ac>
 800cf42:	07df      	lsls	r7, r3, #31
 800cf44:	bf44      	itt	mi
 800cf46:	f043 0320 	orrmi.w	r3, r3, #32
 800cf4a:	6023      	strmi	r3, [r4, #0]
 800cf4c:	b91e      	cbnz	r6, 800cf56 <_printf_i+0x196>
 800cf4e:	6823      	ldr	r3, [r4, #0]
 800cf50:	f023 0320 	bic.w	r3, r3, #32
 800cf54:	6023      	str	r3, [r4, #0]
 800cf56:	2310      	movs	r3, #16
 800cf58:	e7b0      	b.n	800cebc <_printf_i+0xfc>
 800cf5a:	6823      	ldr	r3, [r4, #0]
 800cf5c:	f043 0320 	orr.w	r3, r3, #32
 800cf60:	6023      	str	r3, [r4, #0]
 800cf62:	2378      	movs	r3, #120	; 0x78
 800cf64:	4828      	ldr	r0, [pc, #160]	; (800d008 <_printf_i+0x248>)
 800cf66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cf6a:	e7e3      	b.n	800cf34 <_printf_i+0x174>
 800cf6c:	0659      	lsls	r1, r3, #25
 800cf6e:	bf48      	it	mi
 800cf70:	b2b6      	uxthmi	r6, r6
 800cf72:	e7e6      	b.n	800cf42 <_printf_i+0x182>
 800cf74:	4615      	mov	r5, r2
 800cf76:	e7bb      	b.n	800cef0 <_printf_i+0x130>
 800cf78:	682b      	ldr	r3, [r5, #0]
 800cf7a:	6826      	ldr	r6, [r4, #0]
 800cf7c:	6961      	ldr	r1, [r4, #20]
 800cf7e:	1d18      	adds	r0, r3, #4
 800cf80:	6028      	str	r0, [r5, #0]
 800cf82:	0635      	lsls	r5, r6, #24
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	d501      	bpl.n	800cf8c <_printf_i+0x1cc>
 800cf88:	6019      	str	r1, [r3, #0]
 800cf8a:	e002      	b.n	800cf92 <_printf_i+0x1d2>
 800cf8c:	0670      	lsls	r0, r6, #25
 800cf8e:	d5fb      	bpl.n	800cf88 <_printf_i+0x1c8>
 800cf90:	8019      	strh	r1, [r3, #0]
 800cf92:	2300      	movs	r3, #0
 800cf94:	6123      	str	r3, [r4, #16]
 800cf96:	4615      	mov	r5, r2
 800cf98:	e7ba      	b.n	800cf10 <_printf_i+0x150>
 800cf9a:	682b      	ldr	r3, [r5, #0]
 800cf9c:	1d1a      	adds	r2, r3, #4
 800cf9e:	602a      	str	r2, [r5, #0]
 800cfa0:	681d      	ldr	r5, [r3, #0]
 800cfa2:	6862      	ldr	r2, [r4, #4]
 800cfa4:	2100      	movs	r1, #0
 800cfa6:	4628      	mov	r0, r5
 800cfa8:	f7f3 f922 	bl	80001f0 <memchr>
 800cfac:	b108      	cbz	r0, 800cfb2 <_printf_i+0x1f2>
 800cfae:	1b40      	subs	r0, r0, r5
 800cfb0:	6060      	str	r0, [r4, #4]
 800cfb2:	6863      	ldr	r3, [r4, #4]
 800cfb4:	6123      	str	r3, [r4, #16]
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cfbc:	e7a8      	b.n	800cf10 <_printf_i+0x150>
 800cfbe:	6923      	ldr	r3, [r4, #16]
 800cfc0:	462a      	mov	r2, r5
 800cfc2:	4649      	mov	r1, r9
 800cfc4:	4640      	mov	r0, r8
 800cfc6:	47d0      	blx	sl
 800cfc8:	3001      	adds	r0, #1
 800cfca:	d0ab      	beq.n	800cf24 <_printf_i+0x164>
 800cfcc:	6823      	ldr	r3, [r4, #0]
 800cfce:	079b      	lsls	r3, r3, #30
 800cfd0:	d413      	bmi.n	800cffa <_printf_i+0x23a>
 800cfd2:	68e0      	ldr	r0, [r4, #12]
 800cfd4:	9b03      	ldr	r3, [sp, #12]
 800cfd6:	4298      	cmp	r0, r3
 800cfd8:	bfb8      	it	lt
 800cfda:	4618      	movlt	r0, r3
 800cfdc:	e7a4      	b.n	800cf28 <_printf_i+0x168>
 800cfde:	2301      	movs	r3, #1
 800cfe0:	4632      	mov	r2, r6
 800cfe2:	4649      	mov	r1, r9
 800cfe4:	4640      	mov	r0, r8
 800cfe6:	47d0      	blx	sl
 800cfe8:	3001      	adds	r0, #1
 800cfea:	d09b      	beq.n	800cf24 <_printf_i+0x164>
 800cfec:	3501      	adds	r5, #1
 800cfee:	68e3      	ldr	r3, [r4, #12]
 800cff0:	9903      	ldr	r1, [sp, #12]
 800cff2:	1a5b      	subs	r3, r3, r1
 800cff4:	42ab      	cmp	r3, r5
 800cff6:	dcf2      	bgt.n	800cfde <_printf_i+0x21e>
 800cff8:	e7eb      	b.n	800cfd2 <_printf_i+0x212>
 800cffa:	2500      	movs	r5, #0
 800cffc:	f104 0619 	add.w	r6, r4, #25
 800d000:	e7f5      	b.n	800cfee <_printf_i+0x22e>
 800d002:	bf00      	nop
 800d004:	0800f642 	.word	0x0800f642
 800d008:	0800f653 	.word	0x0800f653

0800d00c <siprintf>:
 800d00c:	b40e      	push	{r1, r2, r3}
 800d00e:	b500      	push	{lr}
 800d010:	b09c      	sub	sp, #112	; 0x70
 800d012:	ab1d      	add	r3, sp, #116	; 0x74
 800d014:	9002      	str	r0, [sp, #8]
 800d016:	9006      	str	r0, [sp, #24]
 800d018:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d01c:	4809      	ldr	r0, [pc, #36]	; (800d044 <siprintf+0x38>)
 800d01e:	9107      	str	r1, [sp, #28]
 800d020:	9104      	str	r1, [sp, #16]
 800d022:	4909      	ldr	r1, [pc, #36]	; (800d048 <siprintf+0x3c>)
 800d024:	f853 2b04 	ldr.w	r2, [r3], #4
 800d028:	9105      	str	r1, [sp, #20]
 800d02a:	6800      	ldr	r0, [r0, #0]
 800d02c:	9301      	str	r3, [sp, #4]
 800d02e:	a902      	add	r1, sp, #8
 800d030:	f001 fb72 	bl	800e718 <_svfiprintf_r>
 800d034:	9b02      	ldr	r3, [sp, #8]
 800d036:	2200      	movs	r2, #0
 800d038:	701a      	strb	r2, [r3, #0]
 800d03a:	b01c      	add	sp, #112	; 0x70
 800d03c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d040:	b003      	add	sp, #12
 800d042:	4770      	bx	lr
 800d044:	20000478 	.word	0x20000478
 800d048:	ffff0208 	.word	0xffff0208

0800d04c <strcpy>:
 800d04c:	4603      	mov	r3, r0
 800d04e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d052:	f803 2b01 	strb.w	r2, [r3], #1
 800d056:	2a00      	cmp	r2, #0
 800d058:	d1f9      	bne.n	800d04e <strcpy+0x2>
 800d05a:	4770      	bx	lr

0800d05c <quorem>:
 800d05c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d060:	6903      	ldr	r3, [r0, #16]
 800d062:	690c      	ldr	r4, [r1, #16]
 800d064:	42a3      	cmp	r3, r4
 800d066:	4607      	mov	r7, r0
 800d068:	f2c0 8081 	blt.w	800d16e <quorem+0x112>
 800d06c:	3c01      	subs	r4, #1
 800d06e:	f101 0814 	add.w	r8, r1, #20
 800d072:	f100 0514 	add.w	r5, r0, #20
 800d076:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d07a:	9301      	str	r3, [sp, #4]
 800d07c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d080:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d084:	3301      	adds	r3, #1
 800d086:	429a      	cmp	r2, r3
 800d088:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d08c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d090:	fbb2 f6f3 	udiv	r6, r2, r3
 800d094:	d331      	bcc.n	800d0fa <quorem+0x9e>
 800d096:	f04f 0e00 	mov.w	lr, #0
 800d09a:	4640      	mov	r0, r8
 800d09c:	46ac      	mov	ip, r5
 800d09e:	46f2      	mov	sl, lr
 800d0a0:	f850 2b04 	ldr.w	r2, [r0], #4
 800d0a4:	b293      	uxth	r3, r2
 800d0a6:	fb06 e303 	mla	r3, r6, r3, lr
 800d0aa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d0ae:	b29b      	uxth	r3, r3
 800d0b0:	ebaa 0303 	sub.w	r3, sl, r3
 800d0b4:	f8dc a000 	ldr.w	sl, [ip]
 800d0b8:	0c12      	lsrs	r2, r2, #16
 800d0ba:	fa13 f38a 	uxtah	r3, r3, sl
 800d0be:	fb06 e202 	mla	r2, r6, r2, lr
 800d0c2:	9300      	str	r3, [sp, #0]
 800d0c4:	9b00      	ldr	r3, [sp, #0]
 800d0c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d0ca:	b292      	uxth	r2, r2
 800d0cc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d0d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d0d4:	f8bd 3000 	ldrh.w	r3, [sp]
 800d0d8:	4581      	cmp	r9, r0
 800d0da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d0de:	f84c 3b04 	str.w	r3, [ip], #4
 800d0e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d0e6:	d2db      	bcs.n	800d0a0 <quorem+0x44>
 800d0e8:	f855 300b 	ldr.w	r3, [r5, fp]
 800d0ec:	b92b      	cbnz	r3, 800d0fa <quorem+0x9e>
 800d0ee:	9b01      	ldr	r3, [sp, #4]
 800d0f0:	3b04      	subs	r3, #4
 800d0f2:	429d      	cmp	r5, r3
 800d0f4:	461a      	mov	r2, r3
 800d0f6:	d32e      	bcc.n	800d156 <quorem+0xfa>
 800d0f8:	613c      	str	r4, [r7, #16]
 800d0fa:	4638      	mov	r0, r7
 800d0fc:	f001 f8b8 	bl	800e270 <__mcmp>
 800d100:	2800      	cmp	r0, #0
 800d102:	db24      	blt.n	800d14e <quorem+0xf2>
 800d104:	3601      	adds	r6, #1
 800d106:	4628      	mov	r0, r5
 800d108:	f04f 0c00 	mov.w	ip, #0
 800d10c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d110:	f8d0 e000 	ldr.w	lr, [r0]
 800d114:	b293      	uxth	r3, r2
 800d116:	ebac 0303 	sub.w	r3, ip, r3
 800d11a:	0c12      	lsrs	r2, r2, #16
 800d11c:	fa13 f38e 	uxtah	r3, r3, lr
 800d120:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d124:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d128:	b29b      	uxth	r3, r3
 800d12a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d12e:	45c1      	cmp	r9, r8
 800d130:	f840 3b04 	str.w	r3, [r0], #4
 800d134:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d138:	d2e8      	bcs.n	800d10c <quorem+0xb0>
 800d13a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d13e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d142:	b922      	cbnz	r2, 800d14e <quorem+0xf2>
 800d144:	3b04      	subs	r3, #4
 800d146:	429d      	cmp	r5, r3
 800d148:	461a      	mov	r2, r3
 800d14a:	d30a      	bcc.n	800d162 <quorem+0x106>
 800d14c:	613c      	str	r4, [r7, #16]
 800d14e:	4630      	mov	r0, r6
 800d150:	b003      	add	sp, #12
 800d152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d156:	6812      	ldr	r2, [r2, #0]
 800d158:	3b04      	subs	r3, #4
 800d15a:	2a00      	cmp	r2, #0
 800d15c:	d1cc      	bne.n	800d0f8 <quorem+0x9c>
 800d15e:	3c01      	subs	r4, #1
 800d160:	e7c7      	b.n	800d0f2 <quorem+0x96>
 800d162:	6812      	ldr	r2, [r2, #0]
 800d164:	3b04      	subs	r3, #4
 800d166:	2a00      	cmp	r2, #0
 800d168:	d1f0      	bne.n	800d14c <quorem+0xf0>
 800d16a:	3c01      	subs	r4, #1
 800d16c:	e7eb      	b.n	800d146 <quorem+0xea>
 800d16e:	2000      	movs	r0, #0
 800d170:	e7ee      	b.n	800d150 <quorem+0xf4>
 800d172:	0000      	movs	r0, r0
 800d174:	0000      	movs	r0, r0
	...

0800d178 <_dtoa_r>:
 800d178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d17c:	ed2d 8b04 	vpush	{d8-d9}
 800d180:	ec57 6b10 	vmov	r6, r7, d0
 800d184:	b093      	sub	sp, #76	; 0x4c
 800d186:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d188:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d18c:	9106      	str	r1, [sp, #24]
 800d18e:	ee10 aa10 	vmov	sl, s0
 800d192:	4604      	mov	r4, r0
 800d194:	9209      	str	r2, [sp, #36]	; 0x24
 800d196:	930c      	str	r3, [sp, #48]	; 0x30
 800d198:	46bb      	mov	fp, r7
 800d19a:	b975      	cbnz	r5, 800d1ba <_dtoa_r+0x42>
 800d19c:	2010      	movs	r0, #16
 800d19e:	f000 fddd 	bl	800dd5c <malloc>
 800d1a2:	4602      	mov	r2, r0
 800d1a4:	6260      	str	r0, [r4, #36]	; 0x24
 800d1a6:	b920      	cbnz	r0, 800d1b2 <_dtoa_r+0x3a>
 800d1a8:	4ba7      	ldr	r3, [pc, #668]	; (800d448 <_dtoa_r+0x2d0>)
 800d1aa:	21ea      	movs	r1, #234	; 0xea
 800d1ac:	48a7      	ldr	r0, [pc, #668]	; (800d44c <_dtoa_r+0x2d4>)
 800d1ae:	f001 fbc3 	bl	800e938 <__assert_func>
 800d1b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d1b6:	6005      	str	r5, [r0, #0]
 800d1b8:	60c5      	str	r5, [r0, #12]
 800d1ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1bc:	6819      	ldr	r1, [r3, #0]
 800d1be:	b151      	cbz	r1, 800d1d6 <_dtoa_r+0x5e>
 800d1c0:	685a      	ldr	r2, [r3, #4]
 800d1c2:	604a      	str	r2, [r1, #4]
 800d1c4:	2301      	movs	r3, #1
 800d1c6:	4093      	lsls	r3, r2
 800d1c8:	608b      	str	r3, [r1, #8]
 800d1ca:	4620      	mov	r0, r4
 800d1cc:	f000 fe0e 	bl	800ddec <_Bfree>
 800d1d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	601a      	str	r2, [r3, #0]
 800d1d6:	1e3b      	subs	r3, r7, #0
 800d1d8:	bfaa      	itet	ge
 800d1da:	2300      	movge	r3, #0
 800d1dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d1e0:	f8c8 3000 	strge.w	r3, [r8]
 800d1e4:	4b9a      	ldr	r3, [pc, #616]	; (800d450 <_dtoa_r+0x2d8>)
 800d1e6:	bfbc      	itt	lt
 800d1e8:	2201      	movlt	r2, #1
 800d1ea:	f8c8 2000 	strlt.w	r2, [r8]
 800d1ee:	ea33 030b 	bics.w	r3, r3, fp
 800d1f2:	d11b      	bne.n	800d22c <_dtoa_r+0xb4>
 800d1f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d1f6:	f242 730f 	movw	r3, #9999	; 0x270f
 800d1fa:	6013      	str	r3, [r2, #0]
 800d1fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d200:	4333      	orrs	r3, r6
 800d202:	f000 8592 	beq.w	800dd2a <_dtoa_r+0xbb2>
 800d206:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d208:	b963      	cbnz	r3, 800d224 <_dtoa_r+0xac>
 800d20a:	4b92      	ldr	r3, [pc, #584]	; (800d454 <_dtoa_r+0x2dc>)
 800d20c:	e022      	b.n	800d254 <_dtoa_r+0xdc>
 800d20e:	4b92      	ldr	r3, [pc, #584]	; (800d458 <_dtoa_r+0x2e0>)
 800d210:	9301      	str	r3, [sp, #4]
 800d212:	3308      	adds	r3, #8
 800d214:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d216:	6013      	str	r3, [r2, #0]
 800d218:	9801      	ldr	r0, [sp, #4]
 800d21a:	b013      	add	sp, #76	; 0x4c
 800d21c:	ecbd 8b04 	vpop	{d8-d9}
 800d220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d224:	4b8b      	ldr	r3, [pc, #556]	; (800d454 <_dtoa_r+0x2dc>)
 800d226:	9301      	str	r3, [sp, #4]
 800d228:	3303      	adds	r3, #3
 800d22a:	e7f3      	b.n	800d214 <_dtoa_r+0x9c>
 800d22c:	2200      	movs	r2, #0
 800d22e:	2300      	movs	r3, #0
 800d230:	4650      	mov	r0, sl
 800d232:	4659      	mov	r1, fp
 800d234:	f7f3 fc50 	bl	8000ad8 <__aeabi_dcmpeq>
 800d238:	ec4b ab19 	vmov	d9, sl, fp
 800d23c:	4680      	mov	r8, r0
 800d23e:	b158      	cbz	r0, 800d258 <_dtoa_r+0xe0>
 800d240:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d242:	2301      	movs	r3, #1
 800d244:	6013      	str	r3, [r2, #0]
 800d246:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d248:	2b00      	cmp	r3, #0
 800d24a:	f000 856b 	beq.w	800dd24 <_dtoa_r+0xbac>
 800d24e:	4883      	ldr	r0, [pc, #524]	; (800d45c <_dtoa_r+0x2e4>)
 800d250:	6018      	str	r0, [r3, #0]
 800d252:	1e43      	subs	r3, r0, #1
 800d254:	9301      	str	r3, [sp, #4]
 800d256:	e7df      	b.n	800d218 <_dtoa_r+0xa0>
 800d258:	ec4b ab10 	vmov	d0, sl, fp
 800d25c:	aa10      	add	r2, sp, #64	; 0x40
 800d25e:	a911      	add	r1, sp, #68	; 0x44
 800d260:	4620      	mov	r0, r4
 800d262:	f001 f8ab 	bl	800e3bc <__d2b>
 800d266:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d26a:	ee08 0a10 	vmov	s16, r0
 800d26e:	2d00      	cmp	r5, #0
 800d270:	f000 8084 	beq.w	800d37c <_dtoa_r+0x204>
 800d274:	ee19 3a90 	vmov	r3, s19
 800d278:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d27c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d280:	4656      	mov	r6, sl
 800d282:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d286:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d28a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d28e:	4b74      	ldr	r3, [pc, #464]	; (800d460 <_dtoa_r+0x2e8>)
 800d290:	2200      	movs	r2, #0
 800d292:	4630      	mov	r0, r6
 800d294:	4639      	mov	r1, r7
 800d296:	f7f2 ffff 	bl	8000298 <__aeabi_dsub>
 800d29a:	a365      	add	r3, pc, #404	; (adr r3, 800d430 <_dtoa_r+0x2b8>)
 800d29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2a0:	f7f3 f9b2 	bl	8000608 <__aeabi_dmul>
 800d2a4:	a364      	add	r3, pc, #400	; (adr r3, 800d438 <_dtoa_r+0x2c0>)
 800d2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2aa:	f7f2 fff7 	bl	800029c <__adddf3>
 800d2ae:	4606      	mov	r6, r0
 800d2b0:	4628      	mov	r0, r5
 800d2b2:	460f      	mov	r7, r1
 800d2b4:	f7f3 f93e 	bl	8000534 <__aeabi_i2d>
 800d2b8:	a361      	add	r3, pc, #388	; (adr r3, 800d440 <_dtoa_r+0x2c8>)
 800d2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2be:	f7f3 f9a3 	bl	8000608 <__aeabi_dmul>
 800d2c2:	4602      	mov	r2, r0
 800d2c4:	460b      	mov	r3, r1
 800d2c6:	4630      	mov	r0, r6
 800d2c8:	4639      	mov	r1, r7
 800d2ca:	f7f2 ffe7 	bl	800029c <__adddf3>
 800d2ce:	4606      	mov	r6, r0
 800d2d0:	460f      	mov	r7, r1
 800d2d2:	f7f3 fc49 	bl	8000b68 <__aeabi_d2iz>
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	9000      	str	r0, [sp, #0]
 800d2da:	2300      	movs	r3, #0
 800d2dc:	4630      	mov	r0, r6
 800d2de:	4639      	mov	r1, r7
 800d2e0:	f7f3 fc04 	bl	8000aec <__aeabi_dcmplt>
 800d2e4:	b150      	cbz	r0, 800d2fc <_dtoa_r+0x184>
 800d2e6:	9800      	ldr	r0, [sp, #0]
 800d2e8:	f7f3 f924 	bl	8000534 <__aeabi_i2d>
 800d2ec:	4632      	mov	r2, r6
 800d2ee:	463b      	mov	r3, r7
 800d2f0:	f7f3 fbf2 	bl	8000ad8 <__aeabi_dcmpeq>
 800d2f4:	b910      	cbnz	r0, 800d2fc <_dtoa_r+0x184>
 800d2f6:	9b00      	ldr	r3, [sp, #0]
 800d2f8:	3b01      	subs	r3, #1
 800d2fa:	9300      	str	r3, [sp, #0]
 800d2fc:	9b00      	ldr	r3, [sp, #0]
 800d2fe:	2b16      	cmp	r3, #22
 800d300:	d85a      	bhi.n	800d3b8 <_dtoa_r+0x240>
 800d302:	9a00      	ldr	r2, [sp, #0]
 800d304:	4b57      	ldr	r3, [pc, #348]	; (800d464 <_dtoa_r+0x2ec>)
 800d306:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d30e:	ec51 0b19 	vmov	r0, r1, d9
 800d312:	f7f3 fbeb 	bl	8000aec <__aeabi_dcmplt>
 800d316:	2800      	cmp	r0, #0
 800d318:	d050      	beq.n	800d3bc <_dtoa_r+0x244>
 800d31a:	9b00      	ldr	r3, [sp, #0]
 800d31c:	3b01      	subs	r3, #1
 800d31e:	9300      	str	r3, [sp, #0]
 800d320:	2300      	movs	r3, #0
 800d322:	930b      	str	r3, [sp, #44]	; 0x2c
 800d324:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d326:	1b5d      	subs	r5, r3, r5
 800d328:	1e6b      	subs	r3, r5, #1
 800d32a:	9305      	str	r3, [sp, #20]
 800d32c:	bf45      	ittet	mi
 800d32e:	f1c5 0301 	rsbmi	r3, r5, #1
 800d332:	9304      	strmi	r3, [sp, #16]
 800d334:	2300      	movpl	r3, #0
 800d336:	2300      	movmi	r3, #0
 800d338:	bf4c      	ite	mi
 800d33a:	9305      	strmi	r3, [sp, #20]
 800d33c:	9304      	strpl	r3, [sp, #16]
 800d33e:	9b00      	ldr	r3, [sp, #0]
 800d340:	2b00      	cmp	r3, #0
 800d342:	db3d      	blt.n	800d3c0 <_dtoa_r+0x248>
 800d344:	9b05      	ldr	r3, [sp, #20]
 800d346:	9a00      	ldr	r2, [sp, #0]
 800d348:	920a      	str	r2, [sp, #40]	; 0x28
 800d34a:	4413      	add	r3, r2
 800d34c:	9305      	str	r3, [sp, #20]
 800d34e:	2300      	movs	r3, #0
 800d350:	9307      	str	r3, [sp, #28]
 800d352:	9b06      	ldr	r3, [sp, #24]
 800d354:	2b09      	cmp	r3, #9
 800d356:	f200 8089 	bhi.w	800d46c <_dtoa_r+0x2f4>
 800d35a:	2b05      	cmp	r3, #5
 800d35c:	bfc4      	itt	gt
 800d35e:	3b04      	subgt	r3, #4
 800d360:	9306      	strgt	r3, [sp, #24]
 800d362:	9b06      	ldr	r3, [sp, #24]
 800d364:	f1a3 0302 	sub.w	r3, r3, #2
 800d368:	bfcc      	ite	gt
 800d36a:	2500      	movgt	r5, #0
 800d36c:	2501      	movle	r5, #1
 800d36e:	2b03      	cmp	r3, #3
 800d370:	f200 8087 	bhi.w	800d482 <_dtoa_r+0x30a>
 800d374:	e8df f003 	tbb	[pc, r3]
 800d378:	59383a2d 	.word	0x59383a2d
 800d37c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d380:	441d      	add	r5, r3
 800d382:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d386:	2b20      	cmp	r3, #32
 800d388:	bfc1      	itttt	gt
 800d38a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d38e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d392:	fa0b f303 	lslgt.w	r3, fp, r3
 800d396:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d39a:	bfda      	itte	le
 800d39c:	f1c3 0320 	rsble	r3, r3, #32
 800d3a0:	fa06 f003 	lslle.w	r0, r6, r3
 800d3a4:	4318      	orrgt	r0, r3
 800d3a6:	f7f3 f8b5 	bl	8000514 <__aeabi_ui2d>
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	4606      	mov	r6, r0
 800d3ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d3b2:	3d01      	subs	r5, #1
 800d3b4:	930e      	str	r3, [sp, #56]	; 0x38
 800d3b6:	e76a      	b.n	800d28e <_dtoa_r+0x116>
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	e7b2      	b.n	800d322 <_dtoa_r+0x1aa>
 800d3bc:	900b      	str	r0, [sp, #44]	; 0x2c
 800d3be:	e7b1      	b.n	800d324 <_dtoa_r+0x1ac>
 800d3c0:	9b04      	ldr	r3, [sp, #16]
 800d3c2:	9a00      	ldr	r2, [sp, #0]
 800d3c4:	1a9b      	subs	r3, r3, r2
 800d3c6:	9304      	str	r3, [sp, #16]
 800d3c8:	4253      	negs	r3, r2
 800d3ca:	9307      	str	r3, [sp, #28]
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	930a      	str	r3, [sp, #40]	; 0x28
 800d3d0:	e7bf      	b.n	800d352 <_dtoa_r+0x1da>
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	9308      	str	r3, [sp, #32]
 800d3d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	dc55      	bgt.n	800d488 <_dtoa_r+0x310>
 800d3dc:	2301      	movs	r3, #1
 800d3de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d3e2:	461a      	mov	r2, r3
 800d3e4:	9209      	str	r2, [sp, #36]	; 0x24
 800d3e6:	e00c      	b.n	800d402 <_dtoa_r+0x28a>
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	e7f3      	b.n	800d3d4 <_dtoa_r+0x25c>
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d3f0:	9308      	str	r3, [sp, #32]
 800d3f2:	9b00      	ldr	r3, [sp, #0]
 800d3f4:	4413      	add	r3, r2
 800d3f6:	9302      	str	r3, [sp, #8]
 800d3f8:	3301      	adds	r3, #1
 800d3fa:	2b01      	cmp	r3, #1
 800d3fc:	9303      	str	r3, [sp, #12]
 800d3fe:	bfb8      	it	lt
 800d400:	2301      	movlt	r3, #1
 800d402:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d404:	2200      	movs	r2, #0
 800d406:	6042      	str	r2, [r0, #4]
 800d408:	2204      	movs	r2, #4
 800d40a:	f102 0614 	add.w	r6, r2, #20
 800d40e:	429e      	cmp	r6, r3
 800d410:	6841      	ldr	r1, [r0, #4]
 800d412:	d93d      	bls.n	800d490 <_dtoa_r+0x318>
 800d414:	4620      	mov	r0, r4
 800d416:	f000 fca9 	bl	800dd6c <_Balloc>
 800d41a:	9001      	str	r0, [sp, #4]
 800d41c:	2800      	cmp	r0, #0
 800d41e:	d13b      	bne.n	800d498 <_dtoa_r+0x320>
 800d420:	4b11      	ldr	r3, [pc, #68]	; (800d468 <_dtoa_r+0x2f0>)
 800d422:	4602      	mov	r2, r0
 800d424:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d428:	e6c0      	b.n	800d1ac <_dtoa_r+0x34>
 800d42a:	2301      	movs	r3, #1
 800d42c:	e7df      	b.n	800d3ee <_dtoa_r+0x276>
 800d42e:	bf00      	nop
 800d430:	636f4361 	.word	0x636f4361
 800d434:	3fd287a7 	.word	0x3fd287a7
 800d438:	8b60c8b3 	.word	0x8b60c8b3
 800d43c:	3fc68a28 	.word	0x3fc68a28
 800d440:	509f79fb 	.word	0x509f79fb
 800d444:	3fd34413 	.word	0x3fd34413
 800d448:	0800f671 	.word	0x0800f671
 800d44c:	0800f688 	.word	0x0800f688
 800d450:	7ff00000 	.word	0x7ff00000
 800d454:	0800f66d 	.word	0x0800f66d
 800d458:	0800f664 	.word	0x0800f664
 800d45c:	0800f641 	.word	0x0800f641
 800d460:	3ff80000 	.word	0x3ff80000
 800d464:	0800f778 	.word	0x0800f778
 800d468:	0800f6e3 	.word	0x0800f6e3
 800d46c:	2501      	movs	r5, #1
 800d46e:	2300      	movs	r3, #0
 800d470:	9306      	str	r3, [sp, #24]
 800d472:	9508      	str	r5, [sp, #32]
 800d474:	f04f 33ff 	mov.w	r3, #4294967295
 800d478:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d47c:	2200      	movs	r2, #0
 800d47e:	2312      	movs	r3, #18
 800d480:	e7b0      	b.n	800d3e4 <_dtoa_r+0x26c>
 800d482:	2301      	movs	r3, #1
 800d484:	9308      	str	r3, [sp, #32]
 800d486:	e7f5      	b.n	800d474 <_dtoa_r+0x2fc>
 800d488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d48a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d48e:	e7b8      	b.n	800d402 <_dtoa_r+0x28a>
 800d490:	3101      	adds	r1, #1
 800d492:	6041      	str	r1, [r0, #4]
 800d494:	0052      	lsls	r2, r2, #1
 800d496:	e7b8      	b.n	800d40a <_dtoa_r+0x292>
 800d498:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d49a:	9a01      	ldr	r2, [sp, #4]
 800d49c:	601a      	str	r2, [r3, #0]
 800d49e:	9b03      	ldr	r3, [sp, #12]
 800d4a0:	2b0e      	cmp	r3, #14
 800d4a2:	f200 809d 	bhi.w	800d5e0 <_dtoa_r+0x468>
 800d4a6:	2d00      	cmp	r5, #0
 800d4a8:	f000 809a 	beq.w	800d5e0 <_dtoa_r+0x468>
 800d4ac:	9b00      	ldr	r3, [sp, #0]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	dd32      	ble.n	800d518 <_dtoa_r+0x3a0>
 800d4b2:	4ab7      	ldr	r2, [pc, #732]	; (800d790 <_dtoa_r+0x618>)
 800d4b4:	f003 030f 	and.w	r3, r3, #15
 800d4b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d4bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d4c0:	9b00      	ldr	r3, [sp, #0]
 800d4c2:	05d8      	lsls	r0, r3, #23
 800d4c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d4c8:	d516      	bpl.n	800d4f8 <_dtoa_r+0x380>
 800d4ca:	4bb2      	ldr	r3, [pc, #712]	; (800d794 <_dtoa_r+0x61c>)
 800d4cc:	ec51 0b19 	vmov	r0, r1, d9
 800d4d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d4d4:	f7f3 f9c2 	bl	800085c <__aeabi_ddiv>
 800d4d8:	f007 070f 	and.w	r7, r7, #15
 800d4dc:	4682      	mov	sl, r0
 800d4de:	468b      	mov	fp, r1
 800d4e0:	2503      	movs	r5, #3
 800d4e2:	4eac      	ldr	r6, [pc, #688]	; (800d794 <_dtoa_r+0x61c>)
 800d4e4:	b957      	cbnz	r7, 800d4fc <_dtoa_r+0x384>
 800d4e6:	4642      	mov	r2, r8
 800d4e8:	464b      	mov	r3, r9
 800d4ea:	4650      	mov	r0, sl
 800d4ec:	4659      	mov	r1, fp
 800d4ee:	f7f3 f9b5 	bl	800085c <__aeabi_ddiv>
 800d4f2:	4682      	mov	sl, r0
 800d4f4:	468b      	mov	fp, r1
 800d4f6:	e028      	b.n	800d54a <_dtoa_r+0x3d2>
 800d4f8:	2502      	movs	r5, #2
 800d4fa:	e7f2      	b.n	800d4e2 <_dtoa_r+0x36a>
 800d4fc:	07f9      	lsls	r1, r7, #31
 800d4fe:	d508      	bpl.n	800d512 <_dtoa_r+0x39a>
 800d500:	4640      	mov	r0, r8
 800d502:	4649      	mov	r1, r9
 800d504:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d508:	f7f3 f87e 	bl	8000608 <__aeabi_dmul>
 800d50c:	3501      	adds	r5, #1
 800d50e:	4680      	mov	r8, r0
 800d510:	4689      	mov	r9, r1
 800d512:	107f      	asrs	r7, r7, #1
 800d514:	3608      	adds	r6, #8
 800d516:	e7e5      	b.n	800d4e4 <_dtoa_r+0x36c>
 800d518:	f000 809b 	beq.w	800d652 <_dtoa_r+0x4da>
 800d51c:	9b00      	ldr	r3, [sp, #0]
 800d51e:	4f9d      	ldr	r7, [pc, #628]	; (800d794 <_dtoa_r+0x61c>)
 800d520:	425e      	negs	r6, r3
 800d522:	4b9b      	ldr	r3, [pc, #620]	; (800d790 <_dtoa_r+0x618>)
 800d524:	f006 020f 	and.w	r2, r6, #15
 800d528:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d530:	ec51 0b19 	vmov	r0, r1, d9
 800d534:	f7f3 f868 	bl	8000608 <__aeabi_dmul>
 800d538:	1136      	asrs	r6, r6, #4
 800d53a:	4682      	mov	sl, r0
 800d53c:	468b      	mov	fp, r1
 800d53e:	2300      	movs	r3, #0
 800d540:	2502      	movs	r5, #2
 800d542:	2e00      	cmp	r6, #0
 800d544:	d17a      	bne.n	800d63c <_dtoa_r+0x4c4>
 800d546:	2b00      	cmp	r3, #0
 800d548:	d1d3      	bne.n	800d4f2 <_dtoa_r+0x37a>
 800d54a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	f000 8082 	beq.w	800d656 <_dtoa_r+0x4de>
 800d552:	4b91      	ldr	r3, [pc, #580]	; (800d798 <_dtoa_r+0x620>)
 800d554:	2200      	movs	r2, #0
 800d556:	4650      	mov	r0, sl
 800d558:	4659      	mov	r1, fp
 800d55a:	f7f3 fac7 	bl	8000aec <__aeabi_dcmplt>
 800d55e:	2800      	cmp	r0, #0
 800d560:	d079      	beq.n	800d656 <_dtoa_r+0x4de>
 800d562:	9b03      	ldr	r3, [sp, #12]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d076      	beq.n	800d656 <_dtoa_r+0x4de>
 800d568:	9b02      	ldr	r3, [sp, #8]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	dd36      	ble.n	800d5dc <_dtoa_r+0x464>
 800d56e:	9b00      	ldr	r3, [sp, #0]
 800d570:	4650      	mov	r0, sl
 800d572:	4659      	mov	r1, fp
 800d574:	1e5f      	subs	r7, r3, #1
 800d576:	2200      	movs	r2, #0
 800d578:	4b88      	ldr	r3, [pc, #544]	; (800d79c <_dtoa_r+0x624>)
 800d57a:	f7f3 f845 	bl	8000608 <__aeabi_dmul>
 800d57e:	9e02      	ldr	r6, [sp, #8]
 800d580:	4682      	mov	sl, r0
 800d582:	468b      	mov	fp, r1
 800d584:	3501      	adds	r5, #1
 800d586:	4628      	mov	r0, r5
 800d588:	f7f2 ffd4 	bl	8000534 <__aeabi_i2d>
 800d58c:	4652      	mov	r2, sl
 800d58e:	465b      	mov	r3, fp
 800d590:	f7f3 f83a 	bl	8000608 <__aeabi_dmul>
 800d594:	4b82      	ldr	r3, [pc, #520]	; (800d7a0 <_dtoa_r+0x628>)
 800d596:	2200      	movs	r2, #0
 800d598:	f7f2 fe80 	bl	800029c <__adddf3>
 800d59c:	46d0      	mov	r8, sl
 800d59e:	46d9      	mov	r9, fp
 800d5a0:	4682      	mov	sl, r0
 800d5a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d5a6:	2e00      	cmp	r6, #0
 800d5a8:	d158      	bne.n	800d65c <_dtoa_r+0x4e4>
 800d5aa:	4b7e      	ldr	r3, [pc, #504]	; (800d7a4 <_dtoa_r+0x62c>)
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	4640      	mov	r0, r8
 800d5b0:	4649      	mov	r1, r9
 800d5b2:	f7f2 fe71 	bl	8000298 <__aeabi_dsub>
 800d5b6:	4652      	mov	r2, sl
 800d5b8:	465b      	mov	r3, fp
 800d5ba:	4680      	mov	r8, r0
 800d5bc:	4689      	mov	r9, r1
 800d5be:	f7f3 fab3 	bl	8000b28 <__aeabi_dcmpgt>
 800d5c2:	2800      	cmp	r0, #0
 800d5c4:	f040 8295 	bne.w	800daf2 <_dtoa_r+0x97a>
 800d5c8:	4652      	mov	r2, sl
 800d5ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d5ce:	4640      	mov	r0, r8
 800d5d0:	4649      	mov	r1, r9
 800d5d2:	f7f3 fa8b 	bl	8000aec <__aeabi_dcmplt>
 800d5d6:	2800      	cmp	r0, #0
 800d5d8:	f040 8289 	bne.w	800daee <_dtoa_r+0x976>
 800d5dc:	ec5b ab19 	vmov	sl, fp, d9
 800d5e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	f2c0 8148 	blt.w	800d878 <_dtoa_r+0x700>
 800d5e8:	9a00      	ldr	r2, [sp, #0]
 800d5ea:	2a0e      	cmp	r2, #14
 800d5ec:	f300 8144 	bgt.w	800d878 <_dtoa_r+0x700>
 800d5f0:	4b67      	ldr	r3, [pc, #412]	; (800d790 <_dtoa_r+0x618>)
 800d5f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d5f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d5fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	f280 80d5 	bge.w	800d7ac <_dtoa_r+0x634>
 800d602:	9b03      	ldr	r3, [sp, #12]
 800d604:	2b00      	cmp	r3, #0
 800d606:	f300 80d1 	bgt.w	800d7ac <_dtoa_r+0x634>
 800d60a:	f040 826f 	bne.w	800daec <_dtoa_r+0x974>
 800d60e:	4b65      	ldr	r3, [pc, #404]	; (800d7a4 <_dtoa_r+0x62c>)
 800d610:	2200      	movs	r2, #0
 800d612:	4640      	mov	r0, r8
 800d614:	4649      	mov	r1, r9
 800d616:	f7f2 fff7 	bl	8000608 <__aeabi_dmul>
 800d61a:	4652      	mov	r2, sl
 800d61c:	465b      	mov	r3, fp
 800d61e:	f7f3 fa79 	bl	8000b14 <__aeabi_dcmpge>
 800d622:	9e03      	ldr	r6, [sp, #12]
 800d624:	4637      	mov	r7, r6
 800d626:	2800      	cmp	r0, #0
 800d628:	f040 8245 	bne.w	800dab6 <_dtoa_r+0x93e>
 800d62c:	9d01      	ldr	r5, [sp, #4]
 800d62e:	2331      	movs	r3, #49	; 0x31
 800d630:	f805 3b01 	strb.w	r3, [r5], #1
 800d634:	9b00      	ldr	r3, [sp, #0]
 800d636:	3301      	adds	r3, #1
 800d638:	9300      	str	r3, [sp, #0]
 800d63a:	e240      	b.n	800dabe <_dtoa_r+0x946>
 800d63c:	07f2      	lsls	r2, r6, #31
 800d63e:	d505      	bpl.n	800d64c <_dtoa_r+0x4d4>
 800d640:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d644:	f7f2 ffe0 	bl	8000608 <__aeabi_dmul>
 800d648:	3501      	adds	r5, #1
 800d64a:	2301      	movs	r3, #1
 800d64c:	1076      	asrs	r6, r6, #1
 800d64e:	3708      	adds	r7, #8
 800d650:	e777      	b.n	800d542 <_dtoa_r+0x3ca>
 800d652:	2502      	movs	r5, #2
 800d654:	e779      	b.n	800d54a <_dtoa_r+0x3d2>
 800d656:	9f00      	ldr	r7, [sp, #0]
 800d658:	9e03      	ldr	r6, [sp, #12]
 800d65a:	e794      	b.n	800d586 <_dtoa_r+0x40e>
 800d65c:	9901      	ldr	r1, [sp, #4]
 800d65e:	4b4c      	ldr	r3, [pc, #304]	; (800d790 <_dtoa_r+0x618>)
 800d660:	4431      	add	r1, r6
 800d662:	910d      	str	r1, [sp, #52]	; 0x34
 800d664:	9908      	ldr	r1, [sp, #32]
 800d666:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d66a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d66e:	2900      	cmp	r1, #0
 800d670:	d043      	beq.n	800d6fa <_dtoa_r+0x582>
 800d672:	494d      	ldr	r1, [pc, #308]	; (800d7a8 <_dtoa_r+0x630>)
 800d674:	2000      	movs	r0, #0
 800d676:	f7f3 f8f1 	bl	800085c <__aeabi_ddiv>
 800d67a:	4652      	mov	r2, sl
 800d67c:	465b      	mov	r3, fp
 800d67e:	f7f2 fe0b 	bl	8000298 <__aeabi_dsub>
 800d682:	9d01      	ldr	r5, [sp, #4]
 800d684:	4682      	mov	sl, r0
 800d686:	468b      	mov	fp, r1
 800d688:	4649      	mov	r1, r9
 800d68a:	4640      	mov	r0, r8
 800d68c:	f7f3 fa6c 	bl	8000b68 <__aeabi_d2iz>
 800d690:	4606      	mov	r6, r0
 800d692:	f7f2 ff4f 	bl	8000534 <__aeabi_i2d>
 800d696:	4602      	mov	r2, r0
 800d698:	460b      	mov	r3, r1
 800d69a:	4640      	mov	r0, r8
 800d69c:	4649      	mov	r1, r9
 800d69e:	f7f2 fdfb 	bl	8000298 <__aeabi_dsub>
 800d6a2:	3630      	adds	r6, #48	; 0x30
 800d6a4:	f805 6b01 	strb.w	r6, [r5], #1
 800d6a8:	4652      	mov	r2, sl
 800d6aa:	465b      	mov	r3, fp
 800d6ac:	4680      	mov	r8, r0
 800d6ae:	4689      	mov	r9, r1
 800d6b0:	f7f3 fa1c 	bl	8000aec <__aeabi_dcmplt>
 800d6b4:	2800      	cmp	r0, #0
 800d6b6:	d163      	bne.n	800d780 <_dtoa_r+0x608>
 800d6b8:	4642      	mov	r2, r8
 800d6ba:	464b      	mov	r3, r9
 800d6bc:	4936      	ldr	r1, [pc, #216]	; (800d798 <_dtoa_r+0x620>)
 800d6be:	2000      	movs	r0, #0
 800d6c0:	f7f2 fdea 	bl	8000298 <__aeabi_dsub>
 800d6c4:	4652      	mov	r2, sl
 800d6c6:	465b      	mov	r3, fp
 800d6c8:	f7f3 fa10 	bl	8000aec <__aeabi_dcmplt>
 800d6cc:	2800      	cmp	r0, #0
 800d6ce:	f040 80b5 	bne.w	800d83c <_dtoa_r+0x6c4>
 800d6d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d6d4:	429d      	cmp	r5, r3
 800d6d6:	d081      	beq.n	800d5dc <_dtoa_r+0x464>
 800d6d8:	4b30      	ldr	r3, [pc, #192]	; (800d79c <_dtoa_r+0x624>)
 800d6da:	2200      	movs	r2, #0
 800d6dc:	4650      	mov	r0, sl
 800d6de:	4659      	mov	r1, fp
 800d6e0:	f7f2 ff92 	bl	8000608 <__aeabi_dmul>
 800d6e4:	4b2d      	ldr	r3, [pc, #180]	; (800d79c <_dtoa_r+0x624>)
 800d6e6:	4682      	mov	sl, r0
 800d6e8:	468b      	mov	fp, r1
 800d6ea:	4640      	mov	r0, r8
 800d6ec:	4649      	mov	r1, r9
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	f7f2 ff8a 	bl	8000608 <__aeabi_dmul>
 800d6f4:	4680      	mov	r8, r0
 800d6f6:	4689      	mov	r9, r1
 800d6f8:	e7c6      	b.n	800d688 <_dtoa_r+0x510>
 800d6fa:	4650      	mov	r0, sl
 800d6fc:	4659      	mov	r1, fp
 800d6fe:	f7f2 ff83 	bl	8000608 <__aeabi_dmul>
 800d702:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d704:	9d01      	ldr	r5, [sp, #4]
 800d706:	930f      	str	r3, [sp, #60]	; 0x3c
 800d708:	4682      	mov	sl, r0
 800d70a:	468b      	mov	fp, r1
 800d70c:	4649      	mov	r1, r9
 800d70e:	4640      	mov	r0, r8
 800d710:	f7f3 fa2a 	bl	8000b68 <__aeabi_d2iz>
 800d714:	4606      	mov	r6, r0
 800d716:	f7f2 ff0d 	bl	8000534 <__aeabi_i2d>
 800d71a:	3630      	adds	r6, #48	; 0x30
 800d71c:	4602      	mov	r2, r0
 800d71e:	460b      	mov	r3, r1
 800d720:	4640      	mov	r0, r8
 800d722:	4649      	mov	r1, r9
 800d724:	f7f2 fdb8 	bl	8000298 <__aeabi_dsub>
 800d728:	f805 6b01 	strb.w	r6, [r5], #1
 800d72c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d72e:	429d      	cmp	r5, r3
 800d730:	4680      	mov	r8, r0
 800d732:	4689      	mov	r9, r1
 800d734:	f04f 0200 	mov.w	r2, #0
 800d738:	d124      	bne.n	800d784 <_dtoa_r+0x60c>
 800d73a:	4b1b      	ldr	r3, [pc, #108]	; (800d7a8 <_dtoa_r+0x630>)
 800d73c:	4650      	mov	r0, sl
 800d73e:	4659      	mov	r1, fp
 800d740:	f7f2 fdac 	bl	800029c <__adddf3>
 800d744:	4602      	mov	r2, r0
 800d746:	460b      	mov	r3, r1
 800d748:	4640      	mov	r0, r8
 800d74a:	4649      	mov	r1, r9
 800d74c:	f7f3 f9ec 	bl	8000b28 <__aeabi_dcmpgt>
 800d750:	2800      	cmp	r0, #0
 800d752:	d173      	bne.n	800d83c <_dtoa_r+0x6c4>
 800d754:	4652      	mov	r2, sl
 800d756:	465b      	mov	r3, fp
 800d758:	4913      	ldr	r1, [pc, #76]	; (800d7a8 <_dtoa_r+0x630>)
 800d75a:	2000      	movs	r0, #0
 800d75c:	f7f2 fd9c 	bl	8000298 <__aeabi_dsub>
 800d760:	4602      	mov	r2, r0
 800d762:	460b      	mov	r3, r1
 800d764:	4640      	mov	r0, r8
 800d766:	4649      	mov	r1, r9
 800d768:	f7f3 f9c0 	bl	8000aec <__aeabi_dcmplt>
 800d76c:	2800      	cmp	r0, #0
 800d76e:	f43f af35 	beq.w	800d5dc <_dtoa_r+0x464>
 800d772:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d774:	1e6b      	subs	r3, r5, #1
 800d776:	930f      	str	r3, [sp, #60]	; 0x3c
 800d778:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d77c:	2b30      	cmp	r3, #48	; 0x30
 800d77e:	d0f8      	beq.n	800d772 <_dtoa_r+0x5fa>
 800d780:	9700      	str	r7, [sp, #0]
 800d782:	e049      	b.n	800d818 <_dtoa_r+0x6a0>
 800d784:	4b05      	ldr	r3, [pc, #20]	; (800d79c <_dtoa_r+0x624>)
 800d786:	f7f2 ff3f 	bl	8000608 <__aeabi_dmul>
 800d78a:	4680      	mov	r8, r0
 800d78c:	4689      	mov	r9, r1
 800d78e:	e7bd      	b.n	800d70c <_dtoa_r+0x594>
 800d790:	0800f778 	.word	0x0800f778
 800d794:	0800f750 	.word	0x0800f750
 800d798:	3ff00000 	.word	0x3ff00000
 800d79c:	40240000 	.word	0x40240000
 800d7a0:	401c0000 	.word	0x401c0000
 800d7a4:	40140000 	.word	0x40140000
 800d7a8:	3fe00000 	.word	0x3fe00000
 800d7ac:	9d01      	ldr	r5, [sp, #4]
 800d7ae:	4656      	mov	r6, sl
 800d7b0:	465f      	mov	r7, fp
 800d7b2:	4642      	mov	r2, r8
 800d7b4:	464b      	mov	r3, r9
 800d7b6:	4630      	mov	r0, r6
 800d7b8:	4639      	mov	r1, r7
 800d7ba:	f7f3 f84f 	bl	800085c <__aeabi_ddiv>
 800d7be:	f7f3 f9d3 	bl	8000b68 <__aeabi_d2iz>
 800d7c2:	4682      	mov	sl, r0
 800d7c4:	f7f2 feb6 	bl	8000534 <__aeabi_i2d>
 800d7c8:	4642      	mov	r2, r8
 800d7ca:	464b      	mov	r3, r9
 800d7cc:	f7f2 ff1c 	bl	8000608 <__aeabi_dmul>
 800d7d0:	4602      	mov	r2, r0
 800d7d2:	460b      	mov	r3, r1
 800d7d4:	4630      	mov	r0, r6
 800d7d6:	4639      	mov	r1, r7
 800d7d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d7dc:	f7f2 fd5c 	bl	8000298 <__aeabi_dsub>
 800d7e0:	f805 6b01 	strb.w	r6, [r5], #1
 800d7e4:	9e01      	ldr	r6, [sp, #4]
 800d7e6:	9f03      	ldr	r7, [sp, #12]
 800d7e8:	1bae      	subs	r6, r5, r6
 800d7ea:	42b7      	cmp	r7, r6
 800d7ec:	4602      	mov	r2, r0
 800d7ee:	460b      	mov	r3, r1
 800d7f0:	d135      	bne.n	800d85e <_dtoa_r+0x6e6>
 800d7f2:	f7f2 fd53 	bl	800029c <__adddf3>
 800d7f6:	4642      	mov	r2, r8
 800d7f8:	464b      	mov	r3, r9
 800d7fa:	4606      	mov	r6, r0
 800d7fc:	460f      	mov	r7, r1
 800d7fe:	f7f3 f993 	bl	8000b28 <__aeabi_dcmpgt>
 800d802:	b9d0      	cbnz	r0, 800d83a <_dtoa_r+0x6c2>
 800d804:	4642      	mov	r2, r8
 800d806:	464b      	mov	r3, r9
 800d808:	4630      	mov	r0, r6
 800d80a:	4639      	mov	r1, r7
 800d80c:	f7f3 f964 	bl	8000ad8 <__aeabi_dcmpeq>
 800d810:	b110      	cbz	r0, 800d818 <_dtoa_r+0x6a0>
 800d812:	f01a 0f01 	tst.w	sl, #1
 800d816:	d110      	bne.n	800d83a <_dtoa_r+0x6c2>
 800d818:	4620      	mov	r0, r4
 800d81a:	ee18 1a10 	vmov	r1, s16
 800d81e:	f000 fae5 	bl	800ddec <_Bfree>
 800d822:	2300      	movs	r3, #0
 800d824:	9800      	ldr	r0, [sp, #0]
 800d826:	702b      	strb	r3, [r5, #0]
 800d828:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d82a:	3001      	adds	r0, #1
 800d82c:	6018      	str	r0, [r3, #0]
 800d82e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d830:	2b00      	cmp	r3, #0
 800d832:	f43f acf1 	beq.w	800d218 <_dtoa_r+0xa0>
 800d836:	601d      	str	r5, [r3, #0]
 800d838:	e4ee      	b.n	800d218 <_dtoa_r+0xa0>
 800d83a:	9f00      	ldr	r7, [sp, #0]
 800d83c:	462b      	mov	r3, r5
 800d83e:	461d      	mov	r5, r3
 800d840:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d844:	2a39      	cmp	r2, #57	; 0x39
 800d846:	d106      	bne.n	800d856 <_dtoa_r+0x6de>
 800d848:	9a01      	ldr	r2, [sp, #4]
 800d84a:	429a      	cmp	r2, r3
 800d84c:	d1f7      	bne.n	800d83e <_dtoa_r+0x6c6>
 800d84e:	9901      	ldr	r1, [sp, #4]
 800d850:	2230      	movs	r2, #48	; 0x30
 800d852:	3701      	adds	r7, #1
 800d854:	700a      	strb	r2, [r1, #0]
 800d856:	781a      	ldrb	r2, [r3, #0]
 800d858:	3201      	adds	r2, #1
 800d85a:	701a      	strb	r2, [r3, #0]
 800d85c:	e790      	b.n	800d780 <_dtoa_r+0x608>
 800d85e:	4ba6      	ldr	r3, [pc, #664]	; (800daf8 <_dtoa_r+0x980>)
 800d860:	2200      	movs	r2, #0
 800d862:	f7f2 fed1 	bl	8000608 <__aeabi_dmul>
 800d866:	2200      	movs	r2, #0
 800d868:	2300      	movs	r3, #0
 800d86a:	4606      	mov	r6, r0
 800d86c:	460f      	mov	r7, r1
 800d86e:	f7f3 f933 	bl	8000ad8 <__aeabi_dcmpeq>
 800d872:	2800      	cmp	r0, #0
 800d874:	d09d      	beq.n	800d7b2 <_dtoa_r+0x63a>
 800d876:	e7cf      	b.n	800d818 <_dtoa_r+0x6a0>
 800d878:	9a08      	ldr	r2, [sp, #32]
 800d87a:	2a00      	cmp	r2, #0
 800d87c:	f000 80d7 	beq.w	800da2e <_dtoa_r+0x8b6>
 800d880:	9a06      	ldr	r2, [sp, #24]
 800d882:	2a01      	cmp	r2, #1
 800d884:	f300 80ba 	bgt.w	800d9fc <_dtoa_r+0x884>
 800d888:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d88a:	2a00      	cmp	r2, #0
 800d88c:	f000 80b2 	beq.w	800d9f4 <_dtoa_r+0x87c>
 800d890:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d894:	9e07      	ldr	r6, [sp, #28]
 800d896:	9d04      	ldr	r5, [sp, #16]
 800d898:	9a04      	ldr	r2, [sp, #16]
 800d89a:	441a      	add	r2, r3
 800d89c:	9204      	str	r2, [sp, #16]
 800d89e:	9a05      	ldr	r2, [sp, #20]
 800d8a0:	2101      	movs	r1, #1
 800d8a2:	441a      	add	r2, r3
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	9205      	str	r2, [sp, #20]
 800d8a8:	f000 fb58 	bl	800df5c <__i2b>
 800d8ac:	4607      	mov	r7, r0
 800d8ae:	2d00      	cmp	r5, #0
 800d8b0:	dd0c      	ble.n	800d8cc <_dtoa_r+0x754>
 800d8b2:	9b05      	ldr	r3, [sp, #20]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	dd09      	ble.n	800d8cc <_dtoa_r+0x754>
 800d8b8:	42ab      	cmp	r3, r5
 800d8ba:	9a04      	ldr	r2, [sp, #16]
 800d8bc:	bfa8      	it	ge
 800d8be:	462b      	movge	r3, r5
 800d8c0:	1ad2      	subs	r2, r2, r3
 800d8c2:	9204      	str	r2, [sp, #16]
 800d8c4:	9a05      	ldr	r2, [sp, #20]
 800d8c6:	1aed      	subs	r5, r5, r3
 800d8c8:	1ad3      	subs	r3, r2, r3
 800d8ca:	9305      	str	r3, [sp, #20]
 800d8cc:	9b07      	ldr	r3, [sp, #28]
 800d8ce:	b31b      	cbz	r3, 800d918 <_dtoa_r+0x7a0>
 800d8d0:	9b08      	ldr	r3, [sp, #32]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	f000 80af 	beq.w	800da36 <_dtoa_r+0x8be>
 800d8d8:	2e00      	cmp	r6, #0
 800d8da:	dd13      	ble.n	800d904 <_dtoa_r+0x78c>
 800d8dc:	4639      	mov	r1, r7
 800d8de:	4632      	mov	r2, r6
 800d8e0:	4620      	mov	r0, r4
 800d8e2:	f000 fbfb 	bl	800e0dc <__pow5mult>
 800d8e6:	ee18 2a10 	vmov	r2, s16
 800d8ea:	4601      	mov	r1, r0
 800d8ec:	4607      	mov	r7, r0
 800d8ee:	4620      	mov	r0, r4
 800d8f0:	f000 fb4a 	bl	800df88 <__multiply>
 800d8f4:	ee18 1a10 	vmov	r1, s16
 800d8f8:	4680      	mov	r8, r0
 800d8fa:	4620      	mov	r0, r4
 800d8fc:	f000 fa76 	bl	800ddec <_Bfree>
 800d900:	ee08 8a10 	vmov	s16, r8
 800d904:	9b07      	ldr	r3, [sp, #28]
 800d906:	1b9a      	subs	r2, r3, r6
 800d908:	d006      	beq.n	800d918 <_dtoa_r+0x7a0>
 800d90a:	ee18 1a10 	vmov	r1, s16
 800d90e:	4620      	mov	r0, r4
 800d910:	f000 fbe4 	bl	800e0dc <__pow5mult>
 800d914:	ee08 0a10 	vmov	s16, r0
 800d918:	2101      	movs	r1, #1
 800d91a:	4620      	mov	r0, r4
 800d91c:	f000 fb1e 	bl	800df5c <__i2b>
 800d920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d922:	2b00      	cmp	r3, #0
 800d924:	4606      	mov	r6, r0
 800d926:	f340 8088 	ble.w	800da3a <_dtoa_r+0x8c2>
 800d92a:	461a      	mov	r2, r3
 800d92c:	4601      	mov	r1, r0
 800d92e:	4620      	mov	r0, r4
 800d930:	f000 fbd4 	bl	800e0dc <__pow5mult>
 800d934:	9b06      	ldr	r3, [sp, #24]
 800d936:	2b01      	cmp	r3, #1
 800d938:	4606      	mov	r6, r0
 800d93a:	f340 8081 	ble.w	800da40 <_dtoa_r+0x8c8>
 800d93e:	f04f 0800 	mov.w	r8, #0
 800d942:	6933      	ldr	r3, [r6, #16]
 800d944:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d948:	6918      	ldr	r0, [r3, #16]
 800d94a:	f000 fab7 	bl	800debc <__hi0bits>
 800d94e:	f1c0 0020 	rsb	r0, r0, #32
 800d952:	9b05      	ldr	r3, [sp, #20]
 800d954:	4418      	add	r0, r3
 800d956:	f010 001f 	ands.w	r0, r0, #31
 800d95a:	f000 8092 	beq.w	800da82 <_dtoa_r+0x90a>
 800d95e:	f1c0 0320 	rsb	r3, r0, #32
 800d962:	2b04      	cmp	r3, #4
 800d964:	f340 808a 	ble.w	800da7c <_dtoa_r+0x904>
 800d968:	f1c0 001c 	rsb	r0, r0, #28
 800d96c:	9b04      	ldr	r3, [sp, #16]
 800d96e:	4403      	add	r3, r0
 800d970:	9304      	str	r3, [sp, #16]
 800d972:	9b05      	ldr	r3, [sp, #20]
 800d974:	4403      	add	r3, r0
 800d976:	4405      	add	r5, r0
 800d978:	9305      	str	r3, [sp, #20]
 800d97a:	9b04      	ldr	r3, [sp, #16]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	dd07      	ble.n	800d990 <_dtoa_r+0x818>
 800d980:	ee18 1a10 	vmov	r1, s16
 800d984:	461a      	mov	r2, r3
 800d986:	4620      	mov	r0, r4
 800d988:	f000 fc02 	bl	800e190 <__lshift>
 800d98c:	ee08 0a10 	vmov	s16, r0
 800d990:	9b05      	ldr	r3, [sp, #20]
 800d992:	2b00      	cmp	r3, #0
 800d994:	dd05      	ble.n	800d9a2 <_dtoa_r+0x82a>
 800d996:	4631      	mov	r1, r6
 800d998:	461a      	mov	r2, r3
 800d99a:	4620      	mov	r0, r4
 800d99c:	f000 fbf8 	bl	800e190 <__lshift>
 800d9a0:	4606      	mov	r6, r0
 800d9a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d06e      	beq.n	800da86 <_dtoa_r+0x90e>
 800d9a8:	ee18 0a10 	vmov	r0, s16
 800d9ac:	4631      	mov	r1, r6
 800d9ae:	f000 fc5f 	bl	800e270 <__mcmp>
 800d9b2:	2800      	cmp	r0, #0
 800d9b4:	da67      	bge.n	800da86 <_dtoa_r+0x90e>
 800d9b6:	9b00      	ldr	r3, [sp, #0]
 800d9b8:	3b01      	subs	r3, #1
 800d9ba:	ee18 1a10 	vmov	r1, s16
 800d9be:	9300      	str	r3, [sp, #0]
 800d9c0:	220a      	movs	r2, #10
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	4620      	mov	r0, r4
 800d9c6:	f000 fa33 	bl	800de30 <__multadd>
 800d9ca:	9b08      	ldr	r3, [sp, #32]
 800d9cc:	ee08 0a10 	vmov	s16, r0
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	f000 81b1 	beq.w	800dd38 <_dtoa_r+0xbc0>
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	4639      	mov	r1, r7
 800d9da:	220a      	movs	r2, #10
 800d9dc:	4620      	mov	r0, r4
 800d9de:	f000 fa27 	bl	800de30 <__multadd>
 800d9e2:	9b02      	ldr	r3, [sp, #8]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	4607      	mov	r7, r0
 800d9e8:	f300 808e 	bgt.w	800db08 <_dtoa_r+0x990>
 800d9ec:	9b06      	ldr	r3, [sp, #24]
 800d9ee:	2b02      	cmp	r3, #2
 800d9f0:	dc51      	bgt.n	800da96 <_dtoa_r+0x91e>
 800d9f2:	e089      	b.n	800db08 <_dtoa_r+0x990>
 800d9f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d9f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d9fa:	e74b      	b.n	800d894 <_dtoa_r+0x71c>
 800d9fc:	9b03      	ldr	r3, [sp, #12]
 800d9fe:	1e5e      	subs	r6, r3, #1
 800da00:	9b07      	ldr	r3, [sp, #28]
 800da02:	42b3      	cmp	r3, r6
 800da04:	bfbf      	itttt	lt
 800da06:	9b07      	ldrlt	r3, [sp, #28]
 800da08:	9607      	strlt	r6, [sp, #28]
 800da0a:	1af2      	sublt	r2, r6, r3
 800da0c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800da0e:	bfb6      	itet	lt
 800da10:	189b      	addlt	r3, r3, r2
 800da12:	1b9e      	subge	r6, r3, r6
 800da14:	930a      	strlt	r3, [sp, #40]	; 0x28
 800da16:	9b03      	ldr	r3, [sp, #12]
 800da18:	bfb8      	it	lt
 800da1a:	2600      	movlt	r6, #0
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	bfb7      	itett	lt
 800da20:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800da24:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800da28:	1a9d      	sublt	r5, r3, r2
 800da2a:	2300      	movlt	r3, #0
 800da2c:	e734      	b.n	800d898 <_dtoa_r+0x720>
 800da2e:	9e07      	ldr	r6, [sp, #28]
 800da30:	9d04      	ldr	r5, [sp, #16]
 800da32:	9f08      	ldr	r7, [sp, #32]
 800da34:	e73b      	b.n	800d8ae <_dtoa_r+0x736>
 800da36:	9a07      	ldr	r2, [sp, #28]
 800da38:	e767      	b.n	800d90a <_dtoa_r+0x792>
 800da3a:	9b06      	ldr	r3, [sp, #24]
 800da3c:	2b01      	cmp	r3, #1
 800da3e:	dc18      	bgt.n	800da72 <_dtoa_r+0x8fa>
 800da40:	f1ba 0f00 	cmp.w	sl, #0
 800da44:	d115      	bne.n	800da72 <_dtoa_r+0x8fa>
 800da46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800da4a:	b993      	cbnz	r3, 800da72 <_dtoa_r+0x8fa>
 800da4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800da50:	0d1b      	lsrs	r3, r3, #20
 800da52:	051b      	lsls	r3, r3, #20
 800da54:	b183      	cbz	r3, 800da78 <_dtoa_r+0x900>
 800da56:	9b04      	ldr	r3, [sp, #16]
 800da58:	3301      	adds	r3, #1
 800da5a:	9304      	str	r3, [sp, #16]
 800da5c:	9b05      	ldr	r3, [sp, #20]
 800da5e:	3301      	adds	r3, #1
 800da60:	9305      	str	r3, [sp, #20]
 800da62:	f04f 0801 	mov.w	r8, #1
 800da66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da68:	2b00      	cmp	r3, #0
 800da6a:	f47f af6a 	bne.w	800d942 <_dtoa_r+0x7ca>
 800da6e:	2001      	movs	r0, #1
 800da70:	e76f      	b.n	800d952 <_dtoa_r+0x7da>
 800da72:	f04f 0800 	mov.w	r8, #0
 800da76:	e7f6      	b.n	800da66 <_dtoa_r+0x8ee>
 800da78:	4698      	mov	r8, r3
 800da7a:	e7f4      	b.n	800da66 <_dtoa_r+0x8ee>
 800da7c:	f43f af7d 	beq.w	800d97a <_dtoa_r+0x802>
 800da80:	4618      	mov	r0, r3
 800da82:	301c      	adds	r0, #28
 800da84:	e772      	b.n	800d96c <_dtoa_r+0x7f4>
 800da86:	9b03      	ldr	r3, [sp, #12]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	dc37      	bgt.n	800dafc <_dtoa_r+0x984>
 800da8c:	9b06      	ldr	r3, [sp, #24]
 800da8e:	2b02      	cmp	r3, #2
 800da90:	dd34      	ble.n	800dafc <_dtoa_r+0x984>
 800da92:	9b03      	ldr	r3, [sp, #12]
 800da94:	9302      	str	r3, [sp, #8]
 800da96:	9b02      	ldr	r3, [sp, #8]
 800da98:	b96b      	cbnz	r3, 800dab6 <_dtoa_r+0x93e>
 800da9a:	4631      	mov	r1, r6
 800da9c:	2205      	movs	r2, #5
 800da9e:	4620      	mov	r0, r4
 800daa0:	f000 f9c6 	bl	800de30 <__multadd>
 800daa4:	4601      	mov	r1, r0
 800daa6:	4606      	mov	r6, r0
 800daa8:	ee18 0a10 	vmov	r0, s16
 800daac:	f000 fbe0 	bl	800e270 <__mcmp>
 800dab0:	2800      	cmp	r0, #0
 800dab2:	f73f adbb 	bgt.w	800d62c <_dtoa_r+0x4b4>
 800dab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dab8:	9d01      	ldr	r5, [sp, #4]
 800daba:	43db      	mvns	r3, r3
 800dabc:	9300      	str	r3, [sp, #0]
 800dabe:	f04f 0800 	mov.w	r8, #0
 800dac2:	4631      	mov	r1, r6
 800dac4:	4620      	mov	r0, r4
 800dac6:	f000 f991 	bl	800ddec <_Bfree>
 800daca:	2f00      	cmp	r7, #0
 800dacc:	f43f aea4 	beq.w	800d818 <_dtoa_r+0x6a0>
 800dad0:	f1b8 0f00 	cmp.w	r8, #0
 800dad4:	d005      	beq.n	800dae2 <_dtoa_r+0x96a>
 800dad6:	45b8      	cmp	r8, r7
 800dad8:	d003      	beq.n	800dae2 <_dtoa_r+0x96a>
 800dada:	4641      	mov	r1, r8
 800dadc:	4620      	mov	r0, r4
 800dade:	f000 f985 	bl	800ddec <_Bfree>
 800dae2:	4639      	mov	r1, r7
 800dae4:	4620      	mov	r0, r4
 800dae6:	f000 f981 	bl	800ddec <_Bfree>
 800daea:	e695      	b.n	800d818 <_dtoa_r+0x6a0>
 800daec:	2600      	movs	r6, #0
 800daee:	4637      	mov	r7, r6
 800daf0:	e7e1      	b.n	800dab6 <_dtoa_r+0x93e>
 800daf2:	9700      	str	r7, [sp, #0]
 800daf4:	4637      	mov	r7, r6
 800daf6:	e599      	b.n	800d62c <_dtoa_r+0x4b4>
 800daf8:	40240000 	.word	0x40240000
 800dafc:	9b08      	ldr	r3, [sp, #32]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	f000 80ca 	beq.w	800dc98 <_dtoa_r+0xb20>
 800db04:	9b03      	ldr	r3, [sp, #12]
 800db06:	9302      	str	r3, [sp, #8]
 800db08:	2d00      	cmp	r5, #0
 800db0a:	dd05      	ble.n	800db18 <_dtoa_r+0x9a0>
 800db0c:	4639      	mov	r1, r7
 800db0e:	462a      	mov	r2, r5
 800db10:	4620      	mov	r0, r4
 800db12:	f000 fb3d 	bl	800e190 <__lshift>
 800db16:	4607      	mov	r7, r0
 800db18:	f1b8 0f00 	cmp.w	r8, #0
 800db1c:	d05b      	beq.n	800dbd6 <_dtoa_r+0xa5e>
 800db1e:	6879      	ldr	r1, [r7, #4]
 800db20:	4620      	mov	r0, r4
 800db22:	f000 f923 	bl	800dd6c <_Balloc>
 800db26:	4605      	mov	r5, r0
 800db28:	b928      	cbnz	r0, 800db36 <_dtoa_r+0x9be>
 800db2a:	4b87      	ldr	r3, [pc, #540]	; (800dd48 <_dtoa_r+0xbd0>)
 800db2c:	4602      	mov	r2, r0
 800db2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800db32:	f7ff bb3b 	b.w	800d1ac <_dtoa_r+0x34>
 800db36:	693a      	ldr	r2, [r7, #16]
 800db38:	3202      	adds	r2, #2
 800db3a:	0092      	lsls	r2, r2, #2
 800db3c:	f107 010c 	add.w	r1, r7, #12
 800db40:	300c      	adds	r0, #12
 800db42:	f7fe fde3 	bl	800c70c <memcpy>
 800db46:	2201      	movs	r2, #1
 800db48:	4629      	mov	r1, r5
 800db4a:	4620      	mov	r0, r4
 800db4c:	f000 fb20 	bl	800e190 <__lshift>
 800db50:	9b01      	ldr	r3, [sp, #4]
 800db52:	f103 0901 	add.w	r9, r3, #1
 800db56:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800db5a:	4413      	add	r3, r2
 800db5c:	9305      	str	r3, [sp, #20]
 800db5e:	f00a 0301 	and.w	r3, sl, #1
 800db62:	46b8      	mov	r8, r7
 800db64:	9304      	str	r3, [sp, #16]
 800db66:	4607      	mov	r7, r0
 800db68:	4631      	mov	r1, r6
 800db6a:	ee18 0a10 	vmov	r0, s16
 800db6e:	f7ff fa75 	bl	800d05c <quorem>
 800db72:	4641      	mov	r1, r8
 800db74:	9002      	str	r0, [sp, #8]
 800db76:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800db7a:	ee18 0a10 	vmov	r0, s16
 800db7e:	f000 fb77 	bl	800e270 <__mcmp>
 800db82:	463a      	mov	r2, r7
 800db84:	9003      	str	r0, [sp, #12]
 800db86:	4631      	mov	r1, r6
 800db88:	4620      	mov	r0, r4
 800db8a:	f000 fb8d 	bl	800e2a8 <__mdiff>
 800db8e:	68c2      	ldr	r2, [r0, #12]
 800db90:	f109 3bff 	add.w	fp, r9, #4294967295
 800db94:	4605      	mov	r5, r0
 800db96:	bb02      	cbnz	r2, 800dbda <_dtoa_r+0xa62>
 800db98:	4601      	mov	r1, r0
 800db9a:	ee18 0a10 	vmov	r0, s16
 800db9e:	f000 fb67 	bl	800e270 <__mcmp>
 800dba2:	4602      	mov	r2, r0
 800dba4:	4629      	mov	r1, r5
 800dba6:	4620      	mov	r0, r4
 800dba8:	9207      	str	r2, [sp, #28]
 800dbaa:	f000 f91f 	bl	800ddec <_Bfree>
 800dbae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800dbb2:	ea43 0102 	orr.w	r1, r3, r2
 800dbb6:	9b04      	ldr	r3, [sp, #16]
 800dbb8:	430b      	orrs	r3, r1
 800dbba:	464d      	mov	r5, r9
 800dbbc:	d10f      	bne.n	800dbde <_dtoa_r+0xa66>
 800dbbe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dbc2:	d02a      	beq.n	800dc1a <_dtoa_r+0xaa2>
 800dbc4:	9b03      	ldr	r3, [sp, #12]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	dd02      	ble.n	800dbd0 <_dtoa_r+0xa58>
 800dbca:	9b02      	ldr	r3, [sp, #8]
 800dbcc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800dbd0:	f88b a000 	strb.w	sl, [fp]
 800dbd4:	e775      	b.n	800dac2 <_dtoa_r+0x94a>
 800dbd6:	4638      	mov	r0, r7
 800dbd8:	e7ba      	b.n	800db50 <_dtoa_r+0x9d8>
 800dbda:	2201      	movs	r2, #1
 800dbdc:	e7e2      	b.n	800dba4 <_dtoa_r+0xa2c>
 800dbde:	9b03      	ldr	r3, [sp, #12]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	db04      	blt.n	800dbee <_dtoa_r+0xa76>
 800dbe4:	9906      	ldr	r1, [sp, #24]
 800dbe6:	430b      	orrs	r3, r1
 800dbe8:	9904      	ldr	r1, [sp, #16]
 800dbea:	430b      	orrs	r3, r1
 800dbec:	d122      	bne.n	800dc34 <_dtoa_r+0xabc>
 800dbee:	2a00      	cmp	r2, #0
 800dbf0:	ddee      	ble.n	800dbd0 <_dtoa_r+0xa58>
 800dbf2:	ee18 1a10 	vmov	r1, s16
 800dbf6:	2201      	movs	r2, #1
 800dbf8:	4620      	mov	r0, r4
 800dbfa:	f000 fac9 	bl	800e190 <__lshift>
 800dbfe:	4631      	mov	r1, r6
 800dc00:	ee08 0a10 	vmov	s16, r0
 800dc04:	f000 fb34 	bl	800e270 <__mcmp>
 800dc08:	2800      	cmp	r0, #0
 800dc0a:	dc03      	bgt.n	800dc14 <_dtoa_r+0xa9c>
 800dc0c:	d1e0      	bne.n	800dbd0 <_dtoa_r+0xa58>
 800dc0e:	f01a 0f01 	tst.w	sl, #1
 800dc12:	d0dd      	beq.n	800dbd0 <_dtoa_r+0xa58>
 800dc14:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dc18:	d1d7      	bne.n	800dbca <_dtoa_r+0xa52>
 800dc1a:	2339      	movs	r3, #57	; 0x39
 800dc1c:	f88b 3000 	strb.w	r3, [fp]
 800dc20:	462b      	mov	r3, r5
 800dc22:	461d      	mov	r5, r3
 800dc24:	3b01      	subs	r3, #1
 800dc26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800dc2a:	2a39      	cmp	r2, #57	; 0x39
 800dc2c:	d071      	beq.n	800dd12 <_dtoa_r+0xb9a>
 800dc2e:	3201      	adds	r2, #1
 800dc30:	701a      	strb	r2, [r3, #0]
 800dc32:	e746      	b.n	800dac2 <_dtoa_r+0x94a>
 800dc34:	2a00      	cmp	r2, #0
 800dc36:	dd07      	ble.n	800dc48 <_dtoa_r+0xad0>
 800dc38:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dc3c:	d0ed      	beq.n	800dc1a <_dtoa_r+0xaa2>
 800dc3e:	f10a 0301 	add.w	r3, sl, #1
 800dc42:	f88b 3000 	strb.w	r3, [fp]
 800dc46:	e73c      	b.n	800dac2 <_dtoa_r+0x94a>
 800dc48:	9b05      	ldr	r3, [sp, #20]
 800dc4a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800dc4e:	4599      	cmp	r9, r3
 800dc50:	d047      	beq.n	800dce2 <_dtoa_r+0xb6a>
 800dc52:	ee18 1a10 	vmov	r1, s16
 800dc56:	2300      	movs	r3, #0
 800dc58:	220a      	movs	r2, #10
 800dc5a:	4620      	mov	r0, r4
 800dc5c:	f000 f8e8 	bl	800de30 <__multadd>
 800dc60:	45b8      	cmp	r8, r7
 800dc62:	ee08 0a10 	vmov	s16, r0
 800dc66:	f04f 0300 	mov.w	r3, #0
 800dc6a:	f04f 020a 	mov.w	r2, #10
 800dc6e:	4641      	mov	r1, r8
 800dc70:	4620      	mov	r0, r4
 800dc72:	d106      	bne.n	800dc82 <_dtoa_r+0xb0a>
 800dc74:	f000 f8dc 	bl	800de30 <__multadd>
 800dc78:	4680      	mov	r8, r0
 800dc7a:	4607      	mov	r7, r0
 800dc7c:	f109 0901 	add.w	r9, r9, #1
 800dc80:	e772      	b.n	800db68 <_dtoa_r+0x9f0>
 800dc82:	f000 f8d5 	bl	800de30 <__multadd>
 800dc86:	4639      	mov	r1, r7
 800dc88:	4680      	mov	r8, r0
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	220a      	movs	r2, #10
 800dc8e:	4620      	mov	r0, r4
 800dc90:	f000 f8ce 	bl	800de30 <__multadd>
 800dc94:	4607      	mov	r7, r0
 800dc96:	e7f1      	b.n	800dc7c <_dtoa_r+0xb04>
 800dc98:	9b03      	ldr	r3, [sp, #12]
 800dc9a:	9302      	str	r3, [sp, #8]
 800dc9c:	9d01      	ldr	r5, [sp, #4]
 800dc9e:	ee18 0a10 	vmov	r0, s16
 800dca2:	4631      	mov	r1, r6
 800dca4:	f7ff f9da 	bl	800d05c <quorem>
 800dca8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800dcac:	9b01      	ldr	r3, [sp, #4]
 800dcae:	f805 ab01 	strb.w	sl, [r5], #1
 800dcb2:	1aea      	subs	r2, r5, r3
 800dcb4:	9b02      	ldr	r3, [sp, #8]
 800dcb6:	4293      	cmp	r3, r2
 800dcb8:	dd09      	ble.n	800dcce <_dtoa_r+0xb56>
 800dcba:	ee18 1a10 	vmov	r1, s16
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	220a      	movs	r2, #10
 800dcc2:	4620      	mov	r0, r4
 800dcc4:	f000 f8b4 	bl	800de30 <__multadd>
 800dcc8:	ee08 0a10 	vmov	s16, r0
 800dccc:	e7e7      	b.n	800dc9e <_dtoa_r+0xb26>
 800dcce:	9b02      	ldr	r3, [sp, #8]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	bfc8      	it	gt
 800dcd4:	461d      	movgt	r5, r3
 800dcd6:	9b01      	ldr	r3, [sp, #4]
 800dcd8:	bfd8      	it	le
 800dcda:	2501      	movle	r5, #1
 800dcdc:	441d      	add	r5, r3
 800dcde:	f04f 0800 	mov.w	r8, #0
 800dce2:	ee18 1a10 	vmov	r1, s16
 800dce6:	2201      	movs	r2, #1
 800dce8:	4620      	mov	r0, r4
 800dcea:	f000 fa51 	bl	800e190 <__lshift>
 800dcee:	4631      	mov	r1, r6
 800dcf0:	ee08 0a10 	vmov	s16, r0
 800dcf4:	f000 fabc 	bl	800e270 <__mcmp>
 800dcf8:	2800      	cmp	r0, #0
 800dcfa:	dc91      	bgt.n	800dc20 <_dtoa_r+0xaa8>
 800dcfc:	d102      	bne.n	800dd04 <_dtoa_r+0xb8c>
 800dcfe:	f01a 0f01 	tst.w	sl, #1
 800dd02:	d18d      	bne.n	800dc20 <_dtoa_r+0xaa8>
 800dd04:	462b      	mov	r3, r5
 800dd06:	461d      	mov	r5, r3
 800dd08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dd0c:	2a30      	cmp	r2, #48	; 0x30
 800dd0e:	d0fa      	beq.n	800dd06 <_dtoa_r+0xb8e>
 800dd10:	e6d7      	b.n	800dac2 <_dtoa_r+0x94a>
 800dd12:	9a01      	ldr	r2, [sp, #4]
 800dd14:	429a      	cmp	r2, r3
 800dd16:	d184      	bne.n	800dc22 <_dtoa_r+0xaaa>
 800dd18:	9b00      	ldr	r3, [sp, #0]
 800dd1a:	3301      	adds	r3, #1
 800dd1c:	9300      	str	r3, [sp, #0]
 800dd1e:	2331      	movs	r3, #49	; 0x31
 800dd20:	7013      	strb	r3, [r2, #0]
 800dd22:	e6ce      	b.n	800dac2 <_dtoa_r+0x94a>
 800dd24:	4b09      	ldr	r3, [pc, #36]	; (800dd4c <_dtoa_r+0xbd4>)
 800dd26:	f7ff ba95 	b.w	800d254 <_dtoa_r+0xdc>
 800dd2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	f47f aa6e 	bne.w	800d20e <_dtoa_r+0x96>
 800dd32:	4b07      	ldr	r3, [pc, #28]	; (800dd50 <_dtoa_r+0xbd8>)
 800dd34:	f7ff ba8e 	b.w	800d254 <_dtoa_r+0xdc>
 800dd38:	9b02      	ldr	r3, [sp, #8]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	dcae      	bgt.n	800dc9c <_dtoa_r+0xb24>
 800dd3e:	9b06      	ldr	r3, [sp, #24]
 800dd40:	2b02      	cmp	r3, #2
 800dd42:	f73f aea8 	bgt.w	800da96 <_dtoa_r+0x91e>
 800dd46:	e7a9      	b.n	800dc9c <_dtoa_r+0xb24>
 800dd48:	0800f6e3 	.word	0x0800f6e3
 800dd4c:	0800f640 	.word	0x0800f640
 800dd50:	0800f664 	.word	0x0800f664

0800dd54 <_localeconv_r>:
 800dd54:	4800      	ldr	r0, [pc, #0]	; (800dd58 <_localeconv_r+0x4>)
 800dd56:	4770      	bx	lr
 800dd58:	200005cc 	.word	0x200005cc

0800dd5c <malloc>:
 800dd5c:	4b02      	ldr	r3, [pc, #8]	; (800dd68 <malloc+0xc>)
 800dd5e:	4601      	mov	r1, r0
 800dd60:	6818      	ldr	r0, [r3, #0]
 800dd62:	f000 bc09 	b.w	800e578 <_malloc_r>
 800dd66:	bf00      	nop
 800dd68:	20000478 	.word	0x20000478

0800dd6c <_Balloc>:
 800dd6c:	b570      	push	{r4, r5, r6, lr}
 800dd6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dd70:	4604      	mov	r4, r0
 800dd72:	460d      	mov	r5, r1
 800dd74:	b976      	cbnz	r6, 800dd94 <_Balloc+0x28>
 800dd76:	2010      	movs	r0, #16
 800dd78:	f7ff fff0 	bl	800dd5c <malloc>
 800dd7c:	4602      	mov	r2, r0
 800dd7e:	6260      	str	r0, [r4, #36]	; 0x24
 800dd80:	b920      	cbnz	r0, 800dd8c <_Balloc+0x20>
 800dd82:	4b18      	ldr	r3, [pc, #96]	; (800dde4 <_Balloc+0x78>)
 800dd84:	4818      	ldr	r0, [pc, #96]	; (800dde8 <_Balloc+0x7c>)
 800dd86:	2166      	movs	r1, #102	; 0x66
 800dd88:	f000 fdd6 	bl	800e938 <__assert_func>
 800dd8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dd90:	6006      	str	r6, [r0, #0]
 800dd92:	60c6      	str	r6, [r0, #12]
 800dd94:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800dd96:	68f3      	ldr	r3, [r6, #12]
 800dd98:	b183      	cbz	r3, 800ddbc <_Balloc+0x50>
 800dd9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd9c:	68db      	ldr	r3, [r3, #12]
 800dd9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dda2:	b9b8      	cbnz	r0, 800ddd4 <_Balloc+0x68>
 800dda4:	2101      	movs	r1, #1
 800dda6:	fa01 f605 	lsl.w	r6, r1, r5
 800ddaa:	1d72      	adds	r2, r6, #5
 800ddac:	0092      	lsls	r2, r2, #2
 800ddae:	4620      	mov	r0, r4
 800ddb0:	f000 fb60 	bl	800e474 <_calloc_r>
 800ddb4:	b160      	cbz	r0, 800ddd0 <_Balloc+0x64>
 800ddb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ddba:	e00e      	b.n	800ddda <_Balloc+0x6e>
 800ddbc:	2221      	movs	r2, #33	; 0x21
 800ddbe:	2104      	movs	r1, #4
 800ddc0:	4620      	mov	r0, r4
 800ddc2:	f000 fb57 	bl	800e474 <_calloc_r>
 800ddc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ddc8:	60f0      	str	r0, [r6, #12]
 800ddca:	68db      	ldr	r3, [r3, #12]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d1e4      	bne.n	800dd9a <_Balloc+0x2e>
 800ddd0:	2000      	movs	r0, #0
 800ddd2:	bd70      	pop	{r4, r5, r6, pc}
 800ddd4:	6802      	ldr	r2, [r0, #0]
 800ddd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ddda:	2300      	movs	r3, #0
 800dddc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dde0:	e7f7      	b.n	800ddd2 <_Balloc+0x66>
 800dde2:	bf00      	nop
 800dde4:	0800f671 	.word	0x0800f671
 800dde8:	0800f6f4 	.word	0x0800f6f4

0800ddec <_Bfree>:
 800ddec:	b570      	push	{r4, r5, r6, lr}
 800ddee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ddf0:	4605      	mov	r5, r0
 800ddf2:	460c      	mov	r4, r1
 800ddf4:	b976      	cbnz	r6, 800de14 <_Bfree+0x28>
 800ddf6:	2010      	movs	r0, #16
 800ddf8:	f7ff ffb0 	bl	800dd5c <malloc>
 800ddfc:	4602      	mov	r2, r0
 800ddfe:	6268      	str	r0, [r5, #36]	; 0x24
 800de00:	b920      	cbnz	r0, 800de0c <_Bfree+0x20>
 800de02:	4b09      	ldr	r3, [pc, #36]	; (800de28 <_Bfree+0x3c>)
 800de04:	4809      	ldr	r0, [pc, #36]	; (800de2c <_Bfree+0x40>)
 800de06:	218a      	movs	r1, #138	; 0x8a
 800de08:	f000 fd96 	bl	800e938 <__assert_func>
 800de0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800de10:	6006      	str	r6, [r0, #0]
 800de12:	60c6      	str	r6, [r0, #12]
 800de14:	b13c      	cbz	r4, 800de26 <_Bfree+0x3a>
 800de16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800de18:	6862      	ldr	r2, [r4, #4]
 800de1a:	68db      	ldr	r3, [r3, #12]
 800de1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800de20:	6021      	str	r1, [r4, #0]
 800de22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800de26:	bd70      	pop	{r4, r5, r6, pc}
 800de28:	0800f671 	.word	0x0800f671
 800de2c:	0800f6f4 	.word	0x0800f6f4

0800de30 <__multadd>:
 800de30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de34:	690d      	ldr	r5, [r1, #16]
 800de36:	4607      	mov	r7, r0
 800de38:	460c      	mov	r4, r1
 800de3a:	461e      	mov	r6, r3
 800de3c:	f101 0c14 	add.w	ip, r1, #20
 800de40:	2000      	movs	r0, #0
 800de42:	f8dc 3000 	ldr.w	r3, [ip]
 800de46:	b299      	uxth	r1, r3
 800de48:	fb02 6101 	mla	r1, r2, r1, r6
 800de4c:	0c1e      	lsrs	r6, r3, #16
 800de4e:	0c0b      	lsrs	r3, r1, #16
 800de50:	fb02 3306 	mla	r3, r2, r6, r3
 800de54:	b289      	uxth	r1, r1
 800de56:	3001      	adds	r0, #1
 800de58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800de5c:	4285      	cmp	r5, r0
 800de5e:	f84c 1b04 	str.w	r1, [ip], #4
 800de62:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800de66:	dcec      	bgt.n	800de42 <__multadd+0x12>
 800de68:	b30e      	cbz	r6, 800deae <__multadd+0x7e>
 800de6a:	68a3      	ldr	r3, [r4, #8]
 800de6c:	42ab      	cmp	r3, r5
 800de6e:	dc19      	bgt.n	800dea4 <__multadd+0x74>
 800de70:	6861      	ldr	r1, [r4, #4]
 800de72:	4638      	mov	r0, r7
 800de74:	3101      	adds	r1, #1
 800de76:	f7ff ff79 	bl	800dd6c <_Balloc>
 800de7a:	4680      	mov	r8, r0
 800de7c:	b928      	cbnz	r0, 800de8a <__multadd+0x5a>
 800de7e:	4602      	mov	r2, r0
 800de80:	4b0c      	ldr	r3, [pc, #48]	; (800deb4 <__multadd+0x84>)
 800de82:	480d      	ldr	r0, [pc, #52]	; (800deb8 <__multadd+0x88>)
 800de84:	21b5      	movs	r1, #181	; 0xb5
 800de86:	f000 fd57 	bl	800e938 <__assert_func>
 800de8a:	6922      	ldr	r2, [r4, #16]
 800de8c:	3202      	adds	r2, #2
 800de8e:	f104 010c 	add.w	r1, r4, #12
 800de92:	0092      	lsls	r2, r2, #2
 800de94:	300c      	adds	r0, #12
 800de96:	f7fe fc39 	bl	800c70c <memcpy>
 800de9a:	4621      	mov	r1, r4
 800de9c:	4638      	mov	r0, r7
 800de9e:	f7ff ffa5 	bl	800ddec <_Bfree>
 800dea2:	4644      	mov	r4, r8
 800dea4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dea8:	3501      	adds	r5, #1
 800deaa:	615e      	str	r6, [r3, #20]
 800deac:	6125      	str	r5, [r4, #16]
 800deae:	4620      	mov	r0, r4
 800deb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800deb4:	0800f6e3 	.word	0x0800f6e3
 800deb8:	0800f6f4 	.word	0x0800f6f4

0800debc <__hi0bits>:
 800debc:	0c03      	lsrs	r3, r0, #16
 800debe:	041b      	lsls	r3, r3, #16
 800dec0:	b9d3      	cbnz	r3, 800def8 <__hi0bits+0x3c>
 800dec2:	0400      	lsls	r0, r0, #16
 800dec4:	2310      	movs	r3, #16
 800dec6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800deca:	bf04      	itt	eq
 800decc:	0200      	lsleq	r0, r0, #8
 800dece:	3308      	addeq	r3, #8
 800ded0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ded4:	bf04      	itt	eq
 800ded6:	0100      	lsleq	r0, r0, #4
 800ded8:	3304      	addeq	r3, #4
 800deda:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dede:	bf04      	itt	eq
 800dee0:	0080      	lsleq	r0, r0, #2
 800dee2:	3302      	addeq	r3, #2
 800dee4:	2800      	cmp	r0, #0
 800dee6:	db05      	blt.n	800def4 <__hi0bits+0x38>
 800dee8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800deec:	f103 0301 	add.w	r3, r3, #1
 800def0:	bf08      	it	eq
 800def2:	2320      	moveq	r3, #32
 800def4:	4618      	mov	r0, r3
 800def6:	4770      	bx	lr
 800def8:	2300      	movs	r3, #0
 800defa:	e7e4      	b.n	800dec6 <__hi0bits+0xa>

0800defc <__lo0bits>:
 800defc:	6803      	ldr	r3, [r0, #0]
 800defe:	f013 0207 	ands.w	r2, r3, #7
 800df02:	4601      	mov	r1, r0
 800df04:	d00b      	beq.n	800df1e <__lo0bits+0x22>
 800df06:	07da      	lsls	r2, r3, #31
 800df08:	d423      	bmi.n	800df52 <__lo0bits+0x56>
 800df0a:	0798      	lsls	r0, r3, #30
 800df0c:	bf49      	itett	mi
 800df0e:	085b      	lsrmi	r3, r3, #1
 800df10:	089b      	lsrpl	r3, r3, #2
 800df12:	2001      	movmi	r0, #1
 800df14:	600b      	strmi	r3, [r1, #0]
 800df16:	bf5c      	itt	pl
 800df18:	600b      	strpl	r3, [r1, #0]
 800df1a:	2002      	movpl	r0, #2
 800df1c:	4770      	bx	lr
 800df1e:	b298      	uxth	r0, r3
 800df20:	b9a8      	cbnz	r0, 800df4e <__lo0bits+0x52>
 800df22:	0c1b      	lsrs	r3, r3, #16
 800df24:	2010      	movs	r0, #16
 800df26:	b2da      	uxtb	r2, r3
 800df28:	b90a      	cbnz	r2, 800df2e <__lo0bits+0x32>
 800df2a:	3008      	adds	r0, #8
 800df2c:	0a1b      	lsrs	r3, r3, #8
 800df2e:	071a      	lsls	r2, r3, #28
 800df30:	bf04      	itt	eq
 800df32:	091b      	lsreq	r3, r3, #4
 800df34:	3004      	addeq	r0, #4
 800df36:	079a      	lsls	r2, r3, #30
 800df38:	bf04      	itt	eq
 800df3a:	089b      	lsreq	r3, r3, #2
 800df3c:	3002      	addeq	r0, #2
 800df3e:	07da      	lsls	r2, r3, #31
 800df40:	d403      	bmi.n	800df4a <__lo0bits+0x4e>
 800df42:	085b      	lsrs	r3, r3, #1
 800df44:	f100 0001 	add.w	r0, r0, #1
 800df48:	d005      	beq.n	800df56 <__lo0bits+0x5a>
 800df4a:	600b      	str	r3, [r1, #0]
 800df4c:	4770      	bx	lr
 800df4e:	4610      	mov	r0, r2
 800df50:	e7e9      	b.n	800df26 <__lo0bits+0x2a>
 800df52:	2000      	movs	r0, #0
 800df54:	4770      	bx	lr
 800df56:	2020      	movs	r0, #32
 800df58:	4770      	bx	lr
	...

0800df5c <__i2b>:
 800df5c:	b510      	push	{r4, lr}
 800df5e:	460c      	mov	r4, r1
 800df60:	2101      	movs	r1, #1
 800df62:	f7ff ff03 	bl	800dd6c <_Balloc>
 800df66:	4602      	mov	r2, r0
 800df68:	b928      	cbnz	r0, 800df76 <__i2b+0x1a>
 800df6a:	4b05      	ldr	r3, [pc, #20]	; (800df80 <__i2b+0x24>)
 800df6c:	4805      	ldr	r0, [pc, #20]	; (800df84 <__i2b+0x28>)
 800df6e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800df72:	f000 fce1 	bl	800e938 <__assert_func>
 800df76:	2301      	movs	r3, #1
 800df78:	6144      	str	r4, [r0, #20]
 800df7a:	6103      	str	r3, [r0, #16]
 800df7c:	bd10      	pop	{r4, pc}
 800df7e:	bf00      	nop
 800df80:	0800f6e3 	.word	0x0800f6e3
 800df84:	0800f6f4 	.word	0x0800f6f4

0800df88 <__multiply>:
 800df88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df8c:	4691      	mov	r9, r2
 800df8e:	690a      	ldr	r2, [r1, #16]
 800df90:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800df94:	429a      	cmp	r2, r3
 800df96:	bfb8      	it	lt
 800df98:	460b      	movlt	r3, r1
 800df9a:	460c      	mov	r4, r1
 800df9c:	bfbc      	itt	lt
 800df9e:	464c      	movlt	r4, r9
 800dfa0:	4699      	movlt	r9, r3
 800dfa2:	6927      	ldr	r7, [r4, #16]
 800dfa4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dfa8:	68a3      	ldr	r3, [r4, #8]
 800dfaa:	6861      	ldr	r1, [r4, #4]
 800dfac:	eb07 060a 	add.w	r6, r7, sl
 800dfb0:	42b3      	cmp	r3, r6
 800dfb2:	b085      	sub	sp, #20
 800dfb4:	bfb8      	it	lt
 800dfb6:	3101      	addlt	r1, #1
 800dfb8:	f7ff fed8 	bl	800dd6c <_Balloc>
 800dfbc:	b930      	cbnz	r0, 800dfcc <__multiply+0x44>
 800dfbe:	4602      	mov	r2, r0
 800dfc0:	4b44      	ldr	r3, [pc, #272]	; (800e0d4 <__multiply+0x14c>)
 800dfc2:	4845      	ldr	r0, [pc, #276]	; (800e0d8 <__multiply+0x150>)
 800dfc4:	f240 115d 	movw	r1, #349	; 0x15d
 800dfc8:	f000 fcb6 	bl	800e938 <__assert_func>
 800dfcc:	f100 0514 	add.w	r5, r0, #20
 800dfd0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dfd4:	462b      	mov	r3, r5
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	4543      	cmp	r3, r8
 800dfda:	d321      	bcc.n	800e020 <__multiply+0x98>
 800dfdc:	f104 0314 	add.w	r3, r4, #20
 800dfe0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dfe4:	f109 0314 	add.w	r3, r9, #20
 800dfe8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dfec:	9202      	str	r2, [sp, #8]
 800dfee:	1b3a      	subs	r2, r7, r4
 800dff0:	3a15      	subs	r2, #21
 800dff2:	f022 0203 	bic.w	r2, r2, #3
 800dff6:	3204      	adds	r2, #4
 800dff8:	f104 0115 	add.w	r1, r4, #21
 800dffc:	428f      	cmp	r7, r1
 800dffe:	bf38      	it	cc
 800e000:	2204      	movcc	r2, #4
 800e002:	9201      	str	r2, [sp, #4]
 800e004:	9a02      	ldr	r2, [sp, #8]
 800e006:	9303      	str	r3, [sp, #12]
 800e008:	429a      	cmp	r2, r3
 800e00a:	d80c      	bhi.n	800e026 <__multiply+0x9e>
 800e00c:	2e00      	cmp	r6, #0
 800e00e:	dd03      	ble.n	800e018 <__multiply+0x90>
 800e010:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e014:	2b00      	cmp	r3, #0
 800e016:	d05a      	beq.n	800e0ce <__multiply+0x146>
 800e018:	6106      	str	r6, [r0, #16]
 800e01a:	b005      	add	sp, #20
 800e01c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e020:	f843 2b04 	str.w	r2, [r3], #4
 800e024:	e7d8      	b.n	800dfd8 <__multiply+0x50>
 800e026:	f8b3 a000 	ldrh.w	sl, [r3]
 800e02a:	f1ba 0f00 	cmp.w	sl, #0
 800e02e:	d024      	beq.n	800e07a <__multiply+0xf2>
 800e030:	f104 0e14 	add.w	lr, r4, #20
 800e034:	46a9      	mov	r9, r5
 800e036:	f04f 0c00 	mov.w	ip, #0
 800e03a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e03e:	f8d9 1000 	ldr.w	r1, [r9]
 800e042:	fa1f fb82 	uxth.w	fp, r2
 800e046:	b289      	uxth	r1, r1
 800e048:	fb0a 110b 	mla	r1, sl, fp, r1
 800e04c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e050:	f8d9 2000 	ldr.w	r2, [r9]
 800e054:	4461      	add	r1, ip
 800e056:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e05a:	fb0a c20b 	mla	r2, sl, fp, ip
 800e05e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e062:	b289      	uxth	r1, r1
 800e064:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e068:	4577      	cmp	r7, lr
 800e06a:	f849 1b04 	str.w	r1, [r9], #4
 800e06e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e072:	d8e2      	bhi.n	800e03a <__multiply+0xb2>
 800e074:	9a01      	ldr	r2, [sp, #4]
 800e076:	f845 c002 	str.w	ip, [r5, r2]
 800e07a:	9a03      	ldr	r2, [sp, #12]
 800e07c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e080:	3304      	adds	r3, #4
 800e082:	f1b9 0f00 	cmp.w	r9, #0
 800e086:	d020      	beq.n	800e0ca <__multiply+0x142>
 800e088:	6829      	ldr	r1, [r5, #0]
 800e08a:	f104 0c14 	add.w	ip, r4, #20
 800e08e:	46ae      	mov	lr, r5
 800e090:	f04f 0a00 	mov.w	sl, #0
 800e094:	f8bc b000 	ldrh.w	fp, [ip]
 800e098:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e09c:	fb09 220b 	mla	r2, r9, fp, r2
 800e0a0:	4492      	add	sl, r2
 800e0a2:	b289      	uxth	r1, r1
 800e0a4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e0a8:	f84e 1b04 	str.w	r1, [lr], #4
 800e0ac:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e0b0:	f8be 1000 	ldrh.w	r1, [lr]
 800e0b4:	0c12      	lsrs	r2, r2, #16
 800e0b6:	fb09 1102 	mla	r1, r9, r2, r1
 800e0ba:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e0be:	4567      	cmp	r7, ip
 800e0c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e0c4:	d8e6      	bhi.n	800e094 <__multiply+0x10c>
 800e0c6:	9a01      	ldr	r2, [sp, #4]
 800e0c8:	50a9      	str	r1, [r5, r2]
 800e0ca:	3504      	adds	r5, #4
 800e0cc:	e79a      	b.n	800e004 <__multiply+0x7c>
 800e0ce:	3e01      	subs	r6, #1
 800e0d0:	e79c      	b.n	800e00c <__multiply+0x84>
 800e0d2:	bf00      	nop
 800e0d4:	0800f6e3 	.word	0x0800f6e3
 800e0d8:	0800f6f4 	.word	0x0800f6f4

0800e0dc <__pow5mult>:
 800e0dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0e0:	4615      	mov	r5, r2
 800e0e2:	f012 0203 	ands.w	r2, r2, #3
 800e0e6:	4606      	mov	r6, r0
 800e0e8:	460f      	mov	r7, r1
 800e0ea:	d007      	beq.n	800e0fc <__pow5mult+0x20>
 800e0ec:	4c25      	ldr	r4, [pc, #148]	; (800e184 <__pow5mult+0xa8>)
 800e0ee:	3a01      	subs	r2, #1
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e0f6:	f7ff fe9b 	bl	800de30 <__multadd>
 800e0fa:	4607      	mov	r7, r0
 800e0fc:	10ad      	asrs	r5, r5, #2
 800e0fe:	d03d      	beq.n	800e17c <__pow5mult+0xa0>
 800e100:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e102:	b97c      	cbnz	r4, 800e124 <__pow5mult+0x48>
 800e104:	2010      	movs	r0, #16
 800e106:	f7ff fe29 	bl	800dd5c <malloc>
 800e10a:	4602      	mov	r2, r0
 800e10c:	6270      	str	r0, [r6, #36]	; 0x24
 800e10e:	b928      	cbnz	r0, 800e11c <__pow5mult+0x40>
 800e110:	4b1d      	ldr	r3, [pc, #116]	; (800e188 <__pow5mult+0xac>)
 800e112:	481e      	ldr	r0, [pc, #120]	; (800e18c <__pow5mult+0xb0>)
 800e114:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e118:	f000 fc0e 	bl	800e938 <__assert_func>
 800e11c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e120:	6004      	str	r4, [r0, #0]
 800e122:	60c4      	str	r4, [r0, #12]
 800e124:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e128:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e12c:	b94c      	cbnz	r4, 800e142 <__pow5mult+0x66>
 800e12e:	f240 2171 	movw	r1, #625	; 0x271
 800e132:	4630      	mov	r0, r6
 800e134:	f7ff ff12 	bl	800df5c <__i2b>
 800e138:	2300      	movs	r3, #0
 800e13a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e13e:	4604      	mov	r4, r0
 800e140:	6003      	str	r3, [r0, #0]
 800e142:	f04f 0900 	mov.w	r9, #0
 800e146:	07eb      	lsls	r3, r5, #31
 800e148:	d50a      	bpl.n	800e160 <__pow5mult+0x84>
 800e14a:	4639      	mov	r1, r7
 800e14c:	4622      	mov	r2, r4
 800e14e:	4630      	mov	r0, r6
 800e150:	f7ff ff1a 	bl	800df88 <__multiply>
 800e154:	4639      	mov	r1, r7
 800e156:	4680      	mov	r8, r0
 800e158:	4630      	mov	r0, r6
 800e15a:	f7ff fe47 	bl	800ddec <_Bfree>
 800e15e:	4647      	mov	r7, r8
 800e160:	106d      	asrs	r5, r5, #1
 800e162:	d00b      	beq.n	800e17c <__pow5mult+0xa0>
 800e164:	6820      	ldr	r0, [r4, #0]
 800e166:	b938      	cbnz	r0, 800e178 <__pow5mult+0x9c>
 800e168:	4622      	mov	r2, r4
 800e16a:	4621      	mov	r1, r4
 800e16c:	4630      	mov	r0, r6
 800e16e:	f7ff ff0b 	bl	800df88 <__multiply>
 800e172:	6020      	str	r0, [r4, #0]
 800e174:	f8c0 9000 	str.w	r9, [r0]
 800e178:	4604      	mov	r4, r0
 800e17a:	e7e4      	b.n	800e146 <__pow5mult+0x6a>
 800e17c:	4638      	mov	r0, r7
 800e17e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e182:	bf00      	nop
 800e184:	0800f840 	.word	0x0800f840
 800e188:	0800f671 	.word	0x0800f671
 800e18c:	0800f6f4 	.word	0x0800f6f4

0800e190 <__lshift>:
 800e190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e194:	460c      	mov	r4, r1
 800e196:	6849      	ldr	r1, [r1, #4]
 800e198:	6923      	ldr	r3, [r4, #16]
 800e19a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e19e:	68a3      	ldr	r3, [r4, #8]
 800e1a0:	4607      	mov	r7, r0
 800e1a2:	4691      	mov	r9, r2
 800e1a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e1a8:	f108 0601 	add.w	r6, r8, #1
 800e1ac:	42b3      	cmp	r3, r6
 800e1ae:	db0b      	blt.n	800e1c8 <__lshift+0x38>
 800e1b0:	4638      	mov	r0, r7
 800e1b2:	f7ff fddb 	bl	800dd6c <_Balloc>
 800e1b6:	4605      	mov	r5, r0
 800e1b8:	b948      	cbnz	r0, 800e1ce <__lshift+0x3e>
 800e1ba:	4602      	mov	r2, r0
 800e1bc:	4b2a      	ldr	r3, [pc, #168]	; (800e268 <__lshift+0xd8>)
 800e1be:	482b      	ldr	r0, [pc, #172]	; (800e26c <__lshift+0xdc>)
 800e1c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e1c4:	f000 fbb8 	bl	800e938 <__assert_func>
 800e1c8:	3101      	adds	r1, #1
 800e1ca:	005b      	lsls	r3, r3, #1
 800e1cc:	e7ee      	b.n	800e1ac <__lshift+0x1c>
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	f100 0114 	add.w	r1, r0, #20
 800e1d4:	f100 0210 	add.w	r2, r0, #16
 800e1d8:	4618      	mov	r0, r3
 800e1da:	4553      	cmp	r3, sl
 800e1dc:	db37      	blt.n	800e24e <__lshift+0xbe>
 800e1de:	6920      	ldr	r0, [r4, #16]
 800e1e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e1e4:	f104 0314 	add.w	r3, r4, #20
 800e1e8:	f019 091f 	ands.w	r9, r9, #31
 800e1ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e1f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e1f4:	d02f      	beq.n	800e256 <__lshift+0xc6>
 800e1f6:	f1c9 0e20 	rsb	lr, r9, #32
 800e1fa:	468a      	mov	sl, r1
 800e1fc:	f04f 0c00 	mov.w	ip, #0
 800e200:	681a      	ldr	r2, [r3, #0]
 800e202:	fa02 f209 	lsl.w	r2, r2, r9
 800e206:	ea42 020c 	orr.w	r2, r2, ip
 800e20a:	f84a 2b04 	str.w	r2, [sl], #4
 800e20e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e212:	4298      	cmp	r0, r3
 800e214:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e218:	d8f2      	bhi.n	800e200 <__lshift+0x70>
 800e21a:	1b03      	subs	r3, r0, r4
 800e21c:	3b15      	subs	r3, #21
 800e21e:	f023 0303 	bic.w	r3, r3, #3
 800e222:	3304      	adds	r3, #4
 800e224:	f104 0215 	add.w	r2, r4, #21
 800e228:	4290      	cmp	r0, r2
 800e22a:	bf38      	it	cc
 800e22c:	2304      	movcc	r3, #4
 800e22e:	f841 c003 	str.w	ip, [r1, r3]
 800e232:	f1bc 0f00 	cmp.w	ip, #0
 800e236:	d001      	beq.n	800e23c <__lshift+0xac>
 800e238:	f108 0602 	add.w	r6, r8, #2
 800e23c:	3e01      	subs	r6, #1
 800e23e:	4638      	mov	r0, r7
 800e240:	612e      	str	r6, [r5, #16]
 800e242:	4621      	mov	r1, r4
 800e244:	f7ff fdd2 	bl	800ddec <_Bfree>
 800e248:	4628      	mov	r0, r5
 800e24a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e24e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e252:	3301      	adds	r3, #1
 800e254:	e7c1      	b.n	800e1da <__lshift+0x4a>
 800e256:	3904      	subs	r1, #4
 800e258:	f853 2b04 	ldr.w	r2, [r3], #4
 800e25c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e260:	4298      	cmp	r0, r3
 800e262:	d8f9      	bhi.n	800e258 <__lshift+0xc8>
 800e264:	e7ea      	b.n	800e23c <__lshift+0xac>
 800e266:	bf00      	nop
 800e268:	0800f6e3 	.word	0x0800f6e3
 800e26c:	0800f6f4 	.word	0x0800f6f4

0800e270 <__mcmp>:
 800e270:	b530      	push	{r4, r5, lr}
 800e272:	6902      	ldr	r2, [r0, #16]
 800e274:	690c      	ldr	r4, [r1, #16]
 800e276:	1b12      	subs	r2, r2, r4
 800e278:	d10e      	bne.n	800e298 <__mcmp+0x28>
 800e27a:	f100 0314 	add.w	r3, r0, #20
 800e27e:	3114      	adds	r1, #20
 800e280:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e284:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e288:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e28c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e290:	42a5      	cmp	r5, r4
 800e292:	d003      	beq.n	800e29c <__mcmp+0x2c>
 800e294:	d305      	bcc.n	800e2a2 <__mcmp+0x32>
 800e296:	2201      	movs	r2, #1
 800e298:	4610      	mov	r0, r2
 800e29a:	bd30      	pop	{r4, r5, pc}
 800e29c:	4283      	cmp	r3, r0
 800e29e:	d3f3      	bcc.n	800e288 <__mcmp+0x18>
 800e2a0:	e7fa      	b.n	800e298 <__mcmp+0x28>
 800e2a2:	f04f 32ff 	mov.w	r2, #4294967295
 800e2a6:	e7f7      	b.n	800e298 <__mcmp+0x28>

0800e2a8 <__mdiff>:
 800e2a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2ac:	460c      	mov	r4, r1
 800e2ae:	4606      	mov	r6, r0
 800e2b0:	4611      	mov	r1, r2
 800e2b2:	4620      	mov	r0, r4
 800e2b4:	4690      	mov	r8, r2
 800e2b6:	f7ff ffdb 	bl	800e270 <__mcmp>
 800e2ba:	1e05      	subs	r5, r0, #0
 800e2bc:	d110      	bne.n	800e2e0 <__mdiff+0x38>
 800e2be:	4629      	mov	r1, r5
 800e2c0:	4630      	mov	r0, r6
 800e2c2:	f7ff fd53 	bl	800dd6c <_Balloc>
 800e2c6:	b930      	cbnz	r0, 800e2d6 <__mdiff+0x2e>
 800e2c8:	4b3a      	ldr	r3, [pc, #232]	; (800e3b4 <__mdiff+0x10c>)
 800e2ca:	4602      	mov	r2, r0
 800e2cc:	f240 2132 	movw	r1, #562	; 0x232
 800e2d0:	4839      	ldr	r0, [pc, #228]	; (800e3b8 <__mdiff+0x110>)
 800e2d2:	f000 fb31 	bl	800e938 <__assert_func>
 800e2d6:	2301      	movs	r3, #1
 800e2d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e2dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2e0:	bfa4      	itt	ge
 800e2e2:	4643      	movge	r3, r8
 800e2e4:	46a0      	movge	r8, r4
 800e2e6:	4630      	mov	r0, r6
 800e2e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e2ec:	bfa6      	itte	ge
 800e2ee:	461c      	movge	r4, r3
 800e2f0:	2500      	movge	r5, #0
 800e2f2:	2501      	movlt	r5, #1
 800e2f4:	f7ff fd3a 	bl	800dd6c <_Balloc>
 800e2f8:	b920      	cbnz	r0, 800e304 <__mdiff+0x5c>
 800e2fa:	4b2e      	ldr	r3, [pc, #184]	; (800e3b4 <__mdiff+0x10c>)
 800e2fc:	4602      	mov	r2, r0
 800e2fe:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e302:	e7e5      	b.n	800e2d0 <__mdiff+0x28>
 800e304:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e308:	6926      	ldr	r6, [r4, #16]
 800e30a:	60c5      	str	r5, [r0, #12]
 800e30c:	f104 0914 	add.w	r9, r4, #20
 800e310:	f108 0514 	add.w	r5, r8, #20
 800e314:	f100 0e14 	add.w	lr, r0, #20
 800e318:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e31c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e320:	f108 0210 	add.w	r2, r8, #16
 800e324:	46f2      	mov	sl, lr
 800e326:	2100      	movs	r1, #0
 800e328:	f859 3b04 	ldr.w	r3, [r9], #4
 800e32c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e330:	fa1f f883 	uxth.w	r8, r3
 800e334:	fa11 f18b 	uxtah	r1, r1, fp
 800e338:	0c1b      	lsrs	r3, r3, #16
 800e33a:	eba1 0808 	sub.w	r8, r1, r8
 800e33e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e342:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e346:	fa1f f888 	uxth.w	r8, r8
 800e34a:	1419      	asrs	r1, r3, #16
 800e34c:	454e      	cmp	r6, r9
 800e34e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e352:	f84a 3b04 	str.w	r3, [sl], #4
 800e356:	d8e7      	bhi.n	800e328 <__mdiff+0x80>
 800e358:	1b33      	subs	r3, r6, r4
 800e35a:	3b15      	subs	r3, #21
 800e35c:	f023 0303 	bic.w	r3, r3, #3
 800e360:	3304      	adds	r3, #4
 800e362:	3415      	adds	r4, #21
 800e364:	42a6      	cmp	r6, r4
 800e366:	bf38      	it	cc
 800e368:	2304      	movcc	r3, #4
 800e36a:	441d      	add	r5, r3
 800e36c:	4473      	add	r3, lr
 800e36e:	469e      	mov	lr, r3
 800e370:	462e      	mov	r6, r5
 800e372:	4566      	cmp	r6, ip
 800e374:	d30e      	bcc.n	800e394 <__mdiff+0xec>
 800e376:	f10c 0203 	add.w	r2, ip, #3
 800e37a:	1b52      	subs	r2, r2, r5
 800e37c:	f022 0203 	bic.w	r2, r2, #3
 800e380:	3d03      	subs	r5, #3
 800e382:	45ac      	cmp	ip, r5
 800e384:	bf38      	it	cc
 800e386:	2200      	movcc	r2, #0
 800e388:	441a      	add	r2, r3
 800e38a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e38e:	b17b      	cbz	r3, 800e3b0 <__mdiff+0x108>
 800e390:	6107      	str	r7, [r0, #16]
 800e392:	e7a3      	b.n	800e2dc <__mdiff+0x34>
 800e394:	f856 8b04 	ldr.w	r8, [r6], #4
 800e398:	fa11 f288 	uxtah	r2, r1, r8
 800e39c:	1414      	asrs	r4, r2, #16
 800e39e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e3a2:	b292      	uxth	r2, r2
 800e3a4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e3a8:	f84e 2b04 	str.w	r2, [lr], #4
 800e3ac:	1421      	asrs	r1, r4, #16
 800e3ae:	e7e0      	b.n	800e372 <__mdiff+0xca>
 800e3b0:	3f01      	subs	r7, #1
 800e3b2:	e7ea      	b.n	800e38a <__mdiff+0xe2>
 800e3b4:	0800f6e3 	.word	0x0800f6e3
 800e3b8:	0800f6f4 	.word	0x0800f6f4

0800e3bc <__d2b>:
 800e3bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e3c0:	4689      	mov	r9, r1
 800e3c2:	2101      	movs	r1, #1
 800e3c4:	ec57 6b10 	vmov	r6, r7, d0
 800e3c8:	4690      	mov	r8, r2
 800e3ca:	f7ff fccf 	bl	800dd6c <_Balloc>
 800e3ce:	4604      	mov	r4, r0
 800e3d0:	b930      	cbnz	r0, 800e3e0 <__d2b+0x24>
 800e3d2:	4602      	mov	r2, r0
 800e3d4:	4b25      	ldr	r3, [pc, #148]	; (800e46c <__d2b+0xb0>)
 800e3d6:	4826      	ldr	r0, [pc, #152]	; (800e470 <__d2b+0xb4>)
 800e3d8:	f240 310a 	movw	r1, #778	; 0x30a
 800e3dc:	f000 faac 	bl	800e938 <__assert_func>
 800e3e0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e3e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e3e8:	bb35      	cbnz	r5, 800e438 <__d2b+0x7c>
 800e3ea:	2e00      	cmp	r6, #0
 800e3ec:	9301      	str	r3, [sp, #4]
 800e3ee:	d028      	beq.n	800e442 <__d2b+0x86>
 800e3f0:	4668      	mov	r0, sp
 800e3f2:	9600      	str	r6, [sp, #0]
 800e3f4:	f7ff fd82 	bl	800defc <__lo0bits>
 800e3f8:	9900      	ldr	r1, [sp, #0]
 800e3fa:	b300      	cbz	r0, 800e43e <__d2b+0x82>
 800e3fc:	9a01      	ldr	r2, [sp, #4]
 800e3fe:	f1c0 0320 	rsb	r3, r0, #32
 800e402:	fa02 f303 	lsl.w	r3, r2, r3
 800e406:	430b      	orrs	r3, r1
 800e408:	40c2      	lsrs	r2, r0
 800e40a:	6163      	str	r3, [r4, #20]
 800e40c:	9201      	str	r2, [sp, #4]
 800e40e:	9b01      	ldr	r3, [sp, #4]
 800e410:	61a3      	str	r3, [r4, #24]
 800e412:	2b00      	cmp	r3, #0
 800e414:	bf14      	ite	ne
 800e416:	2202      	movne	r2, #2
 800e418:	2201      	moveq	r2, #1
 800e41a:	6122      	str	r2, [r4, #16]
 800e41c:	b1d5      	cbz	r5, 800e454 <__d2b+0x98>
 800e41e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e422:	4405      	add	r5, r0
 800e424:	f8c9 5000 	str.w	r5, [r9]
 800e428:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e42c:	f8c8 0000 	str.w	r0, [r8]
 800e430:	4620      	mov	r0, r4
 800e432:	b003      	add	sp, #12
 800e434:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e438:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e43c:	e7d5      	b.n	800e3ea <__d2b+0x2e>
 800e43e:	6161      	str	r1, [r4, #20]
 800e440:	e7e5      	b.n	800e40e <__d2b+0x52>
 800e442:	a801      	add	r0, sp, #4
 800e444:	f7ff fd5a 	bl	800defc <__lo0bits>
 800e448:	9b01      	ldr	r3, [sp, #4]
 800e44a:	6163      	str	r3, [r4, #20]
 800e44c:	2201      	movs	r2, #1
 800e44e:	6122      	str	r2, [r4, #16]
 800e450:	3020      	adds	r0, #32
 800e452:	e7e3      	b.n	800e41c <__d2b+0x60>
 800e454:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e458:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e45c:	f8c9 0000 	str.w	r0, [r9]
 800e460:	6918      	ldr	r0, [r3, #16]
 800e462:	f7ff fd2b 	bl	800debc <__hi0bits>
 800e466:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e46a:	e7df      	b.n	800e42c <__d2b+0x70>
 800e46c:	0800f6e3 	.word	0x0800f6e3
 800e470:	0800f6f4 	.word	0x0800f6f4

0800e474 <_calloc_r>:
 800e474:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e476:	fba1 2402 	umull	r2, r4, r1, r2
 800e47a:	b94c      	cbnz	r4, 800e490 <_calloc_r+0x1c>
 800e47c:	4611      	mov	r1, r2
 800e47e:	9201      	str	r2, [sp, #4]
 800e480:	f000 f87a 	bl	800e578 <_malloc_r>
 800e484:	9a01      	ldr	r2, [sp, #4]
 800e486:	4605      	mov	r5, r0
 800e488:	b930      	cbnz	r0, 800e498 <_calloc_r+0x24>
 800e48a:	4628      	mov	r0, r5
 800e48c:	b003      	add	sp, #12
 800e48e:	bd30      	pop	{r4, r5, pc}
 800e490:	220c      	movs	r2, #12
 800e492:	6002      	str	r2, [r0, #0]
 800e494:	2500      	movs	r5, #0
 800e496:	e7f8      	b.n	800e48a <_calloc_r+0x16>
 800e498:	4621      	mov	r1, r4
 800e49a:	f7fe f945 	bl	800c728 <memset>
 800e49e:	e7f4      	b.n	800e48a <_calloc_r+0x16>

0800e4a0 <_free_r>:
 800e4a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e4a2:	2900      	cmp	r1, #0
 800e4a4:	d044      	beq.n	800e530 <_free_r+0x90>
 800e4a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4aa:	9001      	str	r0, [sp, #4]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	f1a1 0404 	sub.w	r4, r1, #4
 800e4b2:	bfb8      	it	lt
 800e4b4:	18e4      	addlt	r4, r4, r3
 800e4b6:	f000 fa9b 	bl	800e9f0 <__malloc_lock>
 800e4ba:	4a1e      	ldr	r2, [pc, #120]	; (800e534 <_free_r+0x94>)
 800e4bc:	9801      	ldr	r0, [sp, #4]
 800e4be:	6813      	ldr	r3, [r2, #0]
 800e4c0:	b933      	cbnz	r3, 800e4d0 <_free_r+0x30>
 800e4c2:	6063      	str	r3, [r4, #4]
 800e4c4:	6014      	str	r4, [r2, #0]
 800e4c6:	b003      	add	sp, #12
 800e4c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e4cc:	f000 ba96 	b.w	800e9fc <__malloc_unlock>
 800e4d0:	42a3      	cmp	r3, r4
 800e4d2:	d908      	bls.n	800e4e6 <_free_r+0x46>
 800e4d4:	6825      	ldr	r5, [r4, #0]
 800e4d6:	1961      	adds	r1, r4, r5
 800e4d8:	428b      	cmp	r3, r1
 800e4da:	bf01      	itttt	eq
 800e4dc:	6819      	ldreq	r1, [r3, #0]
 800e4de:	685b      	ldreq	r3, [r3, #4]
 800e4e0:	1949      	addeq	r1, r1, r5
 800e4e2:	6021      	streq	r1, [r4, #0]
 800e4e4:	e7ed      	b.n	800e4c2 <_free_r+0x22>
 800e4e6:	461a      	mov	r2, r3
 800e4e8:	685b      	ldr	r3, [r3, #4]
 800e4ea:	b10b      	cbz	r3, 800e4f0 <_free_r+0x50>
 800e4ec:	42a3      	cmp	r3, r4
 800e4ee:	d9fa      	bls.n	800e4e6 <_free_r+0x46>
 800e4f0:	6811      	ldr	r1, [r2, #0]
 800e4f2:	1855      	adds	r5, r2, r1
 800e4f4:	42a5      	cmp	r5, r4
 800e4f6:	d10b      	bne.n	800e510 <_free_r+0x70>
 800e4f8:	6824      	ldr	r4, [r4, #0]
 800e4fa:	4421      	add	r1, r4
 800e4fc:	1854      	adds	r4, r2, r1
 800e4fe:	42a3      	cmp	r3, r4
 800e500:	6011      	str	r1, [r2, #0]
 800e502:	d1e0      	bne.n	800e4c6 <_free_r+0x26>
 800e504:	681c      	ldr	r4, [r3, #0]
 800e506:	685b      	ldr	r3, [r3, #4]
 800e508:	6053      	str	r3, [r2, #4]
 800e50a:	4421      	add	r1, r4
 800e50c:	6011      	str	r1, [r2, #0]
 800e50e:	e7da      	b.n	800e4c6 <_free_r+0x26>
 800e510:	d902      	bls.n	800e518 <_free_r+0x78>
 800e512:	230c      	movs	r3, #12
 800e514:	6003      	str	r3, [r0, #0]
 800e516:	e7d6      	b.n	800e4c6 <_free_r+0x26>
 800e518:	6825      	ldr	r5, [r4, #0]
 800e51a:	1961      	adds	r1, r4, r5
 800e51c:	428b      	cmp	r3, r1
 800e51e:	bf04      	itt	eq
 800e520:	6819      	ldreq	r1, [r3, #0]
 800e522:	685b      	ldreq	r3, [r3, #4]
 800e524:	6063      	str	r3, [r4, #4]
 800e526:	bf04      	itt	eq
 800e528:	1949      	addeq	r1, r1, r5
 800e52a:	6021      	streq	r1, [r4, #0]
 800e52c:	6054      	str	r4, [r2, #4]
 800e52e:	e7ca      	b.n	800e4c6 <_free_r+0x26>
 800e530:	b003      	add	sp, #12
 800e532:	bd30      	pop	{r4, r5, pc}
 800e534:	20000d4c 	.word	0x20000d4c

0800e538 <sbrk_aligned>:
 800e538:	b570      	push	{r4, r5, r6, lr}
 800e53a:	4e0e      	ldr	r6, [pc, #56]	; (800e574 <sbrk_aligned+0x3c>)
 800e53c:	460c      	mov	r4, r1
 800e53e:	6831      	ldr	r1, [r6, #0]
 800e540:	4605      	mov	r5, r0
 800e542:	b911      	cbnz	r1, 800e54a <sbrk_aligned+0x12>
 800e544:	f000 f9e8 	bl	800e918 <_sbrk_r>
 800e548:	6030      	str	r0, [r6, #0]
 800e54a:	4621      	mov	r1, r4
 800e54c:	4628      	mov	r0, r5
 800e54e:	f000 f9e3 	bl	800e918 <_sbrk_r>
 800e552:	1c43      	adds	r3, r0, #1
 800e554:	d00a      	beq.n	800e56c <sbrk_aligned+0x34>
 800e556:	1cc4      	adds	r4, r0, #3
 800e558:	f024 0403 	bic.w	r4, r4, #3
 800e55c:	42a0      	cmp	r0, r4
 800e55e:	d007      	beq.n	800e570 <sbrk_aligned+0x38>
 800e560:	1a21      	subs	r1, r4, r0
 800e562:	4628      	mov	r0, r5
 800e564:	f000 f9d8 	bl	800e918 <_sbrk_r>
 800e568:	3001      	adds	r0, #1
 800e56a:	d101      	bne.n	800e570 <sbrk_aligned+0x38>
 800e56c:	f04f 34ff 	mov.w	r4, #4294967295
 800e570:	4620      	mov	r0, r4
 800e572:	bd70      	pop	{r4, r5, r6, pc}
 800e574:	20000d50 	.word	0x20000d50

0800e578 <_malloc_r>:
 800e578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e57c:	1ccd      	adds	r5, r1, #3
 800e57e:	f025 0503 	bic.w	r5, r5, #3
 800e582:	3508      	adds	r5, #8
 800e584:	2d0c      	cmp	r5, #12
 800e586:	bf38      	it	cc
 800e588:	250c      	movcc	r5, #12
 800e58a:	2d00      	cmp	r5, #0
 800e58c:	4607      	mov	r7, r0
 800e58e:	db01      	blt.n	800e594 <_malloc_r+0x1c>
 800e590:	42a9      	cmp	r1, r5
 800e592:	d905      	bls.n	800e5a0 <_malloc_r+0x28>
 800e594:	230c      	movs	r3, #12
 800e596:	603b      	str	r3, [r7, #0]
 800e598:	2600      	movs	r6, #0
 800e59a:	4630      	mov	r0, r6
 800e59c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5a0:	4e2e      	ldr	r6, [pc, #184]	; (800e65c <_malloc_r+0xe4>)
 800e5a2:	f000 fa25 	bl	800e9f0 <__malloc_lock>
 800e5a6:	6833      	ldr	r3, [r6, #0]
 800e5a8:	461c      	mov	r4, r3
 800e5aa:	bb34      	cbnz	r4, 800e5fa <_malloc_r+0x82>
 800e5ac:	4629      	mov	r1, r5
 800e5ae:	4638      	mov	r0, r7
 800e5b0:	f7ff ffc2 	bl	800e538 <sbrk_aligned>
 800e5b4:	1c43      	adds	r3, r0, #1
 800e5b6:	4604      	mov	r4, r0
 800e5b8:	d14d      	bne.n	800e656 <_malloc_r+0xde>
 800e5ba:	6834      	ldr	r4, [r6, #0]
 800e5bc:	4626      	mov	r6, r4
 800e5be:	2e00      	cmp	r6, #0
 800e5c0:	d140      	bne.n	800e644 <_malloc_r+0xcc>
 800e5c2:	6823      	ldr	r3, [r4, #0]
 800e5c4:	4631      	mov	r1, r6
 800e5c6:	4638      	mov	r0, r7
 800e5c8:	eb04 0803 	add.w	r8, r4, r3
 800e5cc:	f000 f9a4 	bl	800e918 <_sbrk_r>
 800e5d0:	4580      	cmp	r8, r0
 800e5d2:	d13a      	bne.n	800e64a <_malloc_r+0xd2>
 800e5d4:	6821      	ldr	r1, [r4, #0]
 800e5d6:	3503      	adds	r5, #3
 800e5d8:	1a6d      	subs	r5, r5, r1
 800e5da:	f025 0503 	bic.w	r5, r5, #3
 800e5de:	3508      	adds	r5, #8
 800e5e0:	2d0c      	cmp	r5, #12
 800e5e2:	bf38      	it	cc
 800e5e4:	250c      	movcc	r5, #12
 800e5e6:	4629      	mov	r1, r5
 800e5e8:	4638      	mov	r0, r7
 800e5ea:	f7ff ffa5 	bl	800e538 <sbrk_aligned>
 800e5ee:	3001      	adds	r0, #1
 800e5f0:	d02b      	beq.n	800e64a <_malloc_r+0xd2>
 800e5f2:	6823      	ldr	r3, [r4, #0]
 800e5f4:	442b      	add	r3, r5
 800e5f6:	6023      	str	r3, [r4, #0]
 800e5f8:	e00e      	b.n	800e618 <_malloc_r+0xa0>
 800e5fa:	6822      	ldr	r2, [r4, #0]
 800e5fc:	1b52      	subs	r2, r2, r5
 800e5fe:	d41e      	bmi.n	800e63e <_malloc_r+0xc6>
 800e600:	2a0b      	cmp	r2, #11
 800e602:	d916      	bls.n	800e632 <_malloc_r+0xba>
 800e604:	1961      	adds	r1, r4, r5
 800e606:	42a3      	cmp	r3, r4
 800e608:	6025      	str	r5, [r4, #0]
 800e60a:	bf18      	it	ne
 800e60c:	6059      	strne	r1, [r3, #4]
 800e60e:	6863      	ldr	r3, [r4, #4]
 800e610:	bf08      	it	eq
 800e612:	6031      	streq	r1, [r6, #0]
 800e614:	5162      	str	r2, [r4, r5]
 800e616:	604b      	str	r3, [r1, #4]
 800e618:	4638      	mov	r0, r7
 800e61a:	f104 060b 	add.w	r6, r4, #11
 800e61e:	f000 f9ed 	bl	800e9fc <__malloc_unlock>
 800e622:	f026 0607 	bic.w	r6, r6, #7
 800e626:	1d23      	adds	r3, r4, #4
 800e628:	1af2      	subs	r2, r6, r3
 800e62a:	d0b6      	beq.n	800e59a <_malloc_r+0x22>
 800e62c:	1b9b      	subs	r3, r3, r6
 800e62e:	50a3      	str	r3, [r4, r2]
 800e630:	e7b3      	b.n	800e59a <_malloc_r+0x22>
 800e632:	6862      	ldr	r2, [r4, #4]
 800e634:	42a3      	cmp	r3, r4
 800e636:	bf0c      	ite	eq
 800e638:	6032      	streq	r2, [r6, #0]
 800e63a:	605a      	strne	r2, [r3, #4]
 800e63c:	e7ec      	b.n	800e618 <_malloc_r+0xa0>
 800e63e:	4623      	mov	r3, r4
 800e640:	6864      	ldr	r4, [r4, #4]
 800e642:	e7b2      	b.n	800e5aa <_malloc_r+0x32>
 800e644:	4634      	mov	r4, r6
 800e646:	6876      	ldr	r6, [r6, #4]
 800e648:	e7b9      	b.n	800e5be <_malloc_r+0x46>
 800e64a:	230c      	movs	r3, #12
 800e64c:	603b      	str	r3, [r7, #0]
 800e64e:	4638      	mov	r0, r7
 800e650:	f000 f9d4 	bl	800e9fc <__malloc_unlock>
 800e654:	e7a1      	b.n	800e59a <_malloc_r+0x22>
 800e656:	6025      	str	r5, [r4, #0]
 800e658:	e7de      	b.n	800e618 <_malloc_r+0xa0>
 800e65a:	bf00      	nop
 800e65c:	20000d4c 	.word	0x20000d4c

0800e660 <__ssputs_r>:
 800e660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e664:	688e      	ldr	r6, [r1, #8]
 800e666:	429e      	cmp	r6, r3
 800e668:	4682      	mov	sl, r0
 800e66a:	460c      	mov	r4, r1
 800e66c:	4690      	mov	r8, r2
 800e66e:	461f      	mov	r7, r3
 800e670:	d838      	bhi.n	800e6e4 <__ssputs_r+0x84>
 800e672:	898a      	ldrh	r2, [r1, #12]
 800e674:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e678:	d032      	beq.n	800e6e0 <__ssputs_r+0x80>
 800e67a:	6825      	ldr	r5, [r4, #0]
 800e67c:	6909      	ldr	r1, [r1, #16]
 800e67e:	eba5 0901 	sub.w	r9, r5, r1
 800e682:	6965      	ldr	r5, [r4, #20]
 800e684:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e688:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e68c:	3301      	adds	r3, #1
 800e68e:	444b      	add	r3, r9
 800e690:	106d      	asrs	r5, r5, #1
 800e692:	429d      	cmp	r5, r3
 800e694:	bf38      	it	cc
 800e696:	461d      	movcc	r5, r3
 800e698:	0553      	lsls	r3, r2, #21
 800e69a:	d531      	bpl.n	800e700 <__ssputs_r+0xa0>
 800e69c:	4629      	mov	r1, r5
 800e69e:	f7ff ff6b 	bl	800e578 <_malloc_r>
 800e6a2:	4606      	mov	r6, r0
 800e6a4:	b950      	cbnz	r0, 800e6bc <__ssputs_r+0x5c>
 800e6a6:	230c      	movs	r3, #12
 800e6a8:	f8ca 3000 	str.w	r3, [sl]
 800e6ac:	89a3      	ldrh	r3, [r4, #12]
 800e6ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6b2:	81a3      	strh	r3, [r4, #12]
 800e6b4:	f04f 30ff 	mov.w	r0, #4294967295
 800e6b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6bc:	6921      	ldr	r1, [r4, #16]
 800e6be:	464a      	mov	r2, r9
 800e6c0:	f7fe f824 	bl	800c70c <memcpy>
 800e6c4:	89a3      	ldrh	r3, [r4, #12]
 800e6c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e6ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e6ce:	81a3      	strh	r3, [r4, #12]
 800e6d0:	6126      	str	r6, [r4, #16]
 800e6d2:	6165      	str	r5, [r4, #20]
 800e6d4:	444e      	add	r6, r9
 800e6d6:	eba5 0509 	sub.w	r5, r5, r9
 800e6da:	6026      	str	r6, [r4, #0]
 800e6dc:	60a5      	str	r5, [r4, #8]
 800e6de:	463e      	mov	r6, r7
 800e6e0:	42be      	cmp	r6, r7
 800e6e2:	d900      	bls.n	800e6e6 <__ssputs_r+0x86>
 800e6e4:	463e      	mov	r6, r7
 800e6e6:	6820      	ldr	r0, [r4, #0]
 800e6e8:	4632      	mov	r2, r6
 800e6ea:	4641      	mov	r1, r8
 800e6ec:	f000 f966 	bl	800e9bc <memmove>
 800e6f0:	68a3      	ldr	r3, [r4, #8]
 800e6f2:	1b9b      	subs	r3, r3, r6
 800e6f4:	60a3      	str	r3, [r4, #8]
 800e6f6:	6823      	ldr	r3, [r4, #0]
 800e6f8:	4433      	add	r3, r6
 800e6fa:	6023      	str	r3, [r4, #0]
 800e6fc:	2000      	movs	r0, #0
 800e6fe:	e7db      	b.n	800e6b8 <__ssputs_r+0x58>
 800e700:	462a      	mov	r2, r5
 800e702:	f000 f981 	bl	800ea08 <_realloc_r>
 800e706:	4606      	mov	r6, r0
 800e708:	2800      	cmp	r0, #0
 800e70a:	d1e1      	bne.n	800e6d0 <__ssputs_r+0x70>
 800e70c:	6921      	ldr	r1, [r4, #16]
 800e70e:	4650      	mov	r0, sl
 800e710:	f7ff fec6 	bl	800e4a0 <_free_r>
 800e714:	e7c7      	b.n	800e6a6 <__ssputs_r+0x46>
	...

0800e718 <_svfiprintf_r>:
 800e718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e71c:	4698      	mov	r8, r3
 800e71e:	898b      	ldrh	r3, [r1, #12]
 800e720:	061b      	lsls	r3, r3, #24
 800e722:	b09d      	sub	sp, #116	; 0x74
 800e724:	4607      	mov	r7, r0
 800e726:	460d      	mov	r5, r1
 800e728:	4614      	mov	r4, r2
 800e72a:	d50e      	bpl.n	800e74a <_svfiprintf_r+0x32>
 800e72c:	690b      	ldr	r3, [r1, #16]
 800e72e:	b963      	cbnz	r3, 800e74a <_svfiprintf_r+0x32>
 800e730:	2140      	movs	r1, #64	; 0x40
 800e732:	f7ff ff21 	bl	800e578 <_malloc_r>
 800e736:	6028      	str	r0, [r5, #0]
 800e738:	6128      	str	r0, [r5, #16]
 800e73a:	b920      	cbnz	r0, 800e746 <_svfiprintf_r+0x2e>
 800e73c:	230c      	movs	r3, #12
 800e73e:	603b      	str	r3, [r7, #0]
 800e740:	f04f 30ff 	mov.w	r0, #4294967295
 800e744:	e0d1      	b.n	800e8ea <_svfiprintf_r+0x1d2>
 800e746:	2340      	movs	r3, #64	; 0x40
 800e748:	616b      	str	r3, [r5, #20]
 800e74a:	2300      	movs	r3, #0
 800e74c:	9309      	str	r3, [sp, #36]	; 0x24
 800e74e:	2320      	movs	r3, #32
 800e750:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e754:	f8cd 800c 	str.w	r8, [sp, #12]
 800e758:	2330      	movs	r3, #48	; 0x30
 800e75a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e904 <_svfiprintf_r+0x1ec>
 800e75e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e762:	f04f 0901 	mov.w	r9, #1
 800e766:	4623      	mov	r3, r4
 800e768:	469a      	mov	sl, r3
 800e76a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e76e:	b10a      	cbz	r2, 800e774 <_svfiprintf_r+0x5c>
 800e770:	2a25      	cmp	r2, #37	; 0x25
 800e772:	d1f9      	bne.n	800e768 <_svfiprintf_r+0x50>
 800e774:	ebba 0b04 	subs.w	fp, sl, r4
 800e778:	d00b      	beq.n	800e792 <_svfiprintf_r+0x7a>
 800e77a:	465b      	mov	r3, fp
 800e77c:	4622      	mov	r2, r4
 800e77e:	4629      	mov	r1, r5
 800e780:	4638      	mov	r0, r7
 800e782:	f7ff ff6d 	bl	800e660 <__ssputs_r>
 800e786:	3001      	adds	r0, #1
 800e788:	f000 80aa 	beq.w	800e8e0 <_svfiprintf_r+0x1c8>
 800e78c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e78e:	445a      	add	r2, fp
 800e790:	9209      	str	r2, [sp, #36]	; 0x24
 800e792:	f89a 3000 	ldrb.w	r3, [sl]
 800e796:	2b00      	cmp	r3, #0
 800e798:	f000 80a2 	beq.w	800e8e0 <_svfiprintf_r+0x1c8>
 800e79c:	2300      	movs	r3, #0
 800e79e:	f04f 32ff 	mov.w	r2, #4294967295
 800e7a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e7a6:	f10a 0a01 	add.w	sl, sl, #1
 800e7aa:	9304      	str	r3, [sp, #16]
 800e7ac:	9307      	str	r3, [sp, #28]
 800e7ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e7b2:	931a      	str	r3, [sp, #104]	; 0x68
 800e7b4:	4654      	mov	r4, sl
 800e7b6:	2205      	movs	r2, #5
 800e7b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7bc:	4851      	ldr	r0, [pc, #324]	; (800e904 <_svfiprintf_r+0x1ec>)
 800e7be:	f7f1 fd17 	bl	80001f0 <memchr>
 800e7c2:	9a04      	ldr	r2, [sp, #16]
 800e7c4:	b9d8      	cbnz	r0, 800e7fe <_svfiprintf_r+0xe6>
 800e7c6:	06d0      	lsls	r0, r2, #27
 800e7c8:	bf44      	itt	mi
 800e7ca:	2320      	movmi	r3, #32
 800e7cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e7d0:	0711      	lsls	r1, r2, #28
 800e7d2:	bf44      	itt	mi
 800e7d4:	232b      	movmi	r3, #43	; 0x2b
 800e7d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e7da:	f89a 3000 	ldrb.w	r3, [sl]
 800e7de:	2b2a      	cmp	r3, #42	; 0x2a
 800e7e0:	d015      	beq.n	800e80e <_svfiprintf_r+0xf6>
 800e7e2:	9a07      	ldr	r2, [sp, #28]
 800e7e4:	4654      	mov	r4, sl
 800e7e6:	2000      	movs	r0, #0
 800e7e8:	f04f 0c0a 	mov.w	ip, #10
 800e7ec:	4621      	mov	r1, r4
 800e7ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e7f2:	3b30      	subs	r3, #48	; 0x30
 800e7f4:	2b09      	cmp	r3, #9
 800e7f6:	d94e      	bls.n	800e896 <_svfiprintf_r+0x17e>
 800e7f8:	b1b0      	cbz	r0, 800e828 <_svfiprintf_r+0x110>
 800e7fa:	9207      	str	r2, [sp, #28]
 800e7fc:	e014      	b.n	800e828 <_svfiprintf_r+0x110>
 800e7fe:	eba0 0308 	sub.w	r3, r0, r8
 800e802:	fa09 f303 	lsl.w	r3, r9, r3
 800e806:	4313      	orrs	r3, r2
 800e808:	9304      	str	r3, [sp, #16]
 800e80a:	46a2      	mov	sl, r4
 800e80c:	e7d2      	b.n	800e7b4 <_svfiprintf_r+0x9c>
 800e80e:	9b03      	ldr	r3, [sp, #12]
 800e810:	1d19      	adds	r1, r3, #4
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	9103      	str	r1, [sp, #12]
 800e816:	2b00      	cmp	r3, #0
 800e818:	bfbb      	ittet	lt
 800e81a:	425b      	neglt	r3, r3
 800e81c:	f042 0202 	orrlt.w	r2, r2, #2
 800e820:	9307      	strge	r3, [sp, #28]
 800e822:	9307      	strlt	r3, [sp, #28]
 800e824:	bfb8      	it	lt
 800e826:	9204      	strlt	r2, [sp, #16]
 800e828:	7823      	ldrb	r3, [r4, #0]
 800e82a:	2b2e      	cmp	r3, #46	; 0x2e
 800e82c:	d10c      	bne.n	800e848 <_svfiprintf_r+0x130>
 800e82e:	7863      	ldrb	r3, [r4, #1]
 800e830:	2b2a      	cmp	r3, #42	; 0x2a
 800e832:	d135      	bne.n	800e8a0 <_svfiprintf_r+0x188>
 800e834:	9b03      	ldr	r3, [sp, #12]
 800e836:	1d1a      	adds	r2, r3, #4
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	9203      	str	r2, [sp, #12]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	bfb8      	it	lt
 800e840:	f04f 33ff 	movlt.w	r3, #4294967295
 800e844:	3402      	adds	r4, #2
 800e846:	9305      	str	r3, [sp, #20]
 800e848:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e914 <_svfiprintf_r+0x1fc>
 800e84c:	7821      	ldrb	r1, [r4, #0]
 800e84e:	2203      	movs	r2, #3
 800e850:	4650      	mov	r0, sl
 800e852:	f7f1 fccd 	bl	80001f0 <memchr>
 800e856:	b140      	cbz	r0, 800e86a <_svfiprintf_r+0x152>
 800e858:	2340      	movs	r3, #64	; 0x40
 800e85a:	eba0 000a 	sub.w	r0, r0, sl
 800e85e:	fa03 f000 	lsl.w	r0, r3, r0
 800e862:	9b04      	ldr	r3, [sp, #16]
 800e864:	4303      	orrs	r3, r0
 800e866:	3401      	adds	r4, #1
 800e868:	9304      	str	r3, [sp, #16]
 800e86a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e86e:	4826      	ldr	r0, [pc, #152]	; (800e908 <_svfiprintf_r+0x1f0>)
 800e870:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e874:	2206      	movs	r2, #6
 800e876:	f7f1 fcbb 	bl	80001f0 <memchr>
 800e87a:	2800      	cmp	r0, #0
 800e87c:	d038      	beq.n	800e8f0 <_svfiprintf_r+0x1d8>
 800e87e:	4b23      	ldr	r3, [pc, #140]	; (800e90c <_svfiprintf_r+0x1f4>)
 800e880:	bb1b      	cbnz	r3, 800e8ca <_svfiprintf_r+0x1b2>
 800e882:	9b03      	ldr	r3, [sp, #12]
 800e884:	3307      	adds	r3, #7
 800e886:	f023 0307 	bic.w	r3, r3, #7
 800e88a:	3308      	adds	r3, #8
 800e88c:	9303      	str	r3, [sp, #12]
 800e88e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e890:	4433      	add	r3, r6
 800e892:	9309      	str	r3, [sp, #36]	; 0x24
 800e894:	e767      	b.n	800e766 <_svfiprintf_r+0x4e>
 800e896:	fb0c 3202 	mla	r2, ip, r2, r3
 800e89a:	460c      	mov	r4, r1
 800e89c:	2001      	movs	r0, #1
 800e89e:	e7a5      	b.n	800e7ec <_svfiprintf_r+0xd4>
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	3401      	adds	r4, #1
 800e8a4:	9305      	str	r3, [sp, #20]
 800e8a6:	4619      	mov	r1, r3
 800e8a8:	f04f 0c0a 	mov.w	ip, #10
 800e8ac:	4620      	mov	r0, r4
 800e8ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8b2:	3a30      	subs	r2, #48	; 0x30
 800e8b4:	2a09      	cmp	r2, #9
 800e8b6:	d903      	bls.n	800e8c0 <_svfiprintf_r+0x1a8>
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d0c5      	beq.n	800e848 <_svfiprintf_r+0x130>
 800e8bc:	9105      	str	r1, [sp, #20]
 800e8be:	e7c3      	b.n	800e848 <_svfiprintf_r+0x130>
 800e8c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800e8c4:	4604      	mov	r4, r0
 800e8c6:	2301      	movs	r3, #1
 800e8c8:	e7f0      	b.n	800e8ac <_svfiprintf_r+0x194>
 800e8ca:	ab03      	add	r3, sp, #12
 800e8cc:	9300      	str	r3, [sp, #0]
 800e8ce:	462a      	mov	r2, r5
 800e8d0:	4b0f      	ldr	r3, [pc, #60]	; (800e910 <_svfiprintf_r+0x1f8>)
 800e8d2:	a904      	add	r1, sp, #16
 800e8d4:	4638      	mov	r0, r7
 800e8d6:	f7fd ffcf 	bl	800c878 <_printf_float>
 800e8da:	1c42      	adds	r2, r0, #1
 800e8dc:	4606      	mov	r6, r0
 800e8de:	d1d6      	bne.n	800e88e <_svfiprintf_r+0x176>
 800e8e0:	89ab      	ldrh	r3, [r5, #12]
 800e8e2:	065b      	lsls	r3, r3, #25
 800e8e4:	f53f af2c 	bmi.w	800e740 <_svfiprintf_r+0x28>
 800e8e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e8ea:	b01d      	add	sp, #116	; 0x74
 800e8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8f0:	ab03      	add	r3, sp, #12
 800e8f2:	9300      	str	r3, [sp, #0]
 800e8f4:	462a      	mov	r2, r5
 800e8f6:	4b06      	ldr	r3, [pc, #24]	; (800e910 <_svfiprintf_r+0x1f8>)
 800e8f8:	a904      	add	r1, sp, #16
 800e8fa:	4638      	mov	r0, r7
 800e8fc:	f7fe fa60 	bl	800cdc0 <_printf_i>
 800e900:	e7eb      	b.n	800e8da <_svfiprintf_r+0x1c2>
 800e902:	bf00      	nop
 800e904:	0800f84c 	.word	0x0800f84c
 800e908:	0800f856 	.word	0x0800f856
 800e90c:	0800c879 	.word	0x0800c879
 800e910:	0800e661 	.word	0x0800e661
 800e914:	0800f852 	.word	0x0800f852

0800e918 <_sbrk_r>:
 800e918:	b538      	push	{r3, r4, r5, lr}
 800e91a:	4d06      	ldr	r5, [pc, #24]	; (800e934 <_sbrk_r+0x1c>)
 800e91c:	2300      	movs	r3, #0
 800e91e:	4604      	mov	r4, r0
 800e920:	4608      	mov	r0, r1
 800e922:	602b      	str	r3, [r5, #0]
 800e924:	f7f3 fbbc 	bl	80020a0 <_sbrk>
 800e928:	1c43      	adds	r3, r0, #1
 800e92a:	d102      	bne.n	800e932 <_sbrk_r+0x1a>
 800e92c:	682b      	ldr	r3, [r5, #0]
 800e92e:	b103      	cbz	r3, 800e932 <_sbrk_r+0x1a>
 800e930:	6023      	str	r3, [r4, #0]
 800e932:	bd38      	pop	{r3, r4, r5, pc}
 800e934:	20000d54 	.word	0x20000d54

0800e938 <__assert_func>:
 800e938:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e93a:	4614      	mov	r4, r2
 800e93c:	461a      	mov	r2, r3
 800e93e:	4b09      	ldr	r3, [pc, #36]	; (800e964 <__assert_func+0x2c>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	4605      	mov	r5, r0
 800e944:	68d8      	ldr	r0, [r3, #12]
 800e946:	b14c      	cbz	r4, 800e95c <__assert_func+0x24>
 800e948:	4b07      	ldr	r3, [pc, #28]	; (800e968 <__assert_func+0x30>)
 800e94a:	9100      	str	r1, [sp, #0]
 800e94c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e950:	4906      	ldr	r1, [pc, #24]	; (800e96c <__assert_func+0x34>)
 800e952:	462b      	mov	r3, r5
 800e954:	f000 f80e 	bl	800e974 <fiprintf>
 800e958:	f000 faac 	bl	800eeb4 <abort>
 800e95c:	4b04      	ldr	r3, [pc, #16]	; (800e970 <__assert_func+0x38>)
 800e95e:	461c      	mov	r4, r3
 800e960:	e7f3      	b.n	800e94a <__assert_func+0x12>
 800e962:	bf00      	nop
 800e964:	20000478 	.word	0x20000478
 800e968:	0800f85d 	.word	0x0800f85d
 800e96c:	0800f86a 	.word	0x0800f86a
 800e970:	0800f898 	.word	0x0800f898

0800e974 <fiprintf>:
 800e974:	b40e      	push	{r1, r2, r3}
 800e976:	b503      	push	{r0, r1, lr}
 800e978:	4601      	mov	r1, r0
 800e97a:	ab03      	add	r3, sp, #12
 800e97c:	4805      	ldr	r0, [pc, #20]	; (800e994 <fiprintf+0x20>)
 800e97e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e982:	6800      	ldr	r0, [r0, #0]
 800e984:	9301      	str	r3, [sp, #4]
 800e986:	f000 f897 	bl	800eab8 <_vfiprintf_r>
 800e98a:	b002      	add	sp, #8
 800e98c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e990:	b003      	add	sp, #12
 800e992:	4770      	bx	lr
 800e994:	20000478 	.word	0x20000478

0800e998 <__ascii_mbtowc>:
 800e998:	b082      	sub	sp, #8
 800e99a:	b901      	cbnz	r1, 800e99e <__ascii_mbtowc+0x6>
 800e99c:	a901      	add	r1, sp, #4
 800e99e:	b142      	cbz	r2, 800e9b2 <__ascii_mbtowc+0x1a>
 800e9a0:	b14b      	cbz	r3, 800e9b6 <__ascii_mbtowc+0x1e>
 800e9a2:	7813      	ldrb	r3, [r2, #0]
 800e9a4:	600b      	str	r3, [r1, #0]
 800e9a6:	7812      	ldrb	r2, [r2, #0]
 800e9a8:	1e10      	subs	r0, r2, #0
 800e9aa:	bf18      	it	ne
 800e9ac:	2001      	movne	r0, #1
 800e9ae:	b002      	add	sp, #8
 800e9b0:	4770      	bx	lr
 800e9b2:	4610      	mov	r0, r2
 800e9b4:	e7fb      	b.n	800e9ae <__ascii_mbtowc+0x16>
 800e9b6:	f06f 0001 	mvn.w	r0, #1
 800e9ba:	e7f8      	b.n	800e9ae <__ascii_mbtowc+0x16>

0800e9bc <memmove>:
 800e9bc:	4288      	cmp	r0, r1
 800e9be:	b510      	push	{r4, lr}
 800e9c0:	eb01 0402 	add.w	r4, r1, r2
 800e9c4:	d902      	bls.n	800e9cc <memmove+0x10>
 800e9c6:	4284      	cmp	r4, r0
 800e9c8:	4623      	mov	r3, r4
 800e9ca:	d807      	bhi.n	800e9dc <memmove+0x20>
 800e9cc:	1e43      	subs	r3, r0, #1
 800e9ce:	42a1      	cmp	r1, r4
 800e9d0:	d008      	beq.n	800e9e4 <memmove+0x28>
 800e9d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e9d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e9da:	e7f8      	b.n	800e9ce <memmove+0x12>
 800e9dc:	4402      	add	r2, r0
 800e9de:	4601      	mov	r1, r0
 800e9e0:	428a      	cmp	r2, r1
 800e9e2:	d100      	bne.n	800e9e6 <memmove+0x2a>
 800e9e4:	bd10      	pop	{r4, pc}
 800e9e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e9ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e9ee:	e7f7      	b.n	800e9e0 <memmove+0x24>

0800e9f0 <__malloc_lock>:
 800e9f0:	4801      	ldr	r0, [pc, #4]	; (800e9f8 <__malloc_lock+0x8>)
 800e9f2:	f000 bc1f 	b.w	800f234 <__retarget_lock_acquire_recursive>
 800e9f6:	bf00      	nop
 800e9f8:	20000d58 	.word	0x20000d58

0800e9fc <__malloc_unlock>:
 800e9fc:	4801      	ldr	r0, [pc, #4]	; (800ea04 <__malloc_unlock+0x8>)
 800e9fe:	f000 bc1a 	b.w	800f236 <__retarget_lock_release_recursive>
 800ea02:	bf00      	nop
 800ea04:	20000d58 	.word	0x20000d58

0800ea08 <_realloc_r>:
 800ea08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea0c:	4680      	mov	r8, r0
 800ea0e:	4614      	mov	r4, r2
 800ea10:	460e      	mov	r6, r1
 800ea12:	b921      	cbnz	r1, 800ea1e <_realloc_r+0x16>
 800ea14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea18:	4611      	mov	r1, r2
 800ea1a:	f7ff bdad 	b.w	800e578 <_malloc_r>
 800ea1e:	b92a      	cbnz	r2, 800ea2c <_realloc_r+0x24>
 800ea20:	f7ff fd3e 	bl	800e4a0 <_free_r>
 800ea24:	4625      	mov	r5, r4
 800ea26:	4628      	mov	r0, r5
 800ea28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea2c:	f000 fc6a 	bl	800f304 <_malloc_usable_size_r>
 800ea30:	4284      	cmp	r4, r0
 800ea32:	4607      	mov	r7, r0
 800ea34:	d802      	bhi.n	800ea3c <_realloc_r+0x34>
 800ea36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ea3a:	d812      	bhi.n	800ea62 <_realloc_r+0x5a>
 800ea3c:	4621      	mov	r1, r4
 800ea3e:	4640      	mov	r0, r8
 800ea40:	f7ff fd9a 	bl	800e578 <_malloc_r>
 800ea44:	4605      	mov	r5, r0
 800ea46:	2800      	cmp	r0, #0
 800ea48:	d0ed      	beq.n	800ea26 <_realloc_r+0x1e>
 800ea4a:	42bc      	cmp	r4, r7
 800ea4c:	4622      	mov	r2, r4
 800ea4e:	4631      	mov	r1, r6
 800ea50:	bf28      	it	cs
 800ea52:	463a      	movcs	r2, r7
 800ea54:	f7fd fe5a 	bl	800c70c <memcpy>
 800ea58:	4631      	mov	r1, r6
 800ea5a:	4640      	mov	r0, r8
 800ea5c:	f7ff fd20 	bl	800e4a0 <_free_r>
 800ea60:	e7e1      	b.n	800ea26 <_realloc_r+0x1e>
 800ea62:	4635      	mov	r5, r6
 800ea64:	e7df      	b.n	800ea26 <_realloc_r+0x1e>

0800ea66 <__sfputc_r>:
 800ea66:	6893      	ldr	r3, [r2, #8]
 800ea68:	3b01      	subs	r3, #1
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	b410      	push	{r4}
 800ea6e:	6093      	str	r3, [r2, #8]
 800ea70:	da08      	bge.n	800ea84 <__sfputc_r+0x1e>
 800ea72:	6994      	ldr	r4, [r2, #24]
 800ea74:	42a3      	cmp	r3, r4
 800ea76:	db01      	blt.n	800ea7c <__sfputc_r+0x16>
 800ea78:	290a      	cmp	r1, #10
 800ea7a:	d103      	bne.n	800ea84 <__sfputc_r+0x1e>
 800ea7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea80:	f000 b94a 	b.w	800ed18 <__swbuf_r>
 800ea84:	6813      	ldr	r3, [r2, #0]
 800ea86:	1c58      	adds	r0, r3, #1
 800ea88:	6010      	str	r0, [r2, #0]
 800ea8a:	7019      	strb	r1, [r3, #0]
 800ea8c:	4608      	mov	r0, r1
 800ea8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea92:	4770      	bx	lr

0800ea94 <__sfputs_r>:
 800ea94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea96:	4606      	mov	r6, r0
 800ea98:	460f      	mov	r7, r1
 800ea9a:	4614      	mov	r4, r2
 800ea9c:	18d5      	adds	r5, r2, r3
 800ea9e:	42ac      	cmp	r4, r5
 800eaa0:	d101      	bne.n	800eaa6 <__sfputs_r+0x12>
 800eaa2:	2000      	movs	r0, #0
 800eaa4:	e007      	b.n	800eab6 <__sfputs_r+0x22>
 800eaa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eaaa:	463a      	mov	r2, r7
 800eaac:	4630      	mov	r0, r6
 800eaae:	f7ff ffda 	bl	800ea66 <__sfputc_r>
 800eab2:	1c43      	adds	r3, r0, #1
 800eab4:	d1f3      	bne.n	800ea9e <__sfputs_r+0xa>
 800eab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800eab8 <_vfiprintf_r>:
 800eab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eabc:	460d      	mov	r5, r1
 800eabe:	b09d      	sub	sp, #116	; 0x74
 800eac0:	4614      	mov	r4, r2
 800eac2:	4698      	mov	r8, r3
 800eac4:	4606      	mov	r6, r0
 800eac6:	b118      	cbz	r0, 800ead0 <_vfiprintf_r+0x18>
 800eac8:	6983      	ldr	r3, [r0, #24]
 800eaca:	b90b      	cbnz	r3, 800ead0 <_vfiprintf_r+0x18>
 800eacc:	f000 fb14 	bl	800f0f8 <__sinit>
 800ead0:	4b89      	ldr	r3, [pc, #548]	; (800ecf8 <_vfiprintf_r+0x240>)
 800ead2:	429d      	cmp	r5, r3
 800ead4:	d11b      	bne.n	800eb0e <_vfiprintf_r+0x56>
 800ead6:	6875      	ldr	r5, [r6, #4]
 800ead8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eada:	07d9      	lsls	r1, r3, #31
 800eadc:	d405      	bmi.n	800eaea <_vfiprintf_r+0x32>
 800eade:	89ab      	ldrh	r3, [r5, #12]
 800eae0:	059a      	lsls	r2, r3, #22
 800eae2:	d402      	bmi.n	800eaea <_vfiprintf_r+0x32>
 800eae4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eae6:	f000 fba5 	bl	800f234 <__retarget_lock_acquire_recursive>
 800eaea:	89ab      	ldrh	r3, [r5, #12]
 800eaec:	071b      	lsls	r3, r3, #28
 800eaee:	d501      	bpl.n	800eaf4 <_vfiprintf_r+0x3c>
 800eaf0:	692b      	ldr	r3, [r5, #16]
 800eaf2:	b9eb      	cbnz	r3, 800eb30 <_vfiprintf_r+0x78>
 800eaf4:	4629      	mov	r1, r5
 800eaf6:	4630      	mov	r0, r6
 800eaf8:	f000 f96e 	bl	800edd8 <__swsetup_r>
 800eafc:	b1c0      	cbz	r0, 800eb30 <_vfiprintf_r+0x78>
 800eafe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb00:	07dc      	lsls	r4, r3, #31
 800eb02:	d50e      	bpl.n	800eb22 <_vfiprintf_r+0x6a>
 800eb04:	f04f 30ff 	mov.w	r0, #4294967295
 800eb08:	b01d      	add	sp, #116	; 0x74
 800eb0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb0e:	4b7b      	ldr	r3, [pc, #492]	; (800ecfc <_vfiprintf_r+0x244>)
 800eb10:	429d      	cmp	r5, r3
 800eb12:	d101      	bne.n	800eb18 <_vfiprintf_r+0x60>
 800eb14:	68b5      	ldr	r5, [r6, #8]
 800eb16:	e7df      	b.n	800ead8 <_vfiprintf_r+0x20>
 800eb18:	4b79      	ldr	r3, [pc, #484]	; (800ed00 <_vfiprintf_r+0x248>)
 800eb1a:	429d      	cmp	r5, r3
 800eb1c:	bf08      	it	eq
 800eb1e:	68f5      	ldreq	r5, [r6, #12]
 800eb20:	e7da      	b.n	800ead8 <_vfiprintf_r+0x20>
 800eb22:	89ab      	ldrh	r3, [r5, #12]
 800eb24:	0598      	lsls	r0, r3, #22
 800eb26:	d4ed      	bmi.n	800eb04 <_vfiprintf_r+0x4c>
 800eb28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb2a:	f000 fb84 	bl	800f236 <__retarget_lock_release_recursive>
 800eb2e:	e7e9      	b.n	800eb04 <_vfiprintf_r+0x4c>
 800eb30:	2300      	movs	r3, #0
 800eb32:	9309      	str	r3, [sp, #36]	; 0x24
 800eb34:	2320      	movs	r3, #32
 800eb36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eb3a:	f8cd 800c 	str.w	r8, [sp, #12]
 800eb3e:	2330      	movs	r3, #48	; 0x30
 800eb40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ed04 <_vfiprintf_r+0x24c>
 800eb44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eb48:	f04f 0901 	mov.w	r9, #1
 800eb4c:	4623      	mov	r3, r4
 800eb4e:	469a      	mov	sl, r3
 800eb50:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb54:	b10a      	cbz	r2, 800eb5a <_vfiprintf_r+0xa2>
 800eb56:	2a25      	cmp	r2, #37	; 0x25
 800eb58:	d1f9      	bne.n	800eb4e <_vfiprintf_r+0x96>
 800eb5a:	ebba 0b04 	subs.w	fp, sl, r4
 800eb5e:	d00b      	beq.n	800eb78 <_vfiprintf_r+0xc0>
 800eb60:	465b      	mov	r3, fp
 800eb62:	4622      	mov	r2, r4
 800eb64:	4629      	mov	r1, r5
 800eb66:	4630      	mov	r0, r6
 800eb68:	f7ff ff94 	bl	800ea94 <__sfputs_r>
 800eb6c:	3001      	adds	r0, #1
 800eb6e:	f000 80aa 	beq.w	800ecc6 <_vfiprintf_r+0x20e>
 800eb72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb74:	445a      	add	r2, fp
 800eb76:	9209      	str	r2, [sp, #36]	; 0x24
 800eb78:	f89a 3000 	ldrb.w	r3, [sl]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	f000 80a2 	beq.w	800ecc6 <_vfiprintf_r+0x20e>
 800eb82:	2300      	movs	r3, #0
 800eb84:	f04f 32ff 	mov.w	r2, #4294967295
 800eb88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb8c:	f10a 0a01 	add.w	sl, sl, #1
 800eb90:	9304      	str	r3, [sp, #16]
 800eb92:	9307      	str	r3, [sp, #28]
 800eb94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb98:	931a      	str	r3, [sp, #104]	; 0x68
 800eb9a:	4654      	mov	r4, sl
 800eb9c:	2205      	movs	r2, #5
 800eb9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eba2:	4858      	ldr	r0, [pc, #352]	; (800ed04 <_vfiprintf_r+0x24c>)
 800eba4:	f7f1 fb24 	bl	80001f0 <memchr>
 800eba8:	9a04      	ldr	r2, [sp, #16]
 800ebaa:	b9d8      	cbnz	r0, 800ebe4 <_vfiprintf_r+0x12c>
 800ebac:	06d1      	lsls	r1, r2, #27
 800ebae:	bf44      	itt	mi
 800ebb0:	2320      	movmi	r3, #32
 800ebb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ebb6:	0713      	lsls	r3, r2, #28
 800ebb8:	bf44      	itt	mi
 800ebba:	232b      	movmi	r3, #43	; 0x2b
 800ebbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ebc0:	f89a 3000 	ldrb.w	r3, [sl]
 800ebc4:	2b2a      	cmp	r3, #42	; 0x2a
 800ebc6:	d015      	beq.n	800ebf4 <_vfiprintf_r+0x13c>
 800ebc8:	9a07      	ldr	r2, [sp, #28]
 800ebca:	4654      	mov	r4, sl
 800ebcc:	2000      	movs	r0, #0
 800ebce:	f04f 0c0a 	mov.w	ip, #10
 800ebd2:	4621      	mov	r1, r4
 800ebd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ebd8:	3b30      	subs	r3, #48	; 0x30
 800ebda:	2b09      	cmp	r3, #9
 800ebdc:	d94e      	bls.n	800ec7c <_vfiprintf_r+0x1c4>
 800ebde:	b1b0      	cbz	r0, 800ec0e <_vfiprintf_r+0x156>
 800ebe0:	9207      	str	r2, [sp, #28]
 800ebe2:	e014      	b.n	800ec0e <_vfiprintf_r+0x156>
 800ebe4:	eba0 0308 	sub.w	r3, r0, r8
 800ebe8:	fa09 f303 	lsl.w	r3, r9, r3
 800ebec:	4313      	orrs	r3, r2
 800ebee:	9304      	str	r3, [sp, #16]
 800ebf0:	46a2      	mov	sl, r4
 800ebf2:	e7d2      	b.n	800eb9a <_vfiprintf_r+0xe2>
 800ebf4:	9b03      	ldr	r3, [sp, #12]
 800ebf6:	1d19      	adds	r1, r3, #4
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	9103      	str	r1, [sp, #12]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	bfbb      	ittet	lt
 800ec00:	425b      	neglt	r3, r3
 800ec02:	f042 0202 	orrlt.w	r2, r2, #2
 800ec06:	9307      	strge	r3, [sp, #28]
 800ec08:	9307      	strlt	r3, [sp, #28]
 800ec0a:	bfb8      	it	lt
 800ec0c:	9204      	strlt	r2, [sp, #16]
 800ec0e:	7823      	ldrb	r3, [r4, #0]
 800ec10:	2b2e      	cmp	r3, #46	; 0x2e
 800ec12:	d10c      	bne.n	800ec2e <_vfiprintf_r+0x176>
 800ec14:	7863      	ldrb	r3, [r4, #1]
 800ec16:	2b2a      	cmp	r3, #42	; 0x2a
 800ec18:	d135      	bne.n	800ec86 <_vfiprintf_r+0x1ce>
 800ec1a:	9b03      	ldr	r3, [sp, #12]
 800ec1c:	1d1a      	adds	r2, r3, #4
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	9203      	str	r2, [sp, #12]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	bfb8      	it	lt
 800ec26:	f04f 33ff 	movlt.w	r3, #4294967295
 800ec2a:	3402      	adds	r4, #2
 800ec2c:	9305      	str	r3, [sp, #20]
 800ec2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ed14 <_vfiprintf_r+0x25c>
 800ec32:	7821      	ldrb	r1, [r4, #0]
 800ec34:	2203      	movs	r2, #3
 800ec36:	4650      	mov	r0, sl
 800ec38:	f7f1 fada 	bl	80001f0 <memchr>
 800ec3c:	b140      	cbz	r0, 800ec50 <_vfiprintf_r+0x198>
 800ec3e:	2340      	movs	r3, #64	; 0x40
 800ec40:	eba0 000a 	sub.w	r0, r0, sl
 800ec44:	fa03 f000 	lsl.w	r0, r3, r0
 800ec48:	9b04      	ldr	r3, [sp, #16]
 800ec4a:	4303      	orrs	r3, r0
 800ec4c:	3401      	adds	r4, #1
 800ec4e:	9304      	str	r3, [sp, #16]
 800ec50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec54:	482c      	ldr	r0, [pc, #176]	; (800ed08 <_vfiprintf_r+0x250>)
 800ec56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ec5a:	2206      	movs	r2, #6
 800ec5c:	f7f1 fac8 	bl	80001f0 <memchr>
 800ec60:	2800      	cmp	r0, #0
 800ec62:	d03f      	beq.n	800ece4 <_vfiprintf_r+0x22c>
 800ec64:	4b29      	ldr	r3, [pc, #164]	; (800ed0c <_vfiprintf_r+0x254>)
 800ec66:	bb1b      	cbnz	r3, 800ecb0 <_vfiprintf_r+0x1f8>
 800ec68:	9b03      	ldr	r3, [sp, #12]
 800ec6a:	3307      	adds	r3, #7
 800ec6c:	f023 0307 	bic.w	r3, r3, #7
 800ec70:	3308      	adds	r3, #8
 800ec72:	9303      	str	r3, [sp, #12]
 800ec74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec76:	443b      	add	r3, r7
 800ec78:	9309      	str	r3, [sp, #36]	; 0x24
 800ec7a:	e767      	b.n	800eb4c <_vfiprintf_r+0x94>
 800ec7c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec80:	460c      	mov	r4, r1
 800ec82:	2001      	movs	r0, #1
 800ec84:	e7a5      	b.n	800ebd2 <_vfiprintf_r+0x11a>
 800ec86:	2300      	movs	r3, #0
 800ec88:	3401      	adds	r4, #1
 800ec8a:	9305      	str	r3, [sp, #20]
 800ec8c:	4619      	mov	r1, r3
 800ec8e:	f04f 0c0a 	mov.w	ip, #10
 800ec92:	4620      	mov	r0, r4
 800ec94:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec98:	3a30      	subs	r2, #48	; 0x30
 800ec9a:	2a09      	cmp	r2, #9
 800ec9c:	d903      	bls.n	800eca6 <_vfiprintf_r+0x1ee>
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d0c5      	beq.n	800ec2e <_vfiprintf_r+0x176>
 800eca2:	9105      	str	r1, [sp, #20]
 800eca4:	e7c3      	b.n	800ec2e <_vfiprintf_r+0x176>
 800eca6:	fb0c 2101 	mla	r1, ip, r1, r2
 800ecaa:	4604      	mov	r4, r0
 800ecac:	2301      	movs	r3, #1
 800ecae:	e7f0      	b.n	800ec92 <_vfiprintf_r+0x1da>
 800ecb0:	ab03      	add	r3, sp, #12
 800ecb2:	9300      	str	r3, [sp, #0]
 800ecb4:	462a      	mov	r2, r5
 800ecb6:	4b16      	ldr	r3, [pc, #88]	; (800ed10 <_vfiprintf_r+0x258>)
 800ecb8:	a904      	add	r1, sp, #16
 800ecba:	4630      	mov	r0, r6
 800ecbc:	f7fd fddc 	bl	800c878 <_printf_float>
 800ecc0:	4607      	mov	r7, r0
 800ecc2:	1c78      	adds	r0, r7, #1
 800ecc4:	d1d6      	bne.n	800ec74 <_vfiprintf_r+0x1bc>
 800ecc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ecc8:	07d9      	lsls	r1, r3, #31
 800ecca:	d405      	bmi.n	800ecd8 <_vfiprintf_r+0x220>
 800eccc:	89ab      	ldrh	r3, [r5, #12]
 800ecce:	059a      	lsls	r2, r3, #22
 800ecd0:	d402      	bmi.n	800ecd8 <_vfiprintf_r+0x220>
 800ecd2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ecd4:	f000 faaf 	bl	800f236 <__retarget_lock_release_recursive>
 800ecd8:	89ab      	ldrh	r3, [r5, #12]
 800ecda:	065b      	lsls	r3, r3, #25
 800ecdc:	f53f af12 	bmi.w	800eb04 <_vfiprintf_r+0x4c>
 800ece0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ece2:	e711      	b.n	800eb08 <_vfiprintf_r+0x50>
 800ece4:	ab03      	add	r3, sp, #12
 800ece6:	9300      	str	r3, [sp, #0]
 800ece8:	462a      	mov	r2, r5
 800ecea:	4b09      	ldr	r3, [pc, #36]	; (800ed10 <_vfiprintf_r+0x258>)
 800ecec:	a904      	add	r1, sp, #16
 800ecee:	4630      	mov	r0, r6
 800ecf0:	f7fe f866 	bl	800cdc0 <_printf_i>
 800ecf4:	e7e4      	b.n	800ecc0 <_vfiprintf_r+0x208>
 800ecf6:	bf00      	nop
 800ecf8:	0800f9c4 	.word	0x0800f9c4
 800ecfc:	0800f9e4 	.word	0x0800f9e4
 800ed00:	0800f9a4 	.word	0x0800f9a4
 800ed04:	0800f84c 	.word	0x0800f84c
 800ed08:	0800f856 	.word	0x0800f856
 800ed0c:	0800c879 	.word	0x0800c879
 800ed10:	0800ea95 	.word	0x0800ea95
 800ed14:	0800f852 	.word	0x0800f852

0800ed18 <__swbuf_r>:
 800ed18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed1a:	460e      	mov	r6, r1
 800ed1c:	4614      	mov	r4, r2
 800ed1e:	4605      	mov	r5, r0
 800ed20:	b118      	cbz	r0, 800ed2a <__swbuf_r+0x12>
 800ed22:	6983      	ldr	r3, [r0, #24]
 800ed24:	b90b      	cbnz	r3, 800ed2a <__swbuf_r+0x12>
 800ed26:	f000 f9e7 	bl	800f0f8 <__sinit>
 800ed2a:	4b21      	ldr	r3, [pc, #132]	; (800edb0 <__swbuf_r+0x98>)
 800ed2c:	429c      	cmp	r4, r3
 800ed2e:	d12b      	bne.n	800ed88 <__swbuf_r+0x70>
 800ed30:	686c      	ldr	r4, [r5, #4]
 800ed32:	69a3      	ldr	r3, [r4, #24]
 800ed34:	60a3      	str	r3, [r4, #8]
 800ed36:	89a3      	ldrh	r3, [r4, #12]
 800ed38:	071a      	lsls	r2, r3, #28
 800ed3a:	d52f      	bpl.n	800ed9c <__swbuf_r+0x84>
 800ed3c:	6923      	ldr	r3, [r4, #16]
 800ed3e:	b36b      	cbz	r3, 800ed9c <__swbuf_r+0x84>
 800ed40:	6923      	ldr	r3, [r4, #16]
 800ed42:	6820      	ldr	r0, [r4, #0]
 800ed44:	1ac0      	subs	r0, r0, r3
 800ed46:	6963      	ldr	r3, [r4, #20]
 800ed48:	b2f6      	uxtb	r6, r6
 800ed4a:	4283      	cmp	r3, r0
 800ed4c:	4637      	mov	r7, r6
 800ed4e:	dc04      	bgt.n	800ed5a <__swbuf_r+0x42>
 800ed50:	4621      	mov	r1, r4
 800ed52:	4628      	mov	r0, r5
 800ed54:	f000 f93c 	bl	800efd0 <_fflush_r>
 800ed58:	bb30      	cbnz	r0, 800eda8 <__swbuf_r+0x90>
 800ed5a:	68a3      	ldr	r3, [r4, #8]
 800ed5c:	3b01      	subs	r3, #1
 800ed5e:	60a3      	str	r3, [r4, #8]
 800ed60:	6823      	ldr	r3, [r4, #0]
 800ed62:	1c5a      	adds	r2, r3, #1
 800ed64:	6022      	str	r2, [r4, #0]
 800ed66:	701e      	strb	r6, [r3, #0]
 800ed68:	6963      	ldr	r3, [r4, #20]
 800ed6a:	3001      	adds	r0, #1
 800ed6c:	4283      	cmp	r3, r0
 800ed6e:	d004      	beq.n	800ed7a <__swbuf_r+0x62>
 800ed70:	89a3      	ldrh	r3, [r4, #12]
 800ed72:	07db      	lsls	r3, r3, #31
 800ed74:	d506      	bpl.n	800ed84 <__swbuf_r+0x6c>
 800ed76:	2e0a      	cmp	r6, #10
 800ed78:	d104      	bne.n	800ed84 <__swbuf_r+0x6c>
 800ed7a:	4621      	mov	r1, r4
 800ed7c:	4628      	mov	r0, r5
 800ed7e:	f000 f927 	bl	800efd0 <_fflush_r>
 800ed82:	b988      	cbnz	r0, 800eda8 <__swbuf_r+0x90>
 800ed84:	4638      	mov	r0, r7
 800ed86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed88:	4b0a      	ldr	r3, [pc, #40]	; (800edb4 <__swbuf_r+0x9c>)
 800ed8a:	429c      	cmp	r4, r3
 800ed8c:	d101      	bne.n	800ed92 <__swbuf_r+0x7a>
 800ed8e:	68ac      	ldr	r4, [r5, #8]
 800ed90:	e7cf      	b.n	800ed32 <__swbuf_r+0x1a>
 800ed92:	4b09      	ldr	r3, [pc, #36]	; (800edb8 <__swbuf_r+0xa0>)
 800ed94:	429c      	cmp	r4, r3
 800ed96:	bf08      	it	eq
 800ed98:	68ec      	ldreq	r4, [r5, #12]
 800ed9a:	e7ca      	b.n	800ed32 <__swbuf_r+0x1a>
 800ed9c:	4621      	mov	r1, r4
 800ed9e:	4628      	mov	r0, r5
 800eda0:	f000 f81a 	bl	800edd8 <__swsetup_r>
 800eda4:	2800      	cmp	r0, #0
 800eda6:	d0cb      	beq.n	800ed40 <__swbuf_r+0x28>
 800eda8:	f04f 37ff 	mov.w	r7, #4294967295
 800edac:	e7ea      	b.n	800ed84 <__swbuf_r+0x6c>
 800edae:	bf00      	nop
 800edb0:	0800f9c4 	.word	0x0800f9c4
 800edb4:	0800f9e4 	.word	0x0800f9e4
 800edb8:	0800f9a4 	.word	0x0800f9a4

0800edbc <__ascii_wctomb>:
 800edbc:	b149      	cbz	r1, 800edd2 <__ascii_wctomb+0x16>
 800edbe:	2aff      	cmp	r2, #255	; 0xff
 800edc0:	bf85      	ittet	hi
 800edc2:	238a      	movhi	r3, #138	; 0x8a
 800edc4:	6003      	strhi	r3, [r0, #0]
 800edc6:	700a      	strbls	r2, [r1, #0]
 800edc8:	f04f 30ff 	movhi.w	r0, #4294967295
 800edcc:	bf98      	it	ls
 800edce:	2001      	movls	r0, #1
 800edd0:	4770      	bx	lr
 800edd2:	4608      	mov	r0, r1
 800edd4:	4770      	bx	lr
	...

0800edd8 <__swsetup_r>:
 800edd8:	4b32      	ldr	r3, [pc, #200]	; (800eea4 <__swsetup_r+0xcc>)
 800edda:	b570      	push	{r4, r5, r6, lr}
 800eddc:	681d      	ldr	r5, [r3, #0]
 800edde:	4606      	mov	r6, r0
 800ede0:	460c      	mov	r4, r1
 800ede2:	b125      	cbz	r5, 800edee <__swsetup_r+0x16>
 800ede4:	69ab      	ldr	r3, [r5, #24]
 800ede6:	b913      	cbnz	r3, 800edee <__swsetup_r+0x16>
 800ede8:	4628      	mov	r0, r5
 800edea:	f000 f985 	bl	800f0f8 <__sinit>
 800edee:	4b2e      	ldr	r3, [pc, #184]	; (800eea8 <__swsetup_r+0xd0>)
 800edf0:	429c      	cmp	r4, r3
 800edf2:	d10f      	bne.n	800ee14 <__swsetup_r+0x3c>
 800edf4:	686c      	ldr	r4, [r5, #4]
 800edf6:	89a3      	ldrh	r3, [r4, #12]
 800edf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800edfc:	0719      	lsls	r1, r3, #28
 800edfe:	d42c      	bmi.n	800ee5a <__swsetup_r+0x82>
 800ee00:	06dd      	lsls	r5, r3, #27
 800ee02:	d411      	bmi.n	800ee28 <__swsetup_r+0x50>
 800ee04:	2309      	movs	r3, #9
 800ee06:	6033      	str	r3, [r6, #0]
 800ee08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ee0c:	81a3      	strh	r3, [r4, #12]
 800ee0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ee12:	e03e      	b.n	800ee92 <__swsetup_r+0xba>
 800ee14:	4b25      	ldr	r3, [pc, #148]	; (800eeac <__swsetup_r+0xd4>)
 800ee16:	429c      	cmp	r4, r3
 800ee18:	d101      	bne.n	800ee1e <__swsetup_r+0x46>
 800ee1a:	68ac      	ldr	r4, [r5, #8]
 800ee1c:	e7eb      	b.n	800edf6 <__swsetup_r+0x1e>
 800ee1e:	4b24      	ldr	r3, [pc, #144]	; (800eeb0 <__swsetup_r+0xd8>)
 800ee20:	429c      	cmp	r4, r3
 800ee22:	bf08      	it	eq
 800ee24:	68ec      	ldreq	r4, [r5, #12]
 800ee26:	e7e6      	b.n	800edf6 <__swsetup_r+0x1e>
 800ee28:	0758      	lsls	r0, r3, #29
 800ee2a:	d512      	bpl.n	800ee52 <__swsetup_r+0x7a>
 800ee2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee2e:	b141      	cbz	r1, 800ee42 <__swsetup_r+0x6a>
 800ee30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee34:	4299      	cmp	r1, r3
 800ee36:	d002      	beq.n	800ee3e <__swsetup_r+0x66>
 800ee38:	4630      	mov	r0, r6
 800ee3a:	f7ff fb31 	bl	800e4a0 <_free_r>
 800ee3e:	2300      	movs	r3, #0
 800ee40:	6363      	str	r3, [r4, #52]	; 0x34
 800ee42:	89a3      	ldrh	r3, [r4, #12]
 800ee44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ee48:	81a3      	strh	r3, [r4, #12]
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	6063      	str	r3, [r4, #4]
 800ee4e:	6923      	ldr	r3, [r4, #16]
 800ee50:	6023      	str	r3, [r4, #0]
 800ee52:	89a3      	ldrh	r3, [r4, #12]
 800ee54:	f043 0308 	orr.w	r3, r3, #8
 800ee58:	81a3      	strh	r3, [r4, #12]
 800ee5a:	6923      	ldr	r3, [r4, #16]
 800ee5c:	b94b      	cbnz	r3, 800ee72 <__swsetup_r+0x9a>
 800ee5e:	89a3      	ldrh	r3, [r4, #12]
 800ee60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ee64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee68:	d003      	beq.n	800ee72 <__swsetup_r+0x9a>
 800ee6a:	4621      	mov	r1, r4
 800ee6c:	4630      	mov	r0, r6
 800ee6e:	f000 fa09 	bl	800f284 <__smakebuf_r>
 800ee72:	89a0      	ldrh	r0, [r4, #12]
 800ee74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee78:	f010 0301 	ands.w	r3, r0, #1
 800ee7c:	d00a      	beq.n	800ee94 <__swsetup_r+0xbc>
 800ee7e:	2300      	movs	r3, #0
 800ee80:	60a3      	str	r3, [r4, #8]
 800ee82:	6963      	ldr	r3, [r4, #20]
 800ee84:	425b      	negs	r3, r3
 800ee86:	61a3      	str	r3, [r4, #24]
 800ee88:	6923      	ldr	r3, [r4, #16]
 800ee8a:	b943      	cbnz	r3, 800ee9e <__swsetup_r+0xc6>
 800ee8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ee90:	d1ba      	bne.n	800ee08 <__swsetup_r+0x30>
 800ee92:	bd70      	pop	{r4, r5, r6, pc}
 800ee94:	0781      	lsls	r1, r0, #30
 800ee96:	bf58      	it	pl
 800ee98:	6963      	ldrpl	r3, [r4, #20]
 800ee9a:	60a3      	str	r3, [r4, #8]
 800ee9c:	e7f4      	b.n	800ee88 <__swsetup_r+0xb0>
 800ee9e:	2000      	movs	r0, #0
 800eea0:	e7f7      	b.n	800ee92 <__swsetup_r+0xba>
 800eea2:	bf00      	nop
 800eea4:	20000478 	.word	0x20000478
 800eea8:	0800f9c4 	.word	0x0800f9c4
 800eeac:	0800f9e4 	.word	0x0800f9e4
 800eeb0:	0800f9a4 	.word	0x0800f9a4

0800eeb4 <abort>:
 800eeb4:	b508      	push	{r3, lr}
 800eeb6:	2006      	movs	r0, #6
 800eeb8:	f000 fa54 	bl	800f364 <raise>
 800eebc:	2001      	movs	r0, #1
 800eebe:	f7f3 f877 	bl	8001fb0 <_exit>
	...

0800eec4 <__sflush_r>:
 800eec4:	898a      	ldrh	r2, [r1, #12]
 800eec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eeca:	4605      	mov	r5, r0
 800eecc:	0710      	lsls	r0, r2, #28
 800eece:	460c      	mov	r4, r1
 800eed0:	d458      	bmi.n	800ef84 <__sflush_r+0xc0>
 800eed2:	684b      	ldr	r3, [r1, #4]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	dc05      	bgt.n	800eee4 <__sflush_r+0x20>
 800eed8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	dc02      	bgt.n	800eee4 <__sflush_r+0x20>
 800eede:	2000      	movs	r0, #0
 800eee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eee4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eee6:	2e00      	cmp	r6, #0
 800eee8:	d0f9      	beq.n	800eede <__sflush_r+0x1a>
 800eeea:	2300      	movs	r3, #0
 800eeec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eef0:	682f      	ldr	r7, [r5, #0]
 800eef2:	602b      	str	r3, [r5, #0]
 800eef4:	d032      	beq.n	800ef5c <__sflush_r+0x98>
 800eef6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eef8:	89a3      	ldrh	r3, [r4, #12]
 800eefa:	075a      	lsls	r2, r3, #29
 800eefc:	d505      	bpl.n	800ef0a <__sflush_r+0x46>
 800eefe:	6863      	ldr	r3, [r4, #4]
 800ef00:	1ac0      	subs	r0, r0, r3
 800ef02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ef04:	b10b      	cbz	r3, 800ef0a <__sflush_r+0x46>
 800ef06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ef08:	1ac0      	subs	r0, r0, r3
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	4602      	mov	r2, r0
 800ef0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ef10:	6a21      	ldr	r1, [r4, #32]
 800ef12:	4628      	mov	r0, r5
 800ef14:	47b0      	blx	r6
 800ef16:	1c43      	adds	r3, r0, #1
 800ef18:	89a3      	ldrh	r3, [r4, #12]
 800ef1a:	d106      	bne.n	800ef2a <__sflush_r+0x66>
 800ef1c:	6829      	ldr	r1, [r5, #0]
 800ef1e:	291d      	cmp	r1, #29
 800ef20:	d82c      	bhi.n	800ef7c <__sflush_r+0xb8>
 800ef22:	4a2a      	ldr	r2, [pc, #168]	; (800efcc <__sflush_r+0x108>)
 800ef24:	40ca      	lsrs	r2, r1
 800ef26:	07d6      	lsls	r6, r2, #31
 800ef28:	d528      	bpl.n	800ef7c <__sflush_r+0xb8>
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	6062      	str	r2, [r4, #4]
 800ef2e:	04d9      	lsls	r1, r3, #19
 800ef30:	6922      	ldr	r2, [r4, #16]
 800ef32:	6022      	str	r2, [r4, #0]
 800ef34:	d504      	bpl.n	800ef40 <__sflush_r+0x7c>
 800ef36:	1c42      	adds	r2, r0, #1
 800ef38:	d101      	bne.n	800ef3e <__sflush_r+0x7a>
 800ef3a:	682b      	ldr	r3, [r5, #0]
 800ef3c:	b903      	cbnz	r3, 800ef40 <__sflush_r+0x7c>
 800ef3e:	6560      	str	r0, [r4, #84]	; 0x54
 800ef40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef42:	602f      	str	r7, [r5, #0]
 800ef44:	2900      	cmp	r1, #0
 800ef46:	d0ca      	beq.n	800eede <__sflush_r+0x1a>
 800ef48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef4c:	4299      	cmp	r1, r3
 800ef4e:	d002      	beq.n	800ef56 <__sflush_r+0x92>
 800ef50:	4628      	mov	r0, r5
 800ef52:	f7ff faa5 	bl	800e4a0 <_free_r>
 800ef56:	2000      	movs	r0, #0
 800ef58:	6360      	str	r0, [r4, #52]	; 0x34
 800ef5a:	e7c1      	b.n	800eee0 <__sflush_r+0x1c>
 800ef5c:	6a21      	ldr	r1, [r4, #32]
 800ef5e:	2301      	movs	r3, #1
 800ef60:	4628      	mov	r0, r5
 800ef62:	47b0      	blx	r6
 800ef64:	1c41      	adds	r1, r0, #1
 800ef66:	d1c7      	bne.n	800eef8 <__sflush_r+0x34>
 800ef68:	682b      	ldr	r3, [r5, #0]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d0c4      	beq.n	800eef8 <__sflush_r+0x34>
 800ef6e:	2b1d      	cmp	r3, #29
 800ef70:	d001      	beq.n	800ef76 <__sflush_r+0xb2>
 800ef72:	2b16      	cmp	r3, #22
 800ef74:	d101      	bne.n	800ef7a <__sflush_r+0xb6>
 800ef76:	602f      	str	r7, [r5, #0]
 800ef78:	e7b1      	b.n	800eede <__sflush_r+0x1a>
 800ef7a:	89a3      	ldrh	r3, [r4, #12]
 800ef7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef80:	81a3      	strh	r3, [r4, #12]
 800ef82:	e7ad      	b.n	800eee0 <__sflush_r+0x1c>
 800ef84:	690f      	ldr	r7, [r1, #16]
 800ef86:	2f00      	cmp	r7, #0
 800ef88:	d0a9      	beq.n	800eede <__sflush_r+0x1a>
 800ef8a:	0793      	lsls	r3, r2, #30
 800ef8c:	680e      	ldr	r6, [r1, #0]
 800ef8e:	bf08      	it	eq
 800ef90:	694b      	ldreq	r3, [r1, #20]
 800ef92:	600f      	str	r7, [r1, #0]
 800ef94:	bf18      	it	ne
 800ef96:	2300      	movne	r3, #0
 800ef98:	eba6 0807 	sub.w	r8, r6, r7
 800ef9c:	608b      	str	r3, [r1, #8]
 800ef9e:	f1b8 0f00 	cmp.w	r8, #0
 800efa2:	dd9c      	ble.n	800eede <__sflush_r+0x1a>
 800efa4:	6a21      	ldr	r1, [r4, #32]
 800efa6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800efa8:	4643      	mov	r3, r8
 800efaa:	463a      	mov	r2, r7
 800efac:	4628      	mov	r0, r5
 800efae:	47b0      	blx	r6
 800efb0:	2800      	cmp	r0, #0
 800efb2:	dc06      	bgt.n	800efc2 <__sflush_r+0xfe>
 800efb4:	89a3      	ldrh	r3, [r4, #12]
 800efb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efba:	81a3      	strh	r3, [r4, #12]
 800efbc:	f04f 30ff 	mov.w	r0, #4294967295
 800efc0:	e78e      	b.n	800eee0 <__sflush_r+0x1c>
 800efc2:	4407      	add	r7, r0
 800efc4:	eba8 0800 	sub.w	r8, r8, r0
 800efc8:	e7e9      	b.n	800ef9e <__sflush_r+0xda>
 800efca:	bf00      	nop
 800efcc:	20400001 	.word	0x20400001

0800efd0 <_fflush_r>:
 800efd0:	b538      	push	{r3, r4, r5, lr}
 800efd2:	690b      	ldr	r3, [r1, #16]
 800efd4:	4605      	mov	r5, r0
 800efd6:	460c      	mov	r4, r1
 800efd8:	b913      	cbnz	r3, 800efe0 <_fflush_r+0x10>
 800efda:	2500      	movs	r5, #0
 800efdc:	4628      	mov	r0, r5
 800efde:	bd38      	pop	{r3, r4, r5, pc}
 800efe0:	b118      	cbz	r0, 800efea <_fflush_r+0x1a>
 800efe2:	6983      	ldr	r3, [r0, #24]
 800efe4:	b90b      	cbnz	r3, 800efea <_fflush_r+0x1a>
 800efe6:	f000 f887 	bl	800f0f8 <__sinit>
 800efea:	4b14      	ldr	r3, [pc, #80]	; (800f03c <_fflush_r+0x6c>)
 800efec:	429c      	cmp	r4, r3
 800efee:	d11b      	bne.n	800f028 <_fflush_r+0x58>
 800eff0:	686c      	ldr	r4, [r5, #4]
 800eff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d0ef      	beq.n	800efda <_fflush_r+0xa>
 800effa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800effc:	07d0      	lsls	r0, r2, #31
 800effe:	d404      	bmi.n	800f00a <_fflush_r+0x3a>
 800f000:	0599      	lsls	r1, r3, #22
 800f002:	d402      	bmi.n	800f00a <_fflush_r+0x3a>
 800f004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f006:	f000 f915 	bl	800f234 <__retarget_lock_acquire_recursive>
 800f00a:	4628      	mov	r0, r5
 800f00c:	4621      	mov	r1, r4
 800f00e:	f7ff ff59 	bl	800eec4 <__sflush_r>
 800f012:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f014:	07da      	lsls	r2, r3, #31
 800f016:	4605      	mov	r5, r0
 800f018:	d4e0      	bmi.n	800efdc <_fflush_r+0xc>
 800f01a:	89a3      	ldrh	r3, [r4, #12]
 800f01c:	059b      	lsls	r3, r3, #22
 800f01e:	d4dd      	bmi.n	800efdc <_fflush_r+0xc>
 800f020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f022:	f000 f908 	bl	800f236 <__retarget_lock_release_recursive>
 800f026:	e7d9      	b.n	800efdc <_fflush_r+0xc>
 800f028:	4b05      	ldr	r3, [pc, #20]	; (800f040 <_fflush_r+0x70>)
 800f02a:	429c      	cmp	r4, r3
 800f02c:	d101      	bne.n	800f032 <_fflush_r+0x62>
 800f02e:	68ac      	ldr	r4, [r5, #8]
 800f030:	e7df      	b.n	800eff2 <_fflush_r+0x22>
 800f032:	4b04      	ldr	r3, [pc, #16]	; (800f044 <_fflush_r+0x74>)
 800f034:	429c      	cmp	r4, r3
 800f036:	bf08      	it	eq
 800f038:	68ec      	ldreq	r4, [r5, #12]
 800f03a:	e7da      	b.n	800eff2 <_fflush_r+0x22>
 800f03c:	0800f9c4 	.word	0x0800f9c4
 800f040:	0800f9e4 	.word	0x0800f9e4
 800f044:	0800f9a4 	.word	0x0800f9a4

0800f048 <std>:
 800f048:	2300      	movs	r3, #0
 800f04a:	b510      	push	{r4, lr}
 800f04c:	4604      	mov	r4, r0
 800f04e:	e9c0 3300 	strd	r3, r3, [r0]
 800f052:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f056:	6083      	str	r3, [r0, #8]
 800f058:	8181      	strh	r1, [r0, #12]
 800f05a:	6643      	str	r3, [r0, #100]	; 0x64
 800f05c:	81c2      	strh	r2, [r0, #14]
 800f05e:	6183      	str	r3, [r0, #24]
 800f060:	4619      	mov	r1, r3
 800f062:	2208      	movs	r2, #8
 800f064:	305c      	adds	r0, #92	; 0x5c
 800f066:	f7fd fb5f 	bl	800c728 <memset>
 800f06a:	4b05      	ldr	r3, [pc, #20]	; (800f080 <std+0x38>)
 800f06c:	6263      	str	r3, [r4, #36]	; 0x24
 800f06e:	4b05      	ldr	r3, [pc, #20]	; (800f084 <std+0x3c>)
 800f070:	62a3      	str	r3, [r4, #40]	; 0x28
 800f072:	4b05      	ldr	r3, [pc, #20]	; (800f088 <std+0x40>)
 800f074:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f076:	4b05      	ldr	r3, [pc, #20]	; (800f08c <std+0x44>)
 800f078:	6224      	str	r4, [r4, #32]
 800f07a:	6323      	str	r3, [r4, #48]	; 0x30
 800f07c:	bd10      	pop	{r4, pc}
 800f07e:	bf00      	nop
 800f080:	0800f39d 	.word	0x0800f39d
 800f084:	0800f3bf 	.word	0x0800f3bf
 800f088:	0800f3f7 	.word	0x0800f3f7
 800f08c:	0800f41b 	.word	0x0800f41b

0800f090 <_cleanup_r>:
 800f090:	4901      	ldr	r1, [pc, #4]	; (800f098 <_cleanup_r+0x8>)
 800f092:	f000 b8af 	b.w	800f1f4 <_fwalk_reent>
 800f096:	bf00      	nop
 800f098:	0800efd1 	.word	0x0800efd1

0800f09c <__sfmoreglue>:
 800f09c:	b570      	push	{r4, r5, r6, lr}
 800f09e:	2268      	movs	r2, #104	; 0x68
 800f0a0:	1e4d      	subs	r5, r1, #1
 800f0a2:	4355      	muls	r5, r2
 800f0a4:	460e      	mov	r6, r1
 800f0a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f0aa:	f7ff fa65 	bl	800e578 <_malloc_r>
 800f0ae:	4604      	mov	r4, r0
 800f0b0:	b140      	cbz	r0, 800f0c4 <__sfmoreglue+0x28>
 800f0b2:	2100      	movs	r1, #0
 800f0b4:	e9c0 1600 	strd	r1, r6, [r0]
 800f0b8:	300c      	adds	r0, #12
 800f0ba:	60a0      	str	r0, [r4, #8]
 800f0bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f0c0:	f7fd fb32 	bl	800c728 <memset>
 800f0c4:	4620      	mov	r0, r4
 800f0c6:	bd70      	pop	{r4, r5, r6, pc}

0800f0c8 <__sfp_lock_acquire>:
 800f0c8:	4801      	ldr	r0, [pc, #4]	; (800f0d0 <__sfp_lock_acquire+0x8>)
 800f0ca:	f000 b8b3 	b.w	800f234 <__retarget_lock_acquire_recursive>
 800f0ce:	bf00      	nop
 800f0d0:	20000d59 	.word	0x20000d59

0800f0d4 <__sfp_lock_release>:
 800f0d4:	4801      	ldr	r0, [pc, #4]	; (800f0dc <__sfp_lock_release+0x8>)
 800f0d6:	f000 b8ae 	b.w	800f236 <__retarget_lock_release_recursive>
 800f0da:	bf00      	nop
 800f0dc:	20000d59 	.word	0x20000d59

0800f0e0 <__sinit_lock_acquire>:
 800f0e0:	4801      	ldr	r0, [pc, #4]	; (800f0e8 <__sinit_lock_acquire+0x8>)
 800f0e2:	f000 b8a7 	b.w	800f234 <__retarget_lock_acquire_recursive>
 800f0e6:	bf00      	nop
 800f0e8:	20000d5a 	.word	0x20000d5a

0800f0ec <__sinit_lock_release>:
 800f0ec:	4801      	ldr	r0, [pc, #4]	; (800f0f4 <__sinit_lock_release+0x8>)
 800f0ee:	f000 b8a2 	b.w	800f236 <__retarget_lock_release_recursive>
 800f0f2:	bf00      	nop
 800f0f4:	20000d5a 	.word	0x20000d5a

0800f0f8 <__sinit>:
 800f0f8:	b510      	push	{r4, lr}
 800f0fa:	4604      	mov	r4, r0
 800f0fc:	f7ff fff0 	bl	800f0e0 <__sinit_lock_acquire>
 800f100:	69a3      	ldr	r3, [r4, #24]
 800f102:	b11b      	cbz	r3, 800f10c <__sinit+0x14>
 800f104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f108:	f7ff bff0 	b.w	800f0ec <__sinit_lock_release>
 800f10c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f110:	6523      	str	r3, [r4, #80]	; 0x50
 800f112:	4b13      	ldr	r3, [pc, #76]	; (800f160 <__sinit+0x68>)
 800f114:	4a13      	ldr	r2, [pc, #76]	; (800f164 <__sinit+0x6c>)
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	62a2      	str	r2, [r4, #40]	; 0x28
 800f11a:	42a3      	cmp	r3, r4
 800f11c:	bf04      	itt	eq
 800f11e:	2301      	moveq	r3, #1
 800f120:	61a3      	streq	r3, [r4, #24]
 800f122:	4620      	mov	r0, r4
 800f124:	f000 f820 	bl	800f168 <__sfp>
 800f128:	6060      	str	r0, [r4, #4]
 800f12a:	4620      	mov	r0, r4
 800f12c:	f000 f81c 	bl	800f168 <__sfp>
 800f130:	60a0      	str	r0, [r4, #8]
 800f132:	4620      	mov	r0, r4
 800f134:	f000 f818 	bl	800f168 <__sfp>
 800f138:	2200      	movs	r2, #0
 800f13a:	60e0      	str	r0, [r4, #12]
 800f13c:	2104      	movs	r1, #4
 800f13e:	6860      	ldr	r0, [r4, #4]
 800f140:	f7ff ff82 	bl	800f048 <std>
 800f144:	68a0      	ldr	r0, [r4, #8]
 800f146:	2201      	movs	r2, #1
 800f148:	2109      	movs	r1, #9
 800f14a:	f7ff ff7d 	bl	800f048 <std>
 800f14e:	68e0      	ldr	r0, [r4, #12]
 800f150:	2202      	movs	r2, #2
 800f152:	2112      	movs	r1, #18
 800f154:	f7ff ff78 	bl	800f048 <std>
 800f158:	2301      	movs	r3, #1
 800f15a:	61a3      	str	r3, [r4, #24]
 800f15c:	e7d2      	b.n	800f104 <__sinit+0xc>
 800f15e:	bf00      	nop
 800f160:	0800f62c 	.word	0x0800f62c
 800f164:	0800f091 	.word	0x0800f091

0800f168 <__sfp>:
 800f168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f16a:	4607      	mov	r7, r0
 800f16c:	f7ff ffac 	bl	800f0c8 <__sfp_lock_acquire>
 800f170:	4b1e      	ldr	r3, [pc, #120]	; (800f1ec <__sfp+0x84>)
 800f172:	681e      	ldr	r6, [r3, #0]
 800f174:	69b3      	ldr	r3, [r6, #24]
 800f176:	b913      	cbnz	r3, 800f17e <__sfp+0x16>
 800f178:	4630      	mov	r0, r6
 800f17a:	f7ff ffbd 	bl	800f0f8 <__sinit>
 800f17e:	3648      	adds	r6, #72	; 0x48
 800f180:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f184:	3b01      	subs	r3, #1
 800f186:	d503      	bpl.n	800f190 <__sfp+0x28>
 800f188:	6833      	ldr	r3, [r6, #0]
 800f18a:	b30b      	cbz	r3, 800f1d0 <__sfp+0x68>
 800f18c:	6836      	ldr	r6, [r6, #0]
 800f18e:	e7f7      	b.n	800f180 <__sfp+0x18>
 800f190:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f194:	b9d5      	cbnz	r5, 800f1cc <__sfp+0x64>
 800f196:	4b16      	ldr	r3, [pc, #88]	; (800f1f0 <__sfp+0x88>)
 800f198:	60e3      	str	r3, [r4, #12]
 800f19a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f19e:	6665      	str	r5, [r4, #100]	; 0x64
 800f1a0:	f000 f847 	bl	800f232 <__retarget_lock_init_recursive>
 800f1a4:	f7ff ff96 	bl	800f0d4 <__sfp_lock_release>
 800f1a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f1ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f1b0:	6025      	str	r5, [r4, #0]
 800f1b2:	61a5      	str	r5, [r4, #24]
 800f1b4:	2208      	movs	r2, #8
 800f1b6:	4629      	mov	r1, r5
 800f1b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f1bc:	f7fd fab4 	bl	800c728 <memset>
 800f1c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f1c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f1c8:	4620      	mov	r0, r4
 800f1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1cc:	3468      	adds	r4, #104	; 0x68
 800f1ce:	e7d9      	b.n	800f184 <__sfp+0x1c>
 800f1d0:	2104      	movs	r1, #4
 800f1d2:	4638      	mov	r0, r7
 800f1d4:	f7ff ff62 	bl	800f09c <__sfmoreglue>
 800f1d8:	4604      	mov	r4, r0
 800f1da:	6030      	str	r0, [r6, #0]
 800f1dc:	2800      	cmp	r0, #0
 800f1de:	d1d5      	bne.n	800f18c <__sfp+0x24>
 800f1e0:	f7ff ff78 	bl	800f0d4 <__sfp_lock_release>
 800f1e4:	230c      	movs	r3, #12
 800f1e6:	603b      	str	r3, [r7, #0]
 800f1e8:	e7ee      	b.n	800f1c8 <__sfp+0x60>
 800f1ea:	bf00      	nop
 800f1ec:	0800f62c 	.word	0x0800f62c
 800f1f0:	ffff0001 	.word	0xffff0001

0800f1f4 <_fwalk_reent>:
 800f1f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1f8:	4606      	mov	r6, r0
 800f1fa:	4688      	mov	r8, r1
 800f1fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f200:	2700      	movs	r7, #0
 800f202:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f206:	f1b9 0901 	subs.w	r9, r9, #1
 800f20a:	d505      	bpl.n	800f218 <_fwalk_reent+0x24>
 800f20c:	6824      	ldr	r4, [r4, #0]
 800f20e:	2c00      	cmp	r4, #0
 800f210:	d1f7      	bne.n	800f202 <_fwalk_reent+0xe>
 800f212:	4638      	mov	r0, r7
 800f214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f218:	89ab      	ldrh	r3, [r5, #12]
 800f21a:	2b01      	cmp	r3, #1
 800f21c:	d907      	bls.n	800f22e <_fwalk_reent+0x3a>
 800f21e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f222:	3301      	adds	r3, #1
 800f224:	d003      	beq.n	800f22e <_fwalk_reent+0x3a>
 800f226:	4629      	mov	r1, r5
 800f228:	4630      	mov	r0, r6
 800f22a:	47c0      	blx	r8
 800f22c:	4307      	orrs	r7, r0
 800f22e:	3568      	adds	r5, #104	; 0x68
 800f230:	e7e9      	b.n	800f206 <_fwalk_reent+0x12>

0800f232 <__retarget_lock_init_recursive>:
 800f232:	4770      	bx	lr

0800f234 <__retarget_lock_acquire_recursive>:
 800f234:	4770      	bx	lr

0800f236 <__retarget_lock_release_recursive>:
 800f236:	4770      	bx	lr

0800f238 <__swhatbuf_r>:
 800f238:	b570      	push	{r4, r5, r6, lr}
 800f23a:	460e      	mov	r6, r1
 800f23c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f240:	2900      	cmp	r1, #0
 800f242:	b096      	sub	sp, #88	; 0x58
 800f244:	4614      	mov	r4, r2
 800f246:	461d      	mov	r5, r3
 800f248:	da08      	bge.n	800f25c <__swhatbuf_r+0x24>
 800f24a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f24e:	2200      	movs	r2, #0
 800f250:	602a      	str	r2, [r5, #0]
 800f252:	061a      	lsls	r2, r3, #24
 800f254:	d410      	bmi.n	800f278 <__swhatbuf_r+0x40>
 800f256:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f25a:	e00e      	b.n	800f27a <__swhatbuf_r+0x42>
 800f25c:	466a      	mov	r2, sp
 800f25e:	f000 f903 	bl	800f468 <_fstat_r>
 800f262:	2800      	cmp	r0, #0
 800f264:	dbf1      	blt.n	800f24a <__swhatbuf_r+0x12>
 800f266:	9a01      	ldr	r2, [sp, #4]
 800f268:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f26c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f270:	425a      	negs	r2, r3
 800f272:	415a      	adcs	r2, r3
 800f274:	602a      	str	r2, [r5, #0]
 800f276:	e7ee      	b.n	800f256 <__swhatbuf_r+0x1e>
 800f278:	2340      	movs	r3, #64	; 0x40
 800f27a:	2000      	movs	r0, #0
 800f27c:	6023      	str	r3, [r4, #0]
 800f27e:	b016      	add	sp, #88	; 0x58
 800f280:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f284 <__smakebuf_r>:
 800f284:	898b      	ldrh	r3, [r1, #12]
 800f286:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f288:	079d      	lsls	r5, r3, #30
 800f28a:	4606      	mov	r6, r0
 800f28c:	460c      	mov	r4, r1
 800f28e:	d507      	bpl.n	800f2a0 <__smakebuf_r+0x1c>
 800f290:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f294:	6023      	str	r3, [r4, #0]
 800f296:	6123      	str	r3, [r4, #16]
 800f298:	2301      	movs	r3, #1
 800f29a:	6163      	str	r3, [r4, #20]
 800f29c:	b002      	add	sp, #8
 800f29e:	bd70      	pop	{r4, r5, r6, pc}
 800f2a0:	ab01      	add	r3, sp, #4
 800f2a2:	466a      	mov	r2, sp
 800f2a4:	f7ff ffc8 	bl	800f238 <__swhatbuf_r>
 800f2a8:	9900      	ldr	r1, [sp, #0]
 800f2aa:	4605      	mov	r5, r0
 800f2ac:	4630      	mov	r0, r6
 800f2ae:	f7ff f963 	bl	800e578 <_malloc_r>
 800f2b2:	b948      	cbnz	r0, 800f2c8 <__smakebuf_r+0x44>
 800f2b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2b8:	059a      	lsls	r2, r3, #22
 800f2ba:	d4ef      	bmi.n	800f29c <__smakebuf_r+0x18>
 800f2bc:	f023 0303 	bic.w	r3, r3, #3
 800f2c0:	f043 0302 	orr.w	r3, r3, #2
 800f2c4:	81a3      	strh	r3, [r4, #12]
 800f2c6:	e7e3      	b.n	800f290 <__smakebuf_r+0xc>
 800f2c8:	4b0d      	ldr	r3, [pc, #52]	; (800f300 <__smakebuf_r+0x7c>)
 800f2ca:	62b3      	str	r3, [r6, #40]	; 0x28
 800f2cc:	89a3      	ldrh	r3, [r4, #12]
 800f2ce:	6020      	str	r0, [r4, #0]
 800f2d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2d4:	81a3      	strh	r3, [r4, #12]
 800f2d6:	9b00      	ldr	r3, [sp, #0]
 800f2d8:	6163      	str	r3, [r4, #20]
 800f2da:	9b01      	ldr	r3, [sp, #4]
 800f2dc:	6120      	str	r0, [r4, #16]
 800f2de:	b15b      	cbz	r3, 800f2f8 <__smakebuf_r+0x74>
 800f2e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f2e4:	4630      	mov	r0, r6
 800f2e6:	f000 f8d1 	bl	800f48c <_isatty_r>
 800f2ea:	b128      	cbz	r0, 800f2f8 <__smakebuf_r+0x74>
 800f2ec:	89a3      	ldrh	r3, [r4, #12]
 800f2ee:	f023 0303 	bic.w	r3, r3, #3
 800f2f2:	f043 0301 	orr.w	r3, r3, #1
 800f2f6:	81a3      	strh	r3, [r4, #12]
 800f2f8:	89a0      	ldrh	r0, [r4, #12]
 800f2fa:	4305      	orrs	r5, r0
 800f2fc:	81a5      	strh	r5, [r4, #12]
 800f2fe:	e7cd      	b.n	800f29c <__smakebuf_r+0x18>
 800f300:	0800f091 	.word	0x0800f091

0800f304 <_malloc_usable_size_r>:
 800f304:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f308:	1f18      	subs	r0, r3, #4
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	bfbc      	itt	lt
 800f30e:	580b      	ldrlt	r3, [r1, r0]
 800f310:	18c0      	addlt	r0, r0, r3
 800f312:	4770      	bx	lr

0800f314 <_raise_r>:
 800f314:	291f      	cmp	r1, #31
 800f316:	b538      	push	{r3, r4, r5, lr}
 800f318:	4604      	mov	r4, r0
 800f31a:	460d      	mov	r5, r1
 800f31c:	d904      	bls.n	800f328 <_raise_r+0x14>
 800f31e:	2316      	movs	r3, #22
 800f320:	6003      	str	r3, [r0, #0]
 800f322:	f04f 30ff 	mov.w	r0, #4294967295
 800f326:	bd38      	pop	{r3, r4, r5, pc}
 800f328:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f32a:	b112      	cbz	r2, 800f332 <_raise_r+0x1e>
 800f32c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f330:	b94b      	cbnz	r3, 800f346 <_raise_r+0x32>
 800f332:	4620      	mov	r0, r4
 800f334:	f000 f830 	bl	800f398 <_getpid_r>
 800f338:	462a      	mov	r2, r5
 800f33a:	4601      	mov	r1, r0
 800f33c:	4620      	mov	r0, r4
 800f33e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f342:	f000 b817 	b.w	800f374 <_kill_r>
 800f346:	2b01      	cmp	r3, #1
 800f348:	d00a      	beq.n	800f360 <_raise_r+0x4c>
 800f34a:	1c59      	adds	r1, r3, #1
 800f34c:	d103      	bne.n	800f356 <_raise_r+0x42>
 800f34e:	2316      	movs	r3, #22
 800f350:	6003      	str	r3, [r0, #0]
 800f352:	2001      	movs	r0, #1
 800f354:	e7e7      	b.n	800f326 <_raise_r+0x12>
 800f356:	2400      	movs	r4, #0
 800f358:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f35c:	4628      	mov	r0, r5
 800f35e:	4798      	blx	r3
 800f360:	2000      	movs	r0, #0
 800f362:	e7e0      	b.n	800f326 <_raise_r+0x12>

0800f364 <raise>:
 800f364:	4b02      	ldr	r3, [pc, #8]	; (800f370 <raise+0xc>)
 800f366:	4601      	mov	r1, r0
 800f368:	6818      	ldr	r0, [r3, #0]
 800f36a:	f7ff bfd3 	b.w	800f314 <_raise_r>
 800f36e:	bf00      	nop
 800f370:	20000478 	.word	0x20000478

0800f374 <_kill_r>:
 800f374:	b538      	push	{r3, r4, r5, lr}
 800f376:	4d07      	ldr	r5, [pc, #28]	; (800f394 <_kill_r+0x20>)
 800f378:	2300      	movs	r3, #0
 800f37a:	4604      	mov	r4, r0
 800f37c:	4608      	mov	r0, r1
 800f37e:	4611      	mov	r1, r2
 800f380:	602b      	str	r3, [r5, #0]
 800f382:	f7f2 fe05 	bl	8001f90 <_kill>
 800f386:	1c43      	adds	r3, r0, #1
 800f388:	d102      	bne.n	800f390 <_kill_r+0x1c>
 800f38a:	682b      	ldr	r3, [r5, #0]
 800f38c:	b103      	cbz	r3, 800f390 <_kill_r+0x1c>
 800f38e:	6023      	str	r3, [r4, #0]
 800f390:	bd38      	pop	{r3, r4, r5, pc}
 800f392:	bf00      	nop
 800f394:	20000d54 	.word	0x20000d54

0800f398 <_getpid_r>:
 800f398:	f7f2 bdf2 	b.w	8001f80 <_getpid>

0800f39c <__sread>:
 800f39c:	b510      	push	{r4, lr}
 800f39e:	460c      	mov	r4, r1
 800f3a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3a4:	f000 f894 	bl	800f4d0 <_read_r>
 800f3a8:	2800      	cmp	r0, #0
 800f3aa:	bfab      	itete	ge
 800f3ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f3ae:	89a3      	ldrhlt	r3, [r4, #12]
 800f3b0:	181b      	addge	r3, r3, r0
 800f3b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f3b6:	bfac      	ite	ge
 800f3b8:	6563      	strge	r3, [r4, #84]	; 0x54
 800f3ba:	81a3      	strhlt	r3, [r4, #12]
 800f3bc:	bd10      	pop	{r4, pc}

0800f3be <__swrite>:
 800f3be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3c2:	461f      	mov	r7, r3
 800f3c4:	898b      	ldrh	r3, [r1, #12]
 800f3c6:	05db      	lsls	r3, r3, #23
 800f3c8:	4605      	mov	r5, r0
 800f3ca:	460c      	mov	r4, r1
 800f3cc:	4616      	mov	r6, r2
 800f3ce:	d505      	bpl.n	800f3dc <__swrite+0x1e>
 800f3d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3d4:	2302      	movs	r3, #2
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	f000 f868 	bl	800f4ac <_lseek_r>
 800f3dc:	89a3      	ldrh	r3, [r4, #12]
 800f3de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f3e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f3e6:	81a3      	strh	r3, [r4, #12]
 800f3e8:	4632      	mov	r2, r6
 800f3ea:	463b      	mov	r3, r7
 800f3ec:	4628      	mov	r0, r5
 800f3ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f3f2:	f000 b817 	b.w	800f424 <_write_r>

0800f3f6 <__sseek>:
 800f3f6:	b510      	push	{r4, lr}
 800f3f8:	460c      	mov	r4, r1
 800f3fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3fe:	f000 f855 	bl	800f4ac <_lseek_r>
 800f402:	1c43      	adds	r3, r0, #1
 800f404:	89a3      	ldrh	r3, [r4, #12]
 800f406:	bf15      	itete	ne
 800f408:	6560      	strne	r0, [r4, #84]	; 0x54
 800f40a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f40e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f412:	81a3      	strheq	r3, [r4, #12]
 800f414:	bf18      	it	ne
 800f416:	81a3      	strhne	r3, [r4, #12]
 800f418:	bd10      	pop	{r4, pc}

0800f41a <__sclose>:
 800f41a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f41e:	f000 b813 	b.w	800f448 <_close_r>
	...

0800f424 <_write_r>:
 800f424:	b538      	push	{r3, r4, r5, lr}
 800f426:	4d07      	ldr	r5, [pc, #28]	; (800f444 <_write_r+0x20>)
 800f428:	4604      	mov	r4, r0
 800f42a:	4608      	mov	r0, r1
 800f42c:	4611      	mov	r1, r2
 800f42e:	2200      	movs	r2, #0
 800f430:	602a      	str	r2, [r5, #0]
 800f432:	461a      	mov	r2, r3
 800f434:	f7f2 fde3 	bl	8001ffe <_write>
 800f438:	1c43      	adds	r3, r0, #1
 800f43a:	d102      	bne.n	800f442 <_write_r+0x1e>
 800f43c:	682b      	ldr	r3, [r5, #0]
 800f43e:	b103      	cbz	r3, 800f442 <_write_r+0x1e>
 800f440:	6023      	str	r3, [r4, #0]
 800f442:	bd38      	pop	{r3, r4, r5, pc}
 800f444:	20000d54 	.word	0x20000d54

0800f448 <_close_r>:
 800f448:	b538      	push	{r3, r4, r5, lr}
 800f44a:	4d06      	ldr	r5, [pc, #24]	; (800f464 <_close_r+0x1c>)
 800f44c:	2300      	movs	r3, #0
 800f44e:	4604      	mov	r4, r0
 800f450:	4608      	mov	r0, r1
 800f452:	602b      	str	r3, [r5, #0]
 800f454:	f7f2 fdef 	bl	8002036 <_close>
 800f458:	1c43      	adds	r3, r0, #1
 800f45a:	d102      	bne.n	800f462 <_close_r+0x1a>
 800f45c:	682b      	ldr	r3, [r5, #0]
 800f45e:	b103      	cbz	r3, 800f462 <_close_r+0x1a>
 800f460:	6023      	str	r3, [r4, #0]
 800f462:	bd38      	pop	{r3, r4, r5, pc}
 800f464:	20000d54 	.word	0x20000d54

0800f468 <_fstat_r>:
 800f468:	b538      	push	{r3, r4, r5, lr}
 800f46a:	4d07      	ldr	r5, [pc, #28]	; (800f488 <_fstat_r+0x20>)
 800f46c:	2300      	movs	r3, #0
 800f46e:	4604      	mov	r4, r0
 800f470:	4608      	mov	r0, r1
 800f472:	4611      	mov	r1, r2
 800f474:	602b      	str	r3, [r5, #0]
 800f476:	f7f2 fdea 	bl	800204e <_fstat>
 800f47a:	1c43      	adds	r3, r0, #1
 800f47c:	d102      	bne.n	800f484 <_fstat_r+0x1c>
 800f47e:	682b      	ldr	r3, [r5, #0]
 800f480:	b103      	cbz	r3, 800f484 <_fstat_r+0x1c>
 800f482:	6023      	str	r3, [r4, #0]
 800f484:	bd38      	pop	{r3, r4, r5, pc}
 800f486:	bf00      	nop
 800f488:	20000d54 	.word	0x20000d54

0800f48c <_isatty_r>:
 800f48c:	b538      	push	{r3, r4, r5, lr}
 800f48e:	4d06      	ldr	r5, [pc, #24]	; (800f4a8 <_isatty_r+0x1c>)
 800f490:	2300      	movs	r3, #0
 800f492:	4604      	mov	r4, r0
 800f494:	4608      	mov	r0, r1
 800f496:	602b      	str	r3, [r5, #0]
 800f498:	f7f2 fde9 	bl	800206e <_isatty>
 800f49c:	1c43      	adds	r3, r0, #1
 800f49e:	d102      	bne.n	800f4a6 <_isatty_r+0x1a>
 800f4a0:	682b      	ldr	r3, [r5, #0]
 800f4a2:	b103      	cbz	r3, 800f4a6 <_isatty_r+0x1a>
 800f4a4:	6023      	str	r3, [r4, #0]
 800f4a6:	bd38      	pop	{r3, r4, r5, pc}
 800f4a8:	20000d54 	.word	0x20000d54

0800f4ac <_lseek_r>:
 800f4ac:	b538      	push	{r3, r4, r5, lr}
 800f4ae:	4d07      	ldr	r5, [pc, #28]	; (800f4cc <_lseek_r+0x20>)
 800f4b0:	4604      	mov	r4, r0
 800f4b2:	4608      	mov	r0, r1
 800f4b4:	4611      	mov	r1, r2
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	602a      	str	r2, [r5, #0]
 800f4ba:	461a      	mov	r2, r3
 800f4bc:	f7f2 fde2 	bl	8002084 <_lseek>
 800f4c0:	1c43      	adds	r3, r0, #1
 800f4c2:	d102      	bne.n	800f4ca <_lseek_r+0x1e>
 800f4c4:	682b      	ldr	r3, [r5, #0]
 800f4c6:	b103      	cbz	r3, 800f4ca <_lseek_r+0x1e>
 800f4c8:	6023      	str	r3, [r4, #0]
 800f4ca:	bd38      	pop	{r3, r4, r5, pc}
 800f4cc:	20000d54 	.word	0x20000d54

0800f4d0 <_read_r>:
 800f4d0:	b538      	push	{r3, r4, r5, lr}
 800f4d2:	4d07      	ldr	r5, [pc, #28]	; (800f4f0 <_read_r+0x20>)
 800f4d4:	4604      	mov	r4, r0
 800f4d6:	4608      	mov	r0, r1
 800f4d8:	4611      	mov	r1, r2
 800f4da:	2200      	movs	r2, #0
 800f4dc:	602a      	str	r2, [r5, #0]
 800f4de:	461a      	mov	r2, r3
 800f4e0:	f7f2 fd70 	bl	8001fc4 <_read>
 800f4e4:	1c43      	adds	r3, r0, #1
 800f4e6:	d102      	bne.n	800f4ee <_read_r+0x1e>
 800f4e8:	682b      	ldr	r3, [r5, #0]
 800f4ea:	b103      	cbz	r3, 800f4ee <_read_r+0x1e>
 800f4ec:	6023      	str	r3, [r4, #0]
 800f4ee:	bd38      	pop	{r3, r4, r5, pc}
 800f4f0:	20000d54 	.word	0x20000d54

0800f4f4 <_init>:
 800f4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4f6:	bf00      	nop
 800f4f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4fa:	bc08      	pop	{r3}
 800f4fc:	469e      	mov	lr, r3
 800f4fe:	4770      	bx	lr

0800f500 <_fini>:
 800f500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f502:	bf00      	nop
 800f504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f506:	bc08      	pop	{r3}
 800f508:	469e      	mov	lr, r3
 800f50a:	4770      	bx	lr
